
==================== LLVM Code ====================
2018-12-28 09:14:25.8682383 UTC

target datalayout = "e-m:w-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows"


==================== LLVM Code ====================
2018-12-28 09:14:25.8712336 UTC

declare ccc i8* @memcpy$def(i8*, i8*, i64)


==================== LLVM Code ====================
2018-12-28 09:14:25.8732318 UTC

declare ccc i8* @memmove$def(i8*, i8*, i64)


==================== LLVM Code ====================
2018-12-28 09:14:25.8762277 UTC

declare ccc i8* @memset$def(i8*, i64, i64)


==================== LLVM Code ====================
2018-12-28 09:14:25.8792204 UTC

declare ccc i64 @newSpark$def(i8*, i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.8822183 UTC

!0 = !{!"root"}
!1 = !{!"top", !0}
!2 = !{!"stack", !1}
!3 = !{!"heap", !1}
!4 = !{!"rx", !3}
!5 = !{!"base", !1}


==================== LLVM Code ====================
2018-12-28 09:14:25.8852136 UTC



==================== LLVM Code ====================
2018-12-28 09:14:25.9011898 UTC

%Main_viewGameState1_closure_struct = type <{i64, i64, i64, i64}>
@Main_viewGameState1_closure$def = internal global %Main_viewGameState1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState1_info$def to i64), i64 0, i64 0, i64 0}>
@Main_viewGameState1_closure = alias i8, bitcast (%Main_viewGameState1_closure_struct* @Main_viewGameState1_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.9071778 UTC

@Main_viewGameState1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState1_info$def to i8*)
define ghccc void @Main_viewGameState1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState1_info$def to i64)),i64 0), i64 0, i64 4294967317}>
{
c9b8:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %lc9b5 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9bc = load i64*, i64** %Sp_Var
  %ln9bd = getelementptr inbounds i64, i64* %ln9bc, i32 -2
  %ln9be = ptrtoint i64* %ln9bd to i64
  %ln9bf = icmp ult i64 %ln9be, %SpLim_Arg
  %ln9bh = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9bf, i1 0 )
  br i1 %ln9bh, label %c9b9, label %c9ba
c9ba:
  %ln9bi = ptrtoint i64* %Base_Arg to i64
  %ln9bj = inttoptr i64 %ln9bi to i8*
  %ln9bk = load i64, i64* %R1_Var
  %ln9bl = inttoptr i64 %ln9bk to i8*
  %ln9bm = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  %ln9bn = call ccc i8* (i8*, i8*) %ln9bm( i8* %ln9bj, i8* %ln9bl ) nounwind
  %ln9bo = ptrtoint i8* %ln9bn to i64
  store i64 %ln9bo, i64* %lc9b5
  %ln9bp = load i64, i64* %lc9b5
  %ln9bq = icmp eq i64 %ln9bp, 0
  br i1 %ln9bq, label %c9b7, label %c9b6
c9b6:
  %ln9bs = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9br = load i64*, i64** %Sp_Var
  %ln9bt = getelementptr inbounds i64, i64* %ln9br, i32 -2
  store i64 %ln9bs, i64* %ln9bt, !tbaa !2
  %ln9bv = load i64, i64* %lc9b5
  %ln9bu = load i64*, i64** %Sp_Var
  %ln9bw = getelementptr inbounds i64, i64* %ln9bu, i32 -1
  store i64 %ln9bv, i64* %ln9bw, !tbaa !2
  store i64 15, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln9bx = load i64*, i64** %Sp_Var
  %ln9by = getelementptr inbounds i64, i64* %ln9bx, i32 -2
  %ln9bz = ptrtoint i64* %ln9by to i64
  %ln9bA = inttoptr i64 %ln9bz to i64*
  store i64* %ln9bA, i64** %Sp_Var
  %ln9bB = bitcast i8* @base_GHCziInt_zdwzdcenumFromTo3_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bC = load i64*, i64** %Sp_Var
  %ln9bD = load i64, i64* %R1_Var
  %ln9bE = load i64, i64* %R2_Var
  %ln9bF = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bB( i64* %Base_Arg, i64* %ln9bC, i64* %Hp_Arg, i64 %ln9bD, i64 %ln9bE, i64 %ln9bF, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9b7:
  %ln9bH = load i64, i64* %R1_Var
  %ln9bI = inttoptr i64 %ln9bH to i64*
  %ln9bJ = load i64, i64* %ln9bI, !tbaa !4
  %ln9bK = inttoptr i64 %ln9bJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bL = load i64*, i64** %Sp_Var
  %ln9bM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bK( i64* %Base_Arg, i64* %ln9bL, i64* %Hp_Arg, i64 %ln9bM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9b9:
  %ln9bN = load i64, i64* %R1_Var
  store i64 %ln9bN, i64* %R1_Var
  %ln9bO = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9bP = bitcast i64* %ln9bO to i64*
  %ln9bQ = load i64, i64* %ln9bP, !tbaa !5
  %ln9bR = inttoptr i64 %ln9bQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bS = load i64*, i64** %Sp_Var
  %ln9bT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bR( i64* %Base_Arg, i64* %ln9bS, i64* %Hp_Arg, i64 %ln9bT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc i1 @llvm.expect.i1(i1, i1)


==================== LLVM Code ====================
2018-12-28 09:14:25.9141681 UTC

%Main_viewGameState2_closure_struct = type <{i64, i64, i64, i64}>
@Main_viewGameState2_closure$def = internal global %Main_viewGameState2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState2_info$def to i64), i64 0, i64 0, i64 0}>
@Main_viewGameState2_closure = alias i8, bitcast (%Main_viewGameState2_closure_struct* @Main_viewGameState2_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.9191597 UTC

@Main_viewGameState2_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState2_info$def to i8*)
define ghccc void @Main_viewGameState2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState2_info$def to i64)),i64 0), i64 0, i64 4294967317}>
{
c9c0:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %lc9bX = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9c3 = load i64*, i64** %Sp_Var
  %ln9c4 = getelementptr inbounds i64, i64* %ln9c3, i32 -2
  %ln9c5 = ptrtoint i64* %ln9c4 to i64
  %ln9c6 = icmp ult i64 %ln9c5, %SpLim_Arg
  %ln9c7 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9c6, i1 0 )
  br i1 %ln9c7, label %c9c1, label %c9c2
c9c2:
  %ln9c8 = ptrtoint i64* %Base_Arg to i64
  %ln9c9 = inttoptr i64 %ln9c8 to i8*
  %ln9ca = load i64, i64* %R1_Var
  %ln9cb = inttoptr i64 %ln9ca to i8*
  %ln9cc = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  %ln9cd = call ccc i8* (i8*, i8*) %ln9cc( i8* %ln9c9, i8* %ln9cb ) nounwind
  %ln9ce = ptrtoint i8* %ln9cd to i64
  store i64 %ln9ce, i64* %lc9bX
  %ln9cf = load i64, i64* %lc9bX
  %ln9cg = icmp eq i64 %ln9cf, 0
  br i1 %ln9cg, label %c9bZ, label %c9bY
c9bY:
  %ln9ci = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9ch = load i64*, i64** %Sp_Var
  %ln9cj = getelementptr inbounds i64, i64* %ln9ch, i32 -2
  store i64 %ln9ci, i64* %ln9cj, !tbaa !2
  %ln9cl = load i64, i64* %lc9bX
  %ln9ck = load i64*, i64** %Sp_Var
  %ln9cm = getelementptr inbounds i64, i64* %ln9ck, i32 -1
  store i64 %ln9cl, i64* %ln9cm, !tbaa !2
  store i64 16, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln9cn = load i64*, i64** %Sp_Var
  %ln9co = getelementptr inbounds i64, i64* %ln9cn, i32 -2
  %ln9cp = ptrtoint i64* %ln9co to i64
  %ln9cq = inttoptr i64 %ln9cp to i64*
  store i64* %ln9cq, i64** %Sp_Var
  %ln9cr = bitcast i8* @base_GHCziInt_zdwzdcenumFromTo3_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9cs = load i64*, i64** %Sp_Var
  %ln9ct = load i64, i64* %R1_Var
  %ln9cu = load i64, i64* %R2_Var
  %ln9cv = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9cr( i64* %Base_Arg, i64* %ln9cs, i64* %Hp_Arg, i64 %ln9ct, i64 %ln9cu, i64 %ln9cv, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9bZ:
  %ln9cx = load i64, i64* %R1_Var
  %ln9cy = inttoptr i64 %ln9cx to i64*
  %ln9cz = load i64, i64* %ln9cy, !tbaa !4
  %ln9cA = inttoptr i64 %ln9cz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9cB = load i64*, i64** %Sp_Var
  %ln9cC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9cA( i64* %Base_Arg, i64* %ln9cB, i64* %Hp_Arg, i64 %ln9cC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9c1:
  %ln9cD = load i64, i64* %R1_Var
  store i64 %ln9cD, i64* %R1_Var
  %ln9cE = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9cF = bitcast i64* %ln9cE to i64*
  %ln9cG = load i64, i64* %ln9cF, !tbaa !5
  %ln9cH = inttoptr i64 %ln9cG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9cI = load i64*, i64** %Sp_Var
  %ln9cJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9cH( i64* %Base_Arg, i64* %ln9cI, i64* %Hp_Arg, i64 %ln9cJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:25.9251509 UTC

%Main_arrayByIndex17_bytes_struct = type <{[2 x i8]}>
@Main_arrayByIndex17_bytes$def = internal constant %Main_arrayByIndex17_bytes_struct<{[2 x i8] [i8 41, i8 0]}>, align 1
@Main_arrayByIndex17_bytes = alias i8, bitcast (%Main_arrayByIndex17_bytes_struct* @Main_arrayByIndex17_bytes$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.9281462 UTC

%Main_arrayByIndex18_bytes_struct = type <{[19 x i8]}>
@Main_arrayByIndex18_bytes$def = internal constant %Main_arrayByIndex18_bytes_struct<{[19 x i8] [i8 32, i8 110, i8 111, i8 116, i8 32, i8 105, i8 110, i8 32, i8 114, i8 97, i8 110, i8 103, i8 101, i8 32, i8 91, i8 48, i8 46, i8 46, i8 0]}>, align 1
@Main_arrayByIndex18_bytes = alias i8, bitcast (%Main_arrayByIndex18_bytes_struct* @Main_arrayByIndex18_bytes$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.9311396 UTC

%Main_arrayByIndex1_bytes_struct = type <{[23 x i8]}>
@Main_arrayByIndex1_bytes$def = internal constant %Main_arrayByIndex1_bytes_struct<{[23 x i8] [i8 69, i8 114, i8 114, i8 111, i8 114, i8 32, i8 105, i8 110, i8 32, i8 97, i8 114, i8 114, i8 97, i8 121, i8 32, i8 105, i8 110, i8 100, i8 101, i8 120, i8 59, i8 32, i8 0]}>, align 1
@Main_arrayByIndex1_bytes = alias i8, bitcast (%Main_arrayByIndex1_bytes_struct* @Main_arrayByIndex1_bytes$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.9341349 UTC

%Main_arrayByIndex4_closure_struct = type <{i64, i64}>
@Main_arrayByIndex4_closure$def = internal global %Main_arrayByIndex4_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Izh_con_info to i64), i64 76}>
@Main_arrayByIndex4_closure = alias i8, bitcast (%Main_arrayByIndex4_closure_struct* @Main_arrayByIndex4_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.936133 UTC

%Main_arrayByIndex5_closure_struct = type <{i64, i64}>
@Main_arrayByIndex5_closure$def = internal global %Main_arrayByIndex5_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Izh_con_info to i64), i64 83}>
@Main_arrayByIndex5_closure = alias i8, bitcast (%Main_arrayByIndex5_closure_struct* @Main_arrayByIndex5_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.939127 UTC

%Main_arrayByIndex6_closure_struct = type <{i64, i64}>
@Main_arrayByIndex6_closure$def = internal global %Main_arrayByIndex6_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Izh_con_info to i64), i64 31}>
@Main_arrayByIndex6_closure = alias i8, bitcast (%Main_arrayByIndex6_closure_struct* @Main_arrayByIndex6_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.9421243 UTC

%Main_arrayByIndex7_closure_struct = type <{i64, i64}>
@Main_arrayByIndex7_closure$def = internal global %Main_arrayByIndex7_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Izh_con_info to i64), i64 82}>
@Main_arrayByIndex7_closure = alias i8, bitcast (%Main_arrayByIndex7_closure_struct* @Main_arrayByIndex7_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.9461218 UTC

%Main_arrayByIndex9_bytes_struct = type <{[39 x i8]}>
@Main_arrayByIndex9_bytes$def = internal constant %Main_arrayByIndex9_bytes_struct<{[39 x i8] [i8 108, i8 105, i8 98, i8 114, i8 97, i8 114, i8 105, i8 101, i8 115, i8 92, i8 92, i8 97, i8 114, i8 114, i8 97, i8 121, i8 92, i8 92, i8 68, i8 97, i8 116, i8 97, i8 92, i8 92, i8 65, i8 114, i8 114, i8 97, i8 121, i8 92, i8 92, i8 66, i8 97, i8 115, i8 101, i8 46, i8 104, i8 115, i8 0]}>, align 1
@Main_arrayByIndex9_bytes = alias i8, bitcast (%Main_arrayByIndex9_bytes_struct* @Main_arrayByIndex9_bytes$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.9501085 UTC

%Main_arrayByIndex8_closure_struct = type <{i64, i64, i64, i64}>
@Main_arrayByIndex8_closure$def = internal global %Main_arrayByIndex8_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex8_info$def to i64), i64 0, i64 0, i64 0}>
@Main_arrayByIndex8_closure = alias i8, bitcast (%Main_arrayByIndex8_closure_struct* @Main_arrayByIndex8_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.9670851 UTC

@Main_arrayByIndex8_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex8_info$def to i8*)
define ghccc void @Main_arrayByIndex8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 21}>
{
c9cQ:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %lc9cN = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9cT = load i64*, i64** %Sp_Var
  %ln9cU = getelementptr inbounds i64, i64* %ln9cT, i32 -2
  %ln9cV = ptrtoint i64* %ln9cU to i64
  %ln9cW = icmp ult i64 %ln9cV, %SpLim_Arg
  %ln9cX = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9cW, i1 0 )
  br i1 %ln9cX, label %c9cR, label %c9cS
c9cS:
  %ln9cY = ptrtoint i64* %Base_Arg to i64
  %ln9cZ = inttoptr i64 %ln9cY to i8*
  %ln9d0 = load i64, i64* %R1_Var
  %ln9d1 = inttoptr i64 %ln9d0 to i8*
  %ln9d2 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  %ln9d3 = call ccc i8* (i8*, i8*) %ln9d2( i8* %ln9cZ, i8* %ln9d1 ) nounwind
  %ln9d4 = ptrtoint i8* %ln9d3 to i64
  store i64 %ln9d4, i64* %lc9cN
  %ln9d5 = load i64, i64* %lc9cN
  %ln9d6 = icmp eq i64 %ln9d5, 0
  br i1 %ln9d6, label %c9cP, label %c9cO
c9cO:
  %ln9d8 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9d7 = load i64*, i64** %Sp_Var
  %ln9d9 = getelementptr inbounds i64, i64* %ln9d7, i32 -2
  store i64 %ln9d8, i64* %ln9d9, !tbaa !2
  %ln9db = load i64, i64* %lc9cN
  %ln9da = load i64*, i64** %Sp_Var
  %ln9dc = getelementptr inbounds i64, i64* %ln9da, i32 -1
  store i64 %ln9db, i64* %ln9dc, !tbaa !2
  %ln9dd = ptrtoint %Main_arrayByIndex9_bytes_struct* @Main_arrayByIndex9_bytes$def to i64
  store i64 %ln9dd, i64* %R2_Var
  %ln9de = load i64*, i64** %Sp_Var
  %ln9df = getelementptr inbounds i64, i64* %ln9de, i32 -2
  %ln9dg = ptrtoint i64* %ln9df to i64
  %ln9dh = inttoptr i64 %ln9dg to i64*
  store i64* %ln9dh, i64** %Sp_Var
  %ln9di = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9dj = load i64*, i64** %Sp_Var
  %ln9dk = load i64, i64* %R1_Var
  %ln9dl = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9di( i64* %Base_Arg, i64* %ln9dj, i64* %Hp_Arg, i64 %ln9dk, i64 %ln9dl, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9cP:
  %ln9dn = load i64, i64* %R1_Var
  %ln9do = inttoptr i64 %ln9dn to i64*
  %ln9dp = load i64, i64* %ln9do, !tbaa !4
  %ln9dq = inttoptr i64 %ln9dp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9dr = load i64*, i64** %Sp_Var
  %ln9ds = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9dq( i64* %Base_Arg, i64* %ln9dr, i64* %Hp_Arg, i64 %ln9ds, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9cR:
  %ln9dt = load i64, i64* %R1_Var
  store i64 %ln9dt, i64* %R1_Var
  %ln9du = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9dv = bitcast i64* %ln9du to i64*
  %ln9dw = load i64, i64* %ln9dv, !tbaa !5
  %ln9dx = inttoptr i64 %ln9dw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9dy = load i64*, i64** %Sp_Var
  %ln9dz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9dx( i64* %Base_Arg, i64* %ln9dy, i64* %Hp_Arg, i64 %ln9dz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:25.9710782 UTC

%Main_arrayByIndex11_bytes_struct = type <{[16 x i8]}>
@Main_arrayByIndex11_bytes$def = internal constant %Main_arrayByIndex11_bytes_struct<{[16 x i8] [i8 68, i8 97, i8 116, i8 97, i8 46, i8 65, i8 114, i8 114, i8 97, i8 121, i8 46, i8 66, i8 97, i8 115, i8 101, i8 0]}>, align 1
@Main_arrayByIndex11_bytes = alias i8, bitcast (%Main_arrayByIndex11_bytes_struct* @Main_arrayByIndex11_bytes$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.9750706 UTC

%Main_arrayByIndex10_closure_struct = type <{i64, i64, i64, i64}>
@Main_arrayByIndex10_closure$def = internal global %Main_arrayByIndex10_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex10_info$def to i64), i64 0, i64 0, i64 0}>
@Main_arrayByIndex10_closure = alias i8, bitcast (%Main_arrayByIndex10_closure_struct* @Main_arrayByIndex10_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.9790637 UTC

@Main_arrayByIndex10_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex10_info$def to i8*)
define ghccc void @Main_arrayByIndex10_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 21}>
{
c9dG:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %lc9dD = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9dJ = load i64*, i64** %Sp_Var
  %ln9dK = getelementptr inbounds i64, i64* %ln9dJ, i32 -2
  %ln9dL = ptrtoint i64* %ln9dK to i64
  %ln9dM = icmp ult i64 %ln9dL, %SpLim_Arg
  %ln9dN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9dM, i1 0 )
  br i1 %ln9dN, label %c9dH, label %c9dI
c9dI:
  %ln9dO = ptrtoint i64* %Base_Arg to i64
  %ln9dP = inttoptr i64 %ln9dO to i8*
  %ln9dQ = load i64, i64* %R1_Var
  %ln9dR = inttoptr i64 %ln9dQ to i8*
  %ln9dS = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  %ln9dT = call ccc i8* (i8*, i8*) %ln9dS( i8* %ln9dP, i8* %ln9dR ) nounwind
  %ln9dU = ptrtoint i8* %ln9dT to i64
  store i64 %ln9dU, i64* %lc9dD
  %ln9dV = load i64, i64* %lc9dD
  %ln9dW = icmp eq i64 %ln9dV, 0
  br i1 %ln9dW, label %c9dF, label %c9dE
c9dE:
  %ln9dY = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9dX = load i64*, i64** %Sp_Var
  %ln9dZ = getelementptr inbounds i64, i64* %ln9dX, i32 -2
  store i64 %ln9dY, i64* %ln9dZ, !tbaa !2
  %ln9e1 = load i64, i64* %lc9dD
  %ln9e0 = load i64*, i64** %Sp_Var
  %ln9e2 = getelementptr inbounds i64, i64* %ln9e0, i32 -1
  store i64 %ln9e1, i64* %ln9e2, !tbaa !2
  %ln9e3 = ptrtoint %Main_arrayByIndex11_bytes_struct* @Main_arrayByIndex11_bytes$def to i64
  store i64 %ln9e3, i64* %R2_Var
  %ln9e4 = load i64*, i64** %Sp_Var
  %ln9e5 = getelementptr inbounds i64, i64* %ln9e4, i32 -2
  %ln9e6 = ptrtoint i64* %ln9e5 to i64
  %ln9e7 = inttoptr i64 %ln9e6 to i64*
  store i64* %ln9e7, i64** %Sp_Var
  %ln9e8 = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9e9 = load i64*, i64** %Sp_Var
  %ln9ea = load i64, i64* %R1_Var
  %ln9eb = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9e8( i64* %Base_Arg, i64* %ln9e9, i64* %Hp_Arg, i64 %ln9ea, i64 %ln9eb, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9dF:
  %ln9ed = load i64, i64* %R1_Var
  %ln9ee = inttoptr i64 %ln9ed to i64*
  %ln9ef = load i64, i64* %ln9ee, !tbaa !4
  %ln9eg = inttoptr i64 %ln9ef to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9eh = load i64*, i64** %Sp_Var
  %ln9ei = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9eg( i64* %Base_Arg, i64* %ln9eh, i64* %Hp_Arg, i64 %ln9ei, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9dH:
  %ln9ej = load i64, i64* %R1_Var
  store i64 %ln9ej, i64* %R1_Var
  %ln9ek = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9el = bitcast i64* %ln9ek to i64*
  %ln9em = load i64, i64* %ln9el, !tbaa !5
  %ln9en = inttoptr i64 %ln9em to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9eo = load i64*, i64** %Sp_Var
  %ln9ep = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9en( i64* %Base_Arg, i64* %ln9eo, i64* %Hp_Arg, i64 %ln9ep, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:25.9840571 UTC

%Main_arrayByIndex13_bytes_struct = type <{[14 x i8]}>
@Main_arrayByIndex13_bytes$def = internal constant %Main_arrayByIndex13_bytes_struct<{[14 x i8] [i8 97, i8 114, i8 114, i8 97, i8 121, i8 45, i8 48, i8 46, i8 53, i8 46, i8 50, i8 46, i8 48, i8 0]}>, align 1
@Main_arrayByIndex13_bytes = alias i8, bitcast (%Main_arrayByIndex13_bytes_struct* @Main_arrayByIndex13_bytes$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.9880528 UTC

%Main_arrayByIndex12_closure_struct = type <{i64, i64, i64, i64}>
@Main_arrayByIndex12_closure$def = internal global %Main_arrayByIndex12_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex12_info$def to i64), i64 0, i64 0, i64 0}>
@Main_arrayByIndex12_closure = alias i8, bitcast (%Main_arrayByIndex12_closure_struct* @Main_arrayByIndex12_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:25.992044 UTC

@Main_arrayByIndex12_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex12_info$def to i8*)
define ghccc void @Main_arrayByIndex12_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 21}>
{
c9ew:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %lc9et = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9ez = load i64*, i64** %Sp_Var
  %ln9eA = getelementptr inbounds i64, i64* %ln9ez, i32 -2
  %ln9eB = ptrtoint i64* %ln9eA to i64
  %ln9eC = icmp ult i64 %ln9eB, %SpLim_Arg
  %ln9eD = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9eC, i1 0 )
  br i1 %ln9eD, label %c9ex, label %c9ey
c9ey:
  %ln9eE = ptrtoint i64* %Base_Arg to i64
  %ln9eF = inttoptr i64 %ln9eE to i8*
  %ln9eG = load i64, i64* %R1_Var
  %ln9eH = inttoptr i64 %ln9eG to i8*
  %ln9eI = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  %ln9eJ = call ccc i8* (i8*, i8*) %ln9eI( i8* %ln9eF, i8* %ln9eH ) nounwind
  %ln9eK = ptrtoint i8* %ln9eJ to i64
  store i64 %ln9eK, i64* %lc9et
  %ln9eL = load i64, i64* %lc9et
  %ln9eM = icmp eq i64 %ln9eL, 0
  br i1 %ln9eM, label %c9ev, label %c9eu
c9eu:
  %ln9eO = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9eN = load i64*, i64** %Sp_Var
  %ln9eP = getelementptr inbounds i64, i64* %ln9eN, i32 -2
  store i64 %ln9eO, i64* %ln9eP, !tbaa !2
  %ln9eR = load i64, i64* %lc9et
  %ln9eQ = load i64*, i64** %Sp_Var
  %ln9eS = getelementptr inbounds i64, i64* %ln9eQ, i32 -1
  store i64 %ln9eR, i64* %ln9eS, !tbaa !2
  %ln9eT = ptrtoint %Main_arrayByIndex13_bytes_struct* @Main_arrayByIndex13_bytes$def to i64
  store i64 %ln9eT, i64* %R2_Var
  %ln9eU = load i64*, i64** %Sp_Var
  %ln9eV = getelementptr inbounds i64, i64* %ln9eU, i32 -2
  %ln9eW = ptrtoint i64* %ln9eV to i64
  %ln9eX = inttoptr i64 %ln9eW to i64*
  store i64* %ln9eX, i64** %Sp_Var
  %ln9eY = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9eZ = load i64*, i64** %Sp_Var
  %ln9f0 = load i64, i64* %R1_Var
  %ln9f1 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9eY( i64* %Base_Arg, i64* %ln9eZ, i64* %Hp_Arg, i64 %ln9f0, i64 %ln9f1, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9ev:
  %ln9f3 = load i64, i64* %R1_Var
  %ln9f4 = inttoptr i64 %ln9f3 to i64*
  %ln9f5 = load i64, i64* %ln9f4, !tbaa !4
  %ln9f6 = inttoptr i64 %ln9f5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9f7 = load i64*, i64** %Sp_Var
  %ln9f8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9f6( i64* %Base_Arg, i64* %ln9f7, i64* %Hp_Arg, i64 %ln9f8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9ex:
  %ln9f9 = load i64, i64* %R1_Var
  store i64 %ln9f9, i64* %R1_Var
  %ln9fa = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9fb = bitcast i64* %ln9fa to i64*
  %ln9fc = load i64, i64* %ln9fb, !tbaa !5
  %ln9fd = inttoptr i64 %ln9fc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fe = load i64*, i64** %Sp_Var
  %ln9ff = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fd( i64* %Base_Arg, i64* %ln9fe, i64* %Hp_Arg, i64 %ln9ff, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:25.9970368 UTC

%Main_arrayByIndex3_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64, i64}>
@Main_arrayByIndex3_closure$def = internal global %Main_arrayByIndex3_closure_struct<{i64 ptrtoint (i8* @base_GHCziStackziTypes_SrcLoc_con_info to i64), i64 ptrtoint (%Main_arrayByIndex12_closure_struct* @Main_arrayByIndex12_closure$def to i64), i64 ptrtoint (%Main_arrayByIndex10_closure_struct* @Main_arrayByIndex10_closure$def to i64), i64 ptrtoint (%Main_arrayByIndex8_closure_struct* @Main_arrayByIndex8_closure$def to i64), i64 add (i64 ptrtoint (%Main_arrayByIndex7_closure_struct* @Main_arrayByIndex7_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_arrayByIndex6_closure_struct* @Main_arrayByIndex6_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_arrayByIndex5_closure_struct* @Main_arrayByIndex5_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_arrayByIndex4_closure_struct* @Main_arrayByIndex4_closure$def to i64),i64 1), i64 0}>
@Main_arrayByIndex3_closure = alias i8, bitcast (%Main_arrayByIndex3_closure_struct* @Main_arrayByIndex3_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.0000321 UTC

%Main_arrayByIndex15_bytes_struct = type <{[6 x i8]}>
@Main_arrayByIndex15_bytes$def = internal constant %Main_arrayByIndex15_bytes_struct<{[6 x i8] [i8 101, i8 114, i8 114, i8 111, i8 114, i8 0]}>, align 1
@Main_arrayByIndex15_bytes = alias i8, bitcast (%Main_arrayByIndex15_bytes_struct* @Main_arrayByIndex15_bytes$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.0030274 UTC

%Main_arrayByIndex14_closure_struct = type <{i64, i64, i64, i64}>
@Main_arrayByIndex14_closure$def = internal global %Main_arrayByIndex14_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex14_info$def to i64), i64 0, i64 0, i64 0}>
@Main_arrayByIndex14_closure = alias i8, bitcast (%Main_arrayByIndex14_closure_struct* @Main_arrayByIndex14_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.0070205 UTC

@Main_arrayByIndex14_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex14_info$def to i8*)
define ghccc void @Main_arrayByIndex14_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 21}>
{
c9fm:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %lc9fj = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9fp = load i64*, i64** %Sp_Var
  %ln9fq = getelementptr inbounds i64, i64* %ln9fp, i32 -2
  %ln9fr = ptrtoint i64* %ln9fq to i64
  %ln9fs = icmp ult i64 %ln9fr, %SpLim_Arg
  %ln9ft = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9fs, i1 0 )
  br i1 %ln9ft, label %c9fn, label %c9fo
c9fo:
  %ln9fu = ptrtoint i64* %Base_Arg to i64
  %ln9fv = inttoptr i64 %ln9fu to i8*
  %ln9fw = load i64, i64* %R1_Var
  %ln9fx = inttoptr i64 %ln9fw to i8*
  %ln9fy = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  %ln9fz = call ccc i8* (i8*, i8*) %ln9fy( i8* %ln9fv, i8* %ln9fx ) nounwind
  %ln9fA = ptrtoint i8* %ln9fz to i64
  store i64 %ln9fA, i64* %lc9fj
  %ln9fB = load i64, i64* %lc9fj
  %ln9fC = icmp eq i64 %ln9fB, 0
  br i1 %ln9fC, label %c9fl, label %c9fk
c9fk:
  %ln9fE = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9fD = load i64*, i64** %Sp_Var
  %ln9fF = getelementptr inbounds i64, i64* %ln9fD, i32 -2
  store i64 %ln9fE, i64* %ln9fF, !tbaa !2
  %ln9fH = load i64, i64* %lc9fj
  %ln9fG = load i64*, i64** %Sp_Var
  %ln9fI = getelementptr inbounds i64, i64* %ln9fG, i32 -1
  store i64 %ln9fH, i64* %ln9fI, !tbaa !2
  %ln9fJ = ptrtoint %Main_arrayByIndex15_bytes_struct* @Main_arrayByIndex15_bytes$def to i64
  store i64 %ln9fJ, i64* %R2_Var
  %ln9fK = load i64*, i64** %Sp_Var
  %ln9fL = getelementptr inbounds i64, i64* %ln9fK, i32 -2
  %ln9fM = ptrtoint i64* %ln9fL to i64
  %ln9fN = inttoptr i64 %ln9fM to i64*
  store i64* %ln9fN, i64** %Sp_Var
  %ln9fO = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fP = load i64*, i64** %Sp_Var
  %ln9fQ = load i64, i64* %R1_Var
  %ln9fR = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fO( i64* %Base_Arg, i64* %ln9fP, i64* %Hp_Arg, i64 %ln9fQ, i64 %ln9fR, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9fl:
  %ln9fT = load i64, i64* %R1_Var
  %ln9fU = inttoptr i64 %ln9fT to i64*
  %ln9fV = load i64, i64* %ln9fU, !tbaa !4
  %ln9fW = inttoptr i64 %ln9fV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fX = load i64*, i64** %Sp_Var
  %ln9fY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fW( i64* %Base_Arg, i64* %ln9fX, i64* %Hp_Arg, i64 %ln9fY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9fn:
  %ln9fZ = load i64, i64* %R1_Var
  store i64 %ln9fZ, i64* %R1_Var
  %ln9g0 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9g1 = bitcast i64* %ln9g0 to i64*
  %ln9g2 = load i64, i64* %ln9g1, !tbaa !5
  %ln9g3 = inttoptr i64 %ln9g2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9g4 = load i64*, i64** %Sp_Var
  %ln9g5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9g3( i64* %Base_Arg, i64* %ln9g4, i64* %Hp_Arg, i64 %ln9g5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.0130111 UTC

%Main_arrayByIndex2_closure_struct = type <{i64, i64, i64, i64, i64}>
@Main_arrayByIndex2_closure$def = internal global %Main_arrayByIndex2_closure_struct<{i64 ptrtoint (i8* @base_GHCziStackziTypes_PushCallStack_con_info to i64), i64 ptrtoint (%Main_arrayByIndex14_closure_struct* @Main_arrayByIndex14_closure$def to i64), i64 add (i64 ptrtoint (%Main_arrayByIndex3_closure_struct* @Main_arrayByIndex3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @base_GHCziStackziTypes_EmptyCallStack_closure to i64),i64 1), i64 0}>
@Main_arrayByIndex2_closure = alias i8, bitcast (%Main_arrayByIndex2_closure_struct* @Main_arrayByIndex2_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.0150086 UTC

%r925_closure_struct = type <{i64, i64}>
@r925_closure$def = internal global %r925_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Czh_con_info to i64), i64 32}>
@r925_closure = internal alias i8, bitcast (%r925_closure_struct* @r925_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.0180019 UTC

%r926_closure_struct = type <{i64, i64}>
@r926_closure$def = internal global %r926_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Czh_con_info to i64), i64 45}>
@r926_closure = internal alias i8, bitcast (%r926_closure_struct* @r926_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.0200014 UTC

%r927_closure_struct = type <{i64, i64}>
@r927_closure$def = internal global %r927_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Czh_con_info to i64), i64 35}>
@r927_closure = internal alias i8, bitcast (%r927_closure_struct* @r927_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.024998 UTC

%r928_closure_struct = type <{i64}>
@r928_closure$def = internal global %r928_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r928_info$def to i64)}>
@r928_closure = internal alias i8, bitcast (%r928_closure_struct* @r928_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.0329791 UTC

@s92F_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92F_info$def to i8*)
define internal ghccc void @s92F_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c9gk:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9gX = load i64*, i64** %Sp_Var
  %ln9gY = getelementptr inbounds i64, i64* %ln9gX, i32 -2
  %ln9gZ = ptrtoint i64* %ln9gY to i64
  %ln9h0 = icmp ult i64 %ln9gZ, %SpLim_Arg
  %ln9h1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9h0, i1 0 )
  br i1 %ln9h1, label %c9gl, label %c9gm
c9gm:
  %ln9h3 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9h2 = load i64*, i64** %Sp_Var
  %ln9h4 = getelementptr inbounds i64, i64* %ln9h2, i32 -2
  store i64 %ln9h3, i64* %ln9h4, !tbaa !2
  %ln9h6 = load i64, i64* %R1_Var
  %ln9h5 = load i64*, i64** %Sp_Var
  %ln9h7 = getelementptr inbounds i64, i64* %ln9h5, i32 -1
  store i64 %ln9h6, i64* %ln9h7, !tbaa !2
  %ln9ha = load i64, i64* %R1_Var
  %ln9hb = add i64 %ln9ha, 16
  %ln9hc = inttoptr i64 %ln9hb to i64*
  %ln9hd = load i64, i64* %ln9hc, !tbaa !4
  store i64 %ln9hd, i64* %R2_Var
  %ln9he = load i64*, i64** %Sp_Var
  %ln9hf = getelementptr inbounds i64, i64* %ln9he, i32 -2
  %ln9hg = ptrtoint i64* %ln9hf to i64
  %ln9hh = inttoptr i64 %ln9hg to i64*
  store i64* %ln9hh, i64** %Sp_Var
  %ln9hi = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r928_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9hj = load i64*, i64** %Sp_Var
  %ln9hk = load i64, i64* %R1_Var
  %ln9hl = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9hi( i64* %Base_Arg, i64* %ln9hj, i64* %Hp_Arg, i64 %ln9hk, i64 %ln9hl, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gl:
  %ln9hm = load i64, i64* %R1_Var
  store i64 %ln9hm, i64* %R1_Var
  %ln9hn = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9ho = bitcast i64* %ln9hn to i64*
  %ln9hp = load i64, i64* %ln9ho, !tbaa !5
  %ln9hq = inttoptr i64 %ln9hp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9hr = load i64*, i64** %Sp_Var
  %ln9hs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9hq( i64* %Base_Arg, i64* %ln9hr, i64* %Hp_Arg, i64 %ln9hs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.0389703 UTC

@s92E_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92E_info$def to i8*)
define internal ghccc void @s92E_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c9gy:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9ht = load i64*, i64** %Sp_Var
  %ln9hu = getelementptr inbounds i64, i64* %ln9ht, i32 -3
  %ln9hv = ptrtoint i64* %ln9hu to i64
  %ln9hw = icmp ult i64 %ln9hv, %SpLim_Arg
  %ln9hx = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9hw, i1 0 )
  br i1 %ln9hx, label %c9gz, label %c9gA
c9gA:
  %ln9hz = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9hy = load i64*, i64** %Sp_Var
  %ln9hA = getelementptr inbounds i64, i64* %ln9hy, i32 -2
  store i64 %ln9hz, i64* %ln9hA, !tbaa !2
  %ln9hC = load i64, i64* %R1_Var
  %ln9hB = load i64*, i64** %Sp_Var
  %ln9hD = getelementptr inbounds i64, i64* %ln9hB, i32 -1
  store i64 %ln9hC, i64* %ln9hD, !tbaa !2
  %ln9hF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9gr_info$def to i64
  %ln9hE = load i64*, i64** %Sp_Var
  %ln9hG = getelementptr inbounds i64, i64* %ln9hE, i32 -3
  store i64 %ln9hF, i64* %ln9hG, !tbaa !2
  %ln9hJ = load i64, i64* %R1_Var
  %ln9hK = add i64 %ln9hJ, 16
  %ln9hL = inttoptr i64 %ln9hK to i64*
  %ln9hM = load i64, i64* %ln9hL, !tbaa !4
  store i64 %ln9hM, i64* %R1_Var
  %ln9hN = load i64*, i64** %Sp_Var
  %ln9hO = getelementptr inbounds i64, i64* %ln9hN, i32 -3
  %ln9hP = ptrtoint i64* %ln9hO to i64
  %ln9hQ = inttoptr i64 %ln9hP to i64*
  store i64* %ln9hQ, i64** %Sp_Var
  %ln9hR = load i64, i64* %R1_Var
  %ln9hS = and i64 %ln9hR, 7
  %ln9hT = icmp ne i64 %ln9hS, 0
  br i1 %ln9hT, label %u9gH, label %c9gs
c9gs:
  %ln9hV = load i64, i64* %R1_Var
  %ln9hW = inttoptr i64 %ln9hV to i64*
  %ln9hX = load i64, i64* %ln9hW, !tbaa !4
  %ln9hY = inttoptr i64 %ln9hX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9hZ = load i64*, i64** %Sp_Var
  %ln9i0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9hY( i64* %Base_Arg, i64* %ln9hZ, i64* %Hp_Arg, i64 %ln9i0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9gH:
  %ln9i1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9gr_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9i2 = load i64*, i64** %Sp_Var
  %ln9i3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9i1( i64* %Base_Arg, i64* %ln9i2, i64* %Hp_Arg, i64 %ln9i3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gz:
  %ln9i4 = load i64, i64* %R1_Var
  store i64 %ln9i4, i64* %R1_Var
  %ln9i5 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9i6 = bitcast i64* %ln9i5 to i64*
  %ln9i7 = load i64, i64* %ln9i6, !tbaa !5
  %ln9i8 = inttoptr i64 %ln9i7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9i9 = load i64*, i64** %Sp_Var
  %ln9ia = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9i8( i64* %Base_Arg, i64* %ln9i9, i64* %Hp_Arg, i64 %ln9ia, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.0439618 UTC

@c9gr_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9gr_info$def to i8*)
define internal ghccc void @c9gr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 30}>
{
c9gr:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9ib = load i64, i64* %R1_Var
  %ln9ic = and i64 %ln9ib, 7
  switch i64 %ln9ic, label %c9gv [i64 1, label %c9gv
                                  i64 2, label %c9gw]
c9gv:
  %ln9id = ptrtoint %r926_closure_struct* @r926_closure$def to i64
  %ln9ie = add i64 %ln9id, 1
  store i64 %ln9ie, i64* %R1_Var
  %ln9if = load i64*, i64** %Sp_Var
  %ln9ig = getelementptr inbounds i64, i64* %ln9if, i32 1
  %ln9ih = ptrtoint i64* %ln9ig to i64
  %ln9ii = inttoptr i64 %ln9ih to i64*
  store i64* %ln9ii, i64** %Sp_Var
  %ln9ij = load i64*, i64** %Sp_Var
  %ln9ik = getelementptr inbounds i64, i64* %ln9ij, i32 0
  %ln9il = bitcast i64* %ln9ik to i64*
  %ln9im = load i64, i64* %ln9il, !tbaa !2
  %ln9in = inttoptr i64 %ln9im to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9io = load i64*, i64** %Sp_Var
  %ln9ip = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9in( i64* %Base_Arg, i64* %ln9io, i64* %Hp_Arg, i64 %ln9ip, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gw:
  %ln9iq = ptrtoint %r927_closure_struct* @r927_closure$def to i64
  %ln9ir = add i64 %ln9iq, 1
  store i64 %ln9ir, i64* %R1_Var
  %ln9is = load i64*, i64** %Sp_Var
  %ln9it = getelementptr inbounds i64, i64* %ln9is, i32 1
  %ln9iu = ptrtoint i64* %ln9it to i64
  %ln9iv = inttoptr i64 %ln9iu to i64*
  store i64* %ln9iv, i64** %Sp_Var
  %ln9iw = load i64*, i64** %Sp_Var
  %ln9ix = getelementptr inbounds i64, i64* %ln9iw, i32 0
  %ln9iy = bitcast i64* %ln9ix to i64*
  %ln9iz = load i64, i64* %ln9iy, !tbaa !2
  %ln9iA = inttoptr i64 %ln9iz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9iB = load i64*, i64** %Sp_Var
  %ln9iC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9iA( i64* %Base_Arg, i64* %ln9iB, i64* %Hp_Arg, i64 %ln9iC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.0489591 UTC

@r928_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r928_info$def to i8*)
define internal ghccc void @r928_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 4294967301, i64 0, i64 14}>
{
c9gM:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9iD = load i64*, i64** %Sp_Var
  %ln9iE = getelementptr inbounds i64, i64* %ln9iD, i32 -1
  %ln9iF = ptrtoint i64* %ln9iE to i64
  %ln9iG = icmp ult i64 %ln9iF, %SpLim_Arg
  %ln9iH = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9iG, i1 0 )
  br i1 %ln9iH, label %c9gN, label %c9gO
c9gO:
  %ln9iJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ga_info$def to i64
  %ln9iI = load i64*, i64** %Sp_Var
  %ln9iK = getelementptr inbounds i64, i64* %ln9iI, i32 -1
  store i64 %ln9iJ, i64* %ln9iK, !tbaa !2
  %ln9iL = load i64, i64* %R2_Var
  store i64 %ln9iL, i64* %R1_Var
  %ln9iM = load i64*, i64** %Sp_Var
  %ln9iN = getelementptr inbounds i64, i64* %ln9iM, i32 -1
  %ln9iO = ptrtoint i64* %ln9iN to i64
  %ln9iP = inttoptr i64 %ln9iO to i64*
  store i64* %ln9iP, i64** %Sp_Var
  %ln9iQ = load i64, i64* %R1_Var
  %ln9iR = and i64 %ln9iQ, 7
  %ln9iS = icmp ne i64 %ln9iR, 0
  br i1 %ln9iS, label %u9gW, label %c9gb
c9gb:
  %ln9iU = load i64, i64* %R1_Var
  %ln9iV = inttoptr i64 %ln9iU to i64*
  %ln9iW = load i64, i64* %ln9iV, !tbaa !4
  %ln9iX = inttoptr i64 %ln9iW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9iY = load i64*, i64** %Sp_Var
  %ln9iZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9iX( i64* %Base_Arg, i64* %ln9iY, i64* %Hp_Arg, i64 %ln9iZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9gW:
  %ln9j0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ga_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9j1 = load i64*, i64** %Sp_Var
  %ln9j2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9j0( i64* %Base_Arg, i64* %ln9j1, i64* %Hp_Arg, i64 %ln9j2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gN:
  %ln9j3 = load i64, i64* %R2_Var
  store i64 %ln9j3, i64* %R2_Var
  %ln9j4 = ptrtoint %r928_closure_struct* @r928_closure$def to i64
  store i64 %ln9j4, i64* %R1_Var
  %ln9j5 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9j6 = bitcast i64* %ln9j5 to i64*
  %ln9j7 = load i64, i64* %ln9j6, !tbaa !5
  %ln9j8 = inttoptr i64 %ln9j7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9j9 = load i64*, i64** %Sp_Var
  %ln9ja = load i64, i64* %R1_Var
  %ln9jb = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9j8( i64* %Base_Arg, i64* %ln9j9, i64* %Hp_Arg, i64 %ln9ja, i64 %ln9jb, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.0549452 UTC

@c9ga_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ga_info$def to i8*)
define internal ghccc void @c9ga_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 30}>
{
c9ga:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls92B = alloca i64, i32 1
  %ls92C = alloca i64, i32 1
  %ln9jc = load i64, i64* %R1_Var
  %ln9jd = and i64 %ln9jc, 7
  switch i64 %ln9jd, label %c9gJ [i64 1, label %c9gJ
                                  i64 2, label %c9gK]
c9gJ:
  %ln9je = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln9jf = add i64 %ln9je, 1
  store i64 %ln9jf, i64* %R1_Var
  %ln9jg = load i64*, i64** %Sp_Var
  %ln9jh = getelementptr inbounds i64, i64* %ln9jg, i32 1
  %ln9ji = ptrtoint i64* %ln9jh to i64
  %ln9jj = inttoptr i64 %ln9ji to i64*
  store i64* %ln9jj, i64** %Sp_Var
  %ln9jk = load i64*, i64** %Sp_Var
  %ln9jl = getelementptr inbounds i64, i64* %ln9jk, i32 0
  %ln9jm = bitcast i64* %ln9jl to i64*
  %ln9jn = load i64, i64* %ln9jm, !tbaa !2
  %ln9jo = inttoptr i64 %ln9jn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9jp = load i64*, i64** %Sp_Var
  %ln9jq = load i64*, i64** %Hp_Var
  %ln9jr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9jo( i64* %Base_Arg, i64* %ln9jp, i64* %ln9jq, i64 %ln9jr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gK:
  %ln9js = load i64*, i64** %Hp_Var
  %ln9jt = getelementptr inbounds i64, i64* %ln9js, i32 12
  %ln9ju = ptrtoint i64* %ln9jt to i64
  %ln9jv = inttoptr i64 %ln9ju to i64*
  store i64* %ln9jv, i64** %Hp_Var
  %ln9jw = load i64*, i64** %Hp_Var
  %ln9jx = ptrtoint i64* %ln9jw to i64
  %ln9jy = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9jz = bitcast i64* %ln9jy to i64*
  %ln9jA = load i64, i64* %ln9jz, !tbaa !5
  %ln9jB = icmp ugt i64 %ln9jx, %ln9jA
  %ln9jC = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9jB, i1 0 )
  br i1 %ln9jC, label %c9gV, label %c9gU
c9gU:
  %ln9jF = load i64, i64* %R1_Var
  %ln9jG = add i64 %ln9jF, 6
  %ln9jH = inttoptr i64 %ln9jG to i64*
  %ln9jI = load i64, i64* %ln9jH, !tbaa !4
  store i64 %ln9jI, i64* %ls92B
  %ln9jL = load i64, i64* %R1_Var
  %ln9jM = add i64 %ln9jL, 14
  %ln9jN = inttoptr i64 %ln9jM to i64*
  %ln9jO = load i64, i64* %ln9jN, !tbaa !4
  store i64 %ln9jO, i64* %ls92C
  %ln9jQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92F_info$def to i64
  %ln9jP = load i64*, i64** %Hp_Var
  %ln9jR = getelementptr inbounds i64, i64* %ln9jP, i32 -11
  store i64 %ln9jQ, i64* %ln9jR, !tbaa !3
  %ln9jT = load i64, i64* %ls92C
  %ln9jS = load i64*, i64** %Hp_Var
  %ln9jU = getelementptr inbounds i64, i64* %ln9jS, i32 -9
  store i64 %ln9jT, i64* %ln9jU, !tbaa !3
  %ln9jW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92E_info$def to i64
  %ln9jV = load i64*, i64** %Hp_Var
  %ln9jX = getelementptr inbounds i64, i64* %ln9jV, i32 -8
  store i64 %ln9jW, i64* %ln9jX, !tbaa !3
  %ln9jZ = load i64, i64* %ls92B
  %ln9jY = load i64*, i64** %Hp_Var
  %ln9k0 = getelementptr inbounds i64, i64* %ln9jY, i32 -6
  store i64 %ln9jZ, i64* %ln9k0, !tbaa !3
  %ln9k2 = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln9k1 = load i64*, i64** %Hp_Var
  %ln9k3 = getelementptr inbounds i64, i64* %ln9k1, i32 -5
  store i64 %ln9k2, i64* %ln9k3, !tbaa !3
  %ln9k5 = load i64*, i64** %Hp_Var
  %ln9k6 = getelementptr inbounds i64, i64* %ln9k5, i32 -8
  %ln9k7 = ptrtoint i64* %ln9k6 to i64
  %ln9k4 = load i64*, i64** %Hp_Var
  %ln9k8 = getelementptr inbounds i64, i64* %ln9k4, i32 -4
  store i64 %ln9k7, i64* %ln9k8, !tbaa !3
  %ln9ka = load i64*, i64** %Hp_Var
  %ln9kb = getelementptr inbounds i64, i64* %ln9ka, i32 -11
  %ln9kc = ptrtoint i64* %ln9kb to i64
  %ln9k9 = load i64*, i64** %Hp_Var
  %ln9kd = getelementptr inbounds i64, i64* %ln9k9, i32 -3
  store i64 %ln9kc, i64* %ln9kd, !tbaa !3
  %ln9kf = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln9ke = load i64*, i64** %Hp_Var
  %ln9kg = getelementptr inbounds i64, i64* %ln9ke, i32 -2
  store i64 %ln9kf, i64* %ln9kg, !tbaa !3
  %ln9ki = ptrtoint %r925_closure_struct* @r925_closure$def to i64
  %ln9kj = add i64 %ln9ki, 1
  %ln9kh = load i64*, i64** %Hp_Var
  %ln9kk = getelementptr inbounds i64, i64* %ln9kh, i32 -1
  store i64 %ln9kj, i64* %ln9kk, !tbaa !3
  %ln9kn = load i64*, i64** %Hp_Var
  %ln9ko = ptrtoint i64* %ln9kn to i64
  %ln9kp = add i64 %ln9ko, -38
  %ln9kl = load i64*, i64** %Hp_Var
  %ln9kq = getelementptr inbounds i64, i64* %ln9kl, i32 0
  store i64 %ln9kp, i64* %ln9kq, !tbaa !3
  %ln9ks = load i64*, i64** %Hp_Var
  %ln9kt = ptrtoint i64* %ln9ks to i64
  %ln9ku = add i64 %ln9kt, -14
  store i64 %ln9ku, i64* %R1_Var
  %ln9kv = load i64*, i64** %Sp_Var
  %ln9kw = getelementptr inbounds i64, i64* %ln9kv, i32 1
  %ln9kx = ptrtoint i64* %ln9kw to i64
  %ln9ky = inttoptr i64 %ln9kx to i64*
  store i64* %ln9ky, i64** %Sp_Var
  %ln9kz = load i64*, i64** %Sp_Var
  %ln9kA = getelementptr inbounds i64, i64* %ln9kz, i32 0
  %ln9kB = bitcast i64* %ln9kA to i64*
  %ln9kC = load i64, i64* %ln9kB, !tbaa !2
  %ln9kD = inttoptr i64 %ln9kC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9kE = load i64*, i64** %Sp_Var
  %ln9kF = load i64*, i64** %Hp_Var
  %ln9kG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9kD( i64* %Base_Arg, i64* %ln9kE, i64* %ln9kF, i64 %ln9kG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gV:
  %ln9kH = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 96, i64* %ln9kH, !tbaa !5
  %ln9kI = load i64, i64* %R1_Var
  store i64 %ln9kI, i64* %R1_Var
  %ln9kJ = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9kK = load i64*, i64** %Sp_Var
  %ln9kL = load i64*, i64** %Hp_Var
  %ln9kM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9kJ( i64* %Base_Arg, i64* %ln9kK, i64* %ln9kL, i64 %ln9kM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.0609409 UTC

%r929_bytes_struct = type <{[2 x i8]}>
@r929_bytes$def = internal constant %r929_bytes_struct<{[2 x i8] [i8 10, i8 0]}>, align 1
@r929_bytes = internal alias i8, bitcast (%r929_bytes_struct* @r929_bytes$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.0659261 UTC

%Main_viewGameStatezuf_closure_struct = type <{i64}>
@Main_viewGameStatezuf_closure$def = internal global %Main_viewGameStatezuf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameStatezuf_info$def to i64)}>
@Main_viewGameStatezuf_closure = alias i8, bitcast (%Main_viewGameStatezuf_closure_struct* @Main_viewGameStatezuf_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.0689233 UTC

@s92M_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92M_info$def to i8*)
define internal ghccc void @s92M_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c9l5:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9lv = load i64*, i64** %Sp_Var
  %ln9lw = getelementptr inbounds i64, i64* %ln9lv, i32 -2
  %ln9lx = ptrtoint i64* %ln9lw to i64
  %ln9ly = icmp ult i64 %ln9lx, %SpLim_Arg
  %ln9lz = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9ly, i1 0 )
  br i1 %ln9lz, label %c9l6, label %c9l7
c9l7:
  %ln9lB = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9lA = load i64*, i64** %Sp_Var
  %ln9lC = getelementptr inbounds i64, i64* %ln9lA, i32 -2
  store i64 %ln9lB, i64* %ln9lC, !tbaa !2
  %ln9lE = load i64, i64* %R1_Var
  %ln9lD = load i64*, i64** %Sp_Var
  %ln9lF = getelementptr inbounds i64, i64* %ln9lD, i32 -1
  store i64 %ln9lE, i64* %ln9lF, !tbaa !2
  %ln9lI = load i64, i64* %R1_Var
  %ln9lJ = add i64 %ln9lI, 16
  %ln9lK = inttoptr i64 %ln9lJ to i64*
  %ln9lL = load i64, i64* %ln9lK, !tbaa !4
  store i64 %ln9lL, i64* %R2_Var
  %ln9lM = load i64*, i64** %Sp_Var
  %ln9lN = getelementptr inbounds i64, i64* %ln9lM, i32 -2
  %ln9lO = ptrtoint i64* %ln9lN to i64
  %ln9lP = inttoptr i64 %ln9lO to i64*
  store i64* %ln9lP, i64** %Sp_Var
  %ln9lQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameStatezuf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lR = load i64*, i64** %Sp_Var
  %ln9lS = load i64, i64* %R1_Var
  %ln9lT = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lQ( i64* %Base_Arg, i64* %ln9lR, i64* %Hp_Arg, i64 %ln9lS, i64 %ln9lT, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9l6:
  %ln9lU = load i64, i64* %R1_Var
  store i64 %ln9lU, i64* %R1_Var
  %ln9lV = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9lW = bitcast i64* %ln9lV to i64*
  %ln9lX = load i64, i64* %ln9lW, !tbaa !5
  %ln9lY = inttoptr i64 %ln9lX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lZ = load i64*, i64** %Sp_Var
  %ln9m0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lY( i64* %Base_Arg, i64* %ln9lZ, i64* %Hp_Arg, i64 %ln9m0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.0749184 UTC

@s92N_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92N_info$def to i8*)
define internal ghccc void @s92N_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 16}>
{
c9l8:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls92K = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9m1 = load i64*, i64** %Hp_Var
  %ln9m2 = getelementptr inbounds i64, i64* %ln9m1, i32 3
  %ln9m3 = ptrtoint i64* %ln9m2 to i64
  %ln9m4 = inttoptr i64 %ln9m3 to i64*
  store i64* %ln9m4, i64** %Hp_Var
  %ln9m5 = load i64*, i64** %Hp_Var
  %ln9m6 = ptrtoint i64* %ln9m5 to i64
  %ln9m7 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9m8 = bitcast i64* %ln9m7 to i64*
  %ln9m9 = load i64, i64* %ln9m8, !tbaa !5
  %ln9ma = icmp ugt i64 %ln9m6, %ln9m9
  %ln9mb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9ma, i1 0 )
  br i1 %ln9mb, label %c9lc, label %c9lb
c9lb:
  %ln9me = load i64, i64* %R1_Var
  %ln9mf = add i64 %ln9me, 16
  %ln9mg = inttoptr i64 %ln9mf to i64*
  %ln9mh = load i64, i64* %ln9mg, !tbaa !4
  store i64 %ln9mh, i64* %ls92K
  %ln9mj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92M_info$def to i64
  %ln9mi = load i64*, i64** %Hp_Var
  %ln9mk = getelementptr inbounds i64, i64* %ln9mi, i32 -2
  store i64 %ln9mj, i64* %ln9mk, !tbaa !3
  %ln9mm = load i64, i64* %ls92K
  %ln9ml = load i64*, i64** %Hp_Var
  %ln9mn = getelementptr inbounds i64, i64* %ln9ml, i32 0
  store i64 %ln9mm, i64* %ln9mn, !tbaa !3
  %ln9mo = load i64*, i64** %Hp_Var
  %ln9mp = getelementptr inbounds i64, i64* %ln9mo, i32 -2
  %ln9mq = ptrtoint i64* %ln9mp to i64
  store i64 %ln9mq, i64* %R3_Var
  %ln9mr = ptrtoint %r929_bytes_struct* @r929_bytes$def to i64
  store i64 %ln9mr, i64* %R2_Var
  %ln9ms = bitcast i8* @ghczmprim_GHCziCString_unpackAppendCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9mt = load i64*, i64** %Hp_Var
  %ln9mu = load i64, i64* %R1_Var
  %ln9mv = load i64, i64* %R2_Var
  %ln9mw = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ms( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9mt, i64 %ln9mu, i64 %ln9mv, i64 %ln9mw, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9lc:
  %ln9mx = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9mx, !tbaa !5
  %ln9my = load i64, i64* %R1_Var
  store i64 %ln9my, i64* %R1_Var
  %ln9mz = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9mA = bitcast i64* %ln9mz to i64*
  %ln9mB = load i64, i64* %ln9mA, !tbaa !5
  %ln9mC = inttoptr i64 %ln9mB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9mD = load i64*, i64** %Hp_Var
  %ln9mE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9mC( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9mD, i64 %ln9mE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.0809115 UTC

@Main_viewGameStatezuf_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameStatezuf_info$def to i8*)
define ghccc void @Main_viewGameStatezuf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 4294967301, i64 0, i64 14}>
{
c9lh:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9mF = load i64*, i64** %Sp_Var
  %ln9mG = getelementptr inbounds i64, i64* %ln9mF, i32 -2
  %ln9mH = ptrtoint i64* %ln9mG to i64
  %ln9mI = icmp ult i64 %ln9mH, %SpLim_Arg
  %ln9mJ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9mI, i1 0 )
  br i1 %ln9mJ, label %c9li, label %c9lj
c9lj:
  %ln9mL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9kR_info$def to i64
  %ln9mK = load i64*, i64** %Sp_Var
  %ln9mM = getelementptr inbounds i64, i64* %ln9mK, i32 -1
  store i64 %ln9mL, i64* %ln9mM, !tbaa !2
  %ln9mN = load i64, i64* %R2_Var
  store i64 %ln9mN, i64* %R1_Var
  %ln9mO = load i64*, i64** %Sp_Var
  %ln9mP = getelementptr inbounds i64, i64* %ln9mO, i32 -1
  %ln9mQ = ptrtoint i64* %ln9mP to i64
  %ln9mR = inttoptr i64 %ln9mQ to i64*
  store i64* %ln9mR, i64** %Sp_Var
  %ln9mS = load i64, i64* %R1_Var
  %ln9mT = and i64 %ln9mS, 7
  %ln9mU = icmp ne i64 %ln9mT, 0
  br i1 %ln9mU, label %u9lu, label %c9kS
c9kS:
  %ln9mW = load i64, i64* %R1_Var
  %ln9mX = inttoptr i64 %ln9mW to i64*
  %ln9mY = load i64, i64* %ln9mX, !tbaa !4
  %ln9mZ = inttoptr i64 %ln9mY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9n0 = load i64*, i64** %Sp_Var
  %ln9n1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9mZ( i64* %Base_Arg, i64* %ln9n0, i64* %Hp_Arg, i64 %ln9n1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9lu:
  %ln9n2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9kR_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9n3 = load i64*, i64** %Sp_Var
  %ln9n4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9n2( i64* %Base_Arg, i64* %ln9n3, i64* %Hp_Arg, i64 %ln9n4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9li:
  %ln9n5 = load i64, i64* %R2_Var
  store i64 %ln9n5, i64* %R2_Var
  %ln9n6 = ptrtoint %Main_viewGameStatezuf_closure_struct* @Main_viewGameStatezuf_closure$def to i64
  store i64 %ln9n6, i64* %R1_Var
  %ln9n7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9n8 = bitcast i64* %ln9n7 to i64*
  %ln9n9 = load i64, i64* %ln9n8, !tbaa !5
  %ln9na = inttoptr i64 %ln9n9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9nb = load i64*, i64** %Sp_Var
  %ln9nc = load i64, i64* %R1_Var
  %ln9nd = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9na( i64* %Base_Arg, i64* %ln9nb, i64* %Hp_Arg, i64 %ln9nc, i64 %ln9nd, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.0888971 UTC

@c9kR_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9kR_info$def to i8*)
define internal ghccc void @c9kR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 30}>
{
c9kR:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls92J = alloca i64, i32 1
  %ls92K = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9ne = load i64, i64* %R1_Var
  %ln9nf = and i64 %ln9ne, 7
  switch i64 %ln9nf, label %c9le [i64 1, label %c9le
                                  i64 2, label %c9lf]
c9le:
  %ln9ng = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln9nh = add i64 %ln9ng, 1
  store i64 %ln9nh, i64* %R1_Var
  %ln9ni = load i64*, i64** %Sp_Var
  %ln9nj = getelementptr inbounds i64, i64* %ln9ni, i32 1
  %ln9nk = ptrtoint i64* %ln9nj to i64
  %ln9nl = inttoptr i64 %ln9nk to i64*
  store i64* %ln9nl, i64** %Sp_Var
  %ln9nm = load i64*, i64** %Sp_Var
  %ln9nn = getelementptr inbounds i64, i64* %ln9nm, i32 0
  %ln9no = bitcast i64* %ln9nn to i64*
  %ln9np = load i64, i64* %ln9no, !tbaa !2
  %ln9nq = inttoptr i64 %ln9np to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9nr = load i64*, i64** %Sp_Var
  %ln9ns = load i64*, i64** %Hp_Var
  %ln9nt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9nq( i64* %Base_Arg, i64* %ln9nr, i64* %ln9ns, i64 %ln9nt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9lf:
  %ln9nu = load i64*, i64** %Hp_Var
  %ln9nv = getelementptr inbounds i64, i64* %ln9nu, i32 3
  %ln9nw = ptrtoint i64* %ln9nv to i64
  %ln9nx = inttoptr i64 %ln9nw to i64*
  store i64* %ln9nx, i64** %Hp_Var
  %ln9ny = load i64*, i64** %Hp_Var
  %ln9nz = ptrtoint i64* %ln9ny to i64
  %ln9nA = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9nB = bitcast i64* %ln9nA to i64*
  %ln9nC = load i64, i64* %ln9nB, !tbaa !5
  %ln9nD = icmp ugt i64 %ln9nz, %ln9nC
  %ln9nE = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9nD, i1 0 )
  br i1 %ln9nE, label %c9lp, label %c9lo
c9lo:
  %ln9nH = load i64, i64* %R1_Var
  %ln9nI = add i64 %ln9nH, 6
  %ln9nJ = inttoptr i64 %ln9nI to i64*
  %ln9nK = load i64, i64* %ln9nJ, !tbaa !4
  store i64 %ln9nK, i64* %ls92J
  %ln9nN = load i64, i64* %R1_Var
  %ln9nO = add i64 %ln9nN, 14
  %ln9nP = inttoptr i64 %ln9nO to i64*
  %ln9nQ = load i64, i64* %ln9nP, !tbaa !4
  store i64 %ln9nQ, i64* %ls92K
  %ln9nS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92N_info$def to i64
  %ln9nR = load i64*, i64** %Hp_Var
  %ln9nT = getelementptr inbounds i64, i64* %ln9nR, i32 -2
  store i64 %ln9nS, i64* %ln9nT, !tbaa !3
  %ln9nV = load i64, i64* %ls92K
  %ln9nU = load i64*, i64** %Hp_Var
  %ln9nW = getelementptr inbounds i64, i64* %ln9nU, i32 0
  store i64 %ln9nV, i64* %ln9nW, !tbaa !3
  %ln9nY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9lm_info$def to i64
  %ln9nX = load i64*, i64** %Sp_Var
  %ln9nZ = getelementptr inbounds i64, i64* %ln9nX, i32 -1
  store i64 %ln9nY, i64* %ln9nZ, !tbaa !2
  %ln9o0 = load i64, i64* %ls92J
  store i64 %ln9o0, i64* %R2_Var
  %ln9o2 = load i64*, i64** %Hp_Var
  %ln9o3 = getelementptr inbounds i64, i64* %ln9o2, i32 -2
  %ln9o4 = ptrtoint i64* %ln9o3 to i64
  %ln9o1 = load i64*, i64** %Sp_Var
  %ln9o5 = getelementptr inbounds i64, i64* %ln9o1, i32 0
  store i64 %ln9o4, i64* %ln9o5, !tbaa !2
  %ln9o6 = load i64*, i64** %Sp_Var
  %ln9o7 = getelementptr inbounds i64, i64* %ln9o6, i32 -1
  %ln9o8 = ptrtoint i64* %ln9o7 to i64
  %ln9o9 = inttoptr i64 %ln9o8 to i64*
  store i64* %ln9o9, i64** %Sp_Var
  %ln9oa = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r928_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ob = load i64*, i64** %Sp_Var
  %ln9oc = load i64*, i64** %Hp_Var
  %ln9od = load i64, i64* %R1_Var
  %ln9oe = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9oa( i64* %Base_Arg, i64* %ln9ob, i64* %ln9oc, i64 %ln9od, i64 %ln9oe, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9lp:
  %ln9of = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9of, !tbaa !5
  %ln9og = load i64, i64* %R1_Var
  store i64 %ln9og, i64* %R1_Var
  %ln9oh = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9oi = load i64*, i64** %Sp_Var
  %ln9oj = load i64*, i64** %Hp_Var
  %ln9ok = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9oh( i64* %Base_Arg, i64* %ln9oi, i64* %ln9oj, i64 %ln9ok, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.0948844 UTC

@c9lm_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9lm_info$def to i8*)
define internal ghccc void @c9lm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 30}>
{
c9lm:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9ol = load i64*, i64** %Sp_Var
  %ln9om = getelementptr inbounds i64, i64* %ln9ol, i32 1
  %ln9on = bitcast i64* %ln9om to i64*
  %ln9oo = load i64, i64* %ln9on, !tbaa !2
  store i64 %ln9oo, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln9op = load i64*, i64** %Sp_Var
  %ln9oq = getelementptr inbounds i64, i64* %ln9op, i32 2
  %ln9or = ptrtoint i64* %ln9oq to i64
  %ln9os = inttoptr i64 %ln9or to i64*
  store i64* %ln9os, i64** %Sp_Var
  %ln9ot = bitcast i8* @base_GHCziBase_zpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ou = load i64*, i64** %Sp_Var
  %ln9ov = load i64, i64* %R2_Var
  %ln9ow = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ot( i64* %Base_Arg, i64* %ln9ou, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9ov, i64 %ln9ow, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.0988833 UTC

%Main_arrayByIndex16_closure_struct = type <{i64, i64, i64, i64}>
@Main_arrayByIndex16_closure$def = internal global %Main_arrayByIndex16_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex16_info$def to i64), i64 0, i64 0, i64 0}>
@Main_arrayByIndex16_closure = alias i8, bitcast (%Main_arrayByIndex16_closure_struct* @Main_arrayByIndex16_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.103871 UTC

@Main_arrayByIndex16_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex16_info$def to i8*)
define ghccc void @Main_arrayByIndex16_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 21}>
{
c9oD:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %lc9oA = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9oG = load i64*, i64** %Sp_Var
  %ln9oH = getelementptr inbounds i64, i64* %ln9oG, i32 -2
  %ln9oI = ptrtoint i64* %ln9oH to i64
  %ln9oJ = icmp ult i64 %ln9oI, %SpLim_Arg
  %ln9oK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9oJ, i1 0 )
  br i1 %ln9oK, label %c9oE, label %c9oF
c9oF:
  %ln9oL = ptrtoint i64* %Base_Arg to i64
  %ln9oM = inttoptr i64 %ln9oL to i8*
  %ln9oN = load i64, i64* %R1_Var
  %ln9oO = inttoptr i64 %ln9oN to i8*
  %ln9oP = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  %ln9oQ = call ccc i8* (i8*, i8*) %ln9oP( i8* %ln9oM, i8* %ln9oO ) nounwind
  %ln9oR = ptrtoint i8* %ln9oQ to i64
  store i64 %ln9oR, i64* %lc9oA
  %ln9oS = load i64, i64* %lc9oA
  %ln9oT = icmp eq i64 %ln9oS, 0
  br i1 %ln9oT, label %c9oC, label %c9oB
c9oB:
  %ln9oV = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9oU = load i64*, i64** %Sp_Var
  %ln9oW = getelementptr inbounds i64, i64* %ln9oU, i32 -2
  store i64 %ln9oV, i64* %ln9oW, !tbaa !2
  %ln9oY = load i64, i64* %lc9oA
  %ln9oX = load i64*, i64** %Sp_Var
  %ln9oZ = getelementptr inbounds i64, i64* %ln9oX, i32 -1
  store i64 %ln9oY, i64* %ln9oZ, !tbaa !2
  %ln9p0 = ptrtoint %Main_arrayByIndex17_bytes_struct* @Main_arrayByIndex17_bytes$def to i64
  store i64 %ln9p0, i64* %R2_Var
  %ln9p1 = load i64*, i64** %Sp_Var
  %ln9p2 = getelementptr inbounds i64, i64* %ln9p1, i32 -2
  %ln9p3 = ptrtoint i64* %ln9p2 to i64
  %ln9p4 = inttoptr i64 %ln9p3 to i64*
  store i64* %ln9p4, i64** %Sp_Var
  %ln9p5 = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9p6 = load i64*, i64** %Sp_Var
  %ln9p7 = load i64, i64* %R1_Var
  %ln9p8 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9p5( i64* %Base_Arg, i64* %ln9p6, i64* %Hp_Arg, i64 %ln9p7, i64 %ln9p8, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9oC:
  %ln9pa = load i64, i64* %R1_Var
  %ln9pb = inttoptr i64 %ln9pa to i64*
  %ln9pc = load i64, i64* %ln9pb, !tbaa !4
  %ln9pd = inttoptr i64 %ln9pc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pe = load i64*, i64** %Sp_Var
  %ln9pf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pd( i64* %Base_Arg, i64* %ln9pe, i64* %Hp_Arg, i64 %ln9pf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9oE:
  %ln9pg = load i64, i64* %R1_Var
  store i64 %ln9pg, i64* %R1_Var
  %ln9ph = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9pi = bitcast i64* %ln9ph to i64*
  %ln9pj = load i64, i64* %ln9pi, !tbaa !5
  %ln9pk = inttoptr i64 %ln9pj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pl = load i64*, i64** %Sp_Var
  %ln9pm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pk( i64* %Base_Arg, i64* %ln9pl, i64* %Hp_Arg, i64 %ln9pm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.1118584 UTC

%Main_viewGameState3_closure_struct = type <{i64, i64}>
@Main_viewGameState3_closure$def = internal global %Main_viewGameState3_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState3_info$def to i64), i64 0}>
@Main_viewGameState3_closure = alias i8, bitcast (%Main_viewGameState3_closure_struct* @Main_viewGameState3_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.1158547 UTC

@s92W_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92W_info$def to i8*)
define internal ghccc void @s92W_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92W_info$def to i64)),i64 8), i64 4294967296, i64 4294967313}>
{
c9pH:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9q6 = load i64*, i64** %Sp_Var
  %ln9q7 = getelementptr inbounds i64, i64* %ln9q6, i32 -3
  %ln9q8 = ptrtoint i64* %ln9q7 to i64
  %ln9q9 = icmp ult i64 %ln9q8, %SpLim_Arg
  %ln9qa = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9q9, i1 0 )
  br i1 %ln9qa, label %c9pI, label %c9pJ
c9pJ:
  %ln9qc = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9qb = load i64*, i64** %Sp_Var
  %ln9qd = getelementptr inbounds i64, i64* %ln9qb, i32 -2
  store i64 %ln9qc, i64* %ln9qd, !tbaa !2
  %ln9qf = load i64, i64* %R1_Var
  %ln9qe = load i64*, i64** %Sp_Var
  %ln9qg = getelementptr inbounds i64, i64* %ln9qe, i32 -1
  store i64 %ln9qf, i64* %ln9qg, !tbaa !2
  %ln9qi = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9pF_info$def to i64
  %ln9qh = load i64*, i64** %Sp_Var
  %ln9qj = getelementptr inbounds i64, i64* %ln9qh, i32 -3
  store i64 %ln9qi, i64* %ln9qj, !tbaa !2
  %ln9qk = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln9ql = add i64 %ln9qk, 1
  store i64 %ln9ql, i64* %R4_Var
  %ln9qo = load i64, i64* %R1_Var
  %ln9qp = add i64 %ln9qo, 16
  %ln9qq = inttoptr i64 %ln9qp to i64*
  %ln9qr = load i64, i64* %ln9qq, !tbaa !4
  store i64 %ln9qr, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln9qs = load i64*, i64** %Sp_Var
  %ln9qt = getelementptr inbounds i64, i64* %ln9qs, i32 -3
  %ln9qu = ptrtoint i64* %ln9qt to i64
  %ln9qv = inttoptr i64 %ln9qu to i64*
  store i64* %ln9qv, i64** %Sp_Var
  %ln9qw = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qx = load i64*, i64** %Sp_Var
  %ln9qy = load i64, i64* %R1_Var
  %ln9qz = load i64, i64* %R2_Var
  %ln9qA = load i64, i64* %R3_Var
  %ln9qB = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qw( i64* %Base_Arg, i64* %ln9qx, i64* %Hp_Arg, i64 %ln9qy, i64 %ln9qz, i64 %ln9qA, i64 %ln9qB, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9pI:
  %ln9qC = load i64, i64* %R1_Var
  store i64 %ln9qC, i64* %R1_Var
  %ln9qD = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9qE = bitcast i64* %ln9qD to i64*
  %ln9qF = load i64, i64* %ln9qE, !tbaa !5
  %ln9qG = inttoptr i64 %ln9qF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qH = load i64*, i64** %Sp_Var
  %ln9qI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qG( i64* %Base_Arg, i64* %ln9qH, i64* %Hp_Arg, i64 %ln9qI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.1238422 UTC

@c9pF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9pF_info$def to i8*)
define internal ghccc void @c9pF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9pF_info$def to i64)),i64 8), i64 0, i64 4294967326}>
{
c9pF:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9qJ = load i64, i64* %R2_Var
  store i64 %ln9qJ, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  %ln9qK = ptrtoint %Main_arrayByIndex16_closure_struct* @Main_arrayByIndex16_closure$def to i64
  store i64 %ln9qK, i64* %R2_Var
  %ln9qL = load i64*, i64** %Sp_Var
  %ln9qM = getelementptr inbounds i64, i64* %ln9qL, i32 1
  %ln9qN = ptrtoint i64* %ln9qM to i64
  %ln9qO = inttoptr i64 %ln9qN to i64*
  store i64* %ln9qO, i64** %Sp_Var
  %ln9qP = bitcast i8* @base_GHCziBase_zpzpzuzdszpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qQ = load i64*, i64** %Sp_Var
  %ln9qR = load i64, i64* %R2_Var
  %ln9qS = load i64, i64* %R3_Var
  %ln9qT = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qP( i64* %Base_Arg, i64* %ln9qQ, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9qR, i64 %ln9qS, i64 %ln9qT, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.1398146 UTC

@s92X_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92X_info$def to i8*)
define internal ghccc void @s92X_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92X_info$def to i64)),i64 8), i64 4294967296, i64 4294967313}>
{
c9pL:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls92O = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9qU = load i64*, i64** %Hp_Var
  %ln9qV = getelementptr inbounds i64, i64* %ln9qU, i32 3
  %ln9qW = ptrtoint i64* %ln9qV to i64
  %ln9qX = inttoptr i64 %ln9qW to i64*
  store i64* %ln9qX, i64** %Hp_Var
  %ln9qY = load i64*, i64** %Hp_Var
  %ln9qZ = ptrtoint i64* %ln9qY to i64
  %ln9r0 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9r1 = bitcast i64* %ln9r0 to i64*
  %ln9r2 = load i64, i64* %ln9r1, !tbaa !5
  %ln9r3 = icmp ugt i64 %ln9qZ, %ln9r2
  %ln9r4 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9r3, i1 0 )
  br i1 %ln9r4, label %c9pP, label %c9pO
c9pO:
  %ln9r7 = load i64, i64* %R1_Var
  %ln9r8 = add i64 %ln9r7, 16
  %ln9r9 = inttoptr i64 %ln9r8 to i64*
  %ln9ra = load i64, i64* %ln9r9, !tbaa !4
  store i64 %ln9ra, i64* %ls92O
  %ln9rc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92W_info$def to i64
  %ln9rb = load i64*, i64** %Hp_Var
  %ln9rd = getelementptr inbounds i64, i64* %ln9rb, i32 -2
  store i64 %ln9rc, i64* %ln9rd, !tbaa !3
  %ln9rf = load i64, i64* %ls92O
  %ln9re = load i64*, i64** %Hp_Var
  %ln9rg = getelementptr inbounds i64, i64* %ln9re, i32 0
  store i64 %ln9rf, i64* %ln9rg, !tbaa !3
  %ln9rh = load i64*, i64** %Hp_Var
  %ln9ri = getelementptr inbounds i64, i64* %ln9rh, i32 -2
  %ln9rj = ptrtoint i64* %ln9ri to i64
  store i64 %ln9rj, i64* %R3_Var
  %ln9rk = ptrtoint %Main_arrayByIndex18_bytes_struct* @Main_arrayByIndex18_bytes$def to i64
  store i64 %ln9rk, i64* %R2_Var
  %ln9rl = bitcast i8* @ghczmprim_GHCziCString_unpackAppendCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rm = load i64*, i64** %Hp_Var
  %ln9rn = load i64, i64* %R1_Var
  %ln9ro = load i64, i64* %R2_Var
  %ln9rp = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rl( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9rm, i64 %ln9rn, i64 %ln9ro, i64 %ln9rp, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9pP:
  %ln9rq = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9rq, !tbaa !5
  %ln9rr = load i64, i64* %R1_Var
  store i64 %ln9rr, i64* %R1_Var
  %ln9rs = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9rt = bitcast i64* %ln9rs to i64*
  %ln9ru = load i64, i64* %ln9rt, !tbaa !5
  %ln9rv = inttoptr i64 %ln9ru to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rw = load i64*, i64** %Hp_Var
  %ln9rx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rv( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9rw, i64 %ln9rx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.1458058 UTC

@s92Y_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92Y_info$def to i8*)
define internal ghccc void @s92Y_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92Y_info$def to i64)),i64 8), i64 8589934592, i64 4294967316}>
{
c9pQ:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9ry = load i64*, i64** %Sp_Var
  %ln9rz = getelementptr inbounds i64, i64* %ln9ry, i32 -4
  %ln9rA = ptrtoint i64* %ln9rz to i64
  %ln9rB = icmp ult i64 %ln9rA, %SpLim_Arg
  %ln9rC = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9rB, i1 0 )
  br i1 %ln9rC, label %c9pR, label %c9pS
c9pS:
  %ln9rE = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9rD = load i64*, i64** %Sp_Var
  %ln9rF = getelementptr inbounds i64, i64* %ln9rD, i32 -2
  store i64 %ln9rE, i64* %ln9rF, !tbaa !2
  %ln9rH = load i64, i64* %R1_Var
  %ln9rG = load i64*, i64** %Sp_Var
  %ln9rI = getelementptr inbounds i64, i64* %ln9rG, i32 -1
  store i64 %ln9rH, i64* %ln9rI, !tbaa !2
  %ln9rK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9pv_info$def to i64
  %ln9rJ = load i64*, i64** %Sp_Var
  %ln9rL = getelementptr inbounds i64, i64* %ln9rJ, i32 -4
  store i64 %ln9rK, i64* %ln9rL, !tbaa !2
  %ln9rM = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln9rN = add i64 %ln9rM, 1
  store i64 %ln9rN, i64* %R4_Var
  %ln9rQ = load i64, i64* %R1_Var
  %ln9rR = add i64 %ln9rQ, 24
  %ln9rS = inttoptr i64 %ln9rR to i64*
  %ln9rT = load i64, i64* %ln9rS, !tbaa !4
  store i64 %ln9rT, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln9rX = load i64, i64* %R1_Var
  %ln9rY = add i64 %ln9rX, 16
  %ln9rZ = inttoptr i64 %ln9rY to i64*
  %ln9s0 = load i64, i64* %ln9rZ, !tbaa !4
  %ln9rU = load i64*, i64** %Sp_Var
  %ln9s1 = getelementptr inbounds i64, i64* %ln9rU, i32 -3
  store i64 %ln9s0, i64* %ln9s1, !tbaa !2
  %ln9s2 = load i64*, i64** %Sp_Var
  %ln9s3 = getelementptr inbounds i64, i64* %ln9s2, i32 -4
  %ln9s4 = ptrtoint i64* %ln9s3 to i64
  %ln9s5 = inttoptr i64 %ln9s4 to i64*
  store i64* %ln9s5, i64** %Sp_Var
  %ln9s6 = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9s7 = load i64*, i64** %Sp_Var
  %ln9s8 = load i64, i64* %R1_Var
  %ln9s9 = load i64, i64* %R2_Var
  %ln9sa = load i64, i64* %R3_Var
  %ln9sb = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9s6( i64* %Base_Arg, i64* %ln9s7, i64* %Hp_Arg, i64 %ln9s8, i64 %ln9s9, i64 %ln9sa, i64 %ln9sb, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9pR:
  %ln9sc = load i64, i64* %R1_Var
  store i64 %ln9sc, i64* %R1_Var
  %ln9sd = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9se = bitcast i64* %ln9sd to i64*
  %ln9sf = load i64, i64* %ln9se, !tbaa !5
  %ln9sg = inttoptr i64 %ln9sf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9sh = load i64*, i64** %Sp_Var
  %ln9si = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9sg( i64* %Base_Arg, i64* %ln9sh, i64* %Hp_Arg, i64 %ln9si, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.1537913 UTC

@c9pv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9pv_info$def to i8*)
define internal ghccc void @c9pv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9pv_info$def to i64)),i64 8), i64 65, i64 4294967326}>
{
c9pv:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9sj = load i64*, i64** %Hp_Var
  %ln9sk = getelementptr inbounds i64, i64* %ln9sj, i32 3
  %ln9sl = ptrtoint i64* %ln9sk to i64
  %ln9sm = inttoptr i64 %ln9sl to i64*
  store i64* %ln9sm, i64** %Hp_Var
  %ln9sn = load i64*, i64** %Hp_Var
  %ln9so = ptrtoint i64* %ln9sn to i64
  %ln9sp = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9sq = bitcast i64* %ln9sp to i64*
  %ln9sr = load i64, i64* %ln9sq, !tbaa !5
  %ln9ss = icmp ugt i64 %ln9so, %ln9sr
  %ln9st = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9ss, i1 0 )
  br i1 %ln9st, label %c9pV, label %c9pU
c9pU:
  %ln9sv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92X_info$def to i64
  %ln9su = load i64*, i64** %Hp_Var
  %ln9sw = getelementptr inbounds i64, i64* %ln9su, i32 -2
  store i64 %ln9sv, i64* %ln9sw, !tbaa !3
  %ln9sy = load i64*, i64** %Sp_Var
  %ln9sz = getelementptr inbounds i64, i64* %ln9sy, i32 1
  %ln9sA = bitcast i64* %ln9sz to i64*
  %ln9sB = load i64, i64* %ln9sA, !tbaa !2
  %ln9sx = load i64*, i64** %Hp_Var
  %ln9sC = getelementptr inbounds i64, i64* %ln9sx, i32 0
  store i64 %ln9sB, i64* %ln9sC, !tbaa !3
  %ln9sD = load i64, i64* %R2_Var
  store i64 %ln9sD, i64* %R4_Var
  %ln9sE = load i64, i64* %R1_Var
  store i64 %ln9sE, i64* %R3_Var
  %ln9sF = load i64*, i64** %Hp_Var
  %ln9sG = getelementptr inbounds i64, i64* %ln9sF, i32 -2
  %ln9sH = ptrtoint i64* %ln9sG to i64
  store i64 %ln9sH, i64* %R2_Var
  %ln9sI = load i64*, i64** %Sp_Var
  %ln9sJ = getelementptr inbounds i64, i64* %ln9sI, i32 2
  %ln9sK = ptrtoint i64* %ln9sJ to i64
  %ln9sL = inttoptr i64 %ln9sK to i64*
  store i64* %ln9sL, i64** %Sp_Var
  %ln9sM = bitcast i8* @base_GHCziBase_zpzpzuzdszpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9sN = load i64*, i64** %Sp_Var
  %ln9sO = load i64*, i64** %Hp_Var
  %ln9sP = load i64, i64* %R1_Var
  %ln9sQ = load i64, i64* %R2_Var
  %ln9sR = load i64, i64* %R3_Var
  %ln9sS = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9sM( i64* %Base_Arg, i64* %ln9sN, i64* %ln9sO, i64 %ln9sP, i64 %ln9sQ, i64 %ln9sR, i64 %ln9sS, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9pV:
  %ln9sT = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9sT, !tbaa !5
  %ln9sU = load i64, i64* %R2_Var
  store i64 %ln9sU, i64* %R2_Var
  %ln9sV = load i64, i64* %R1_Var
  store i64 %ln9sV, i64* %R1_Var
  %ln9sW = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9sX = load i64*, i64** %Sp_Var
  %ln9sY = load i64*, i64** %Hp_Var
  %ln9sZ = load i64, i64* %R1_Var
  %ln9t0 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9sW( i64* %Base_Arg, i64* %ln9sX, i64* %ln9sY, i64 %ln9sZ, i64 %ln9t0, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.1607823 UTC

@Main_viewGameState3_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState3_info$def to i8*)
define ghccc void @Main_viewGameState3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState3_info$def to i64)),i64 8), i64 8589934604, i64 0, i64 64424509454}>
{
c9pY:
  %ls92P = alloca i64, i32 1
  %ls92O = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9t1 = load i64, i64* %R3_Var
  store i64 %ln9t1, i64* %ls92P
  %ln9t2 = load i64, i64* %R2_Var
  store i64 %ln9t2, i64* %ls92O
  %ln9t3 = load i64*, i64** %Sp_Var
  %ln9t4 = getelementptr inbounds i64, i64* %ln9t3, i32 -1
  %ln9t5 = ptrtoint i64* %ln9t4 to i64
  %ln9t6 = icmp ult i64 %ln9t5, %SpLim_Arg
  %ln9t7 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9t6, i1 0 )
  br i1 %ln9t7, label %c9pZ, label %c9q0
c9q0:
  %ln9t8 = load i64*, i64** %Hp_Var
  %ln9t9 = getelementptr inbounds i64, i64* %ln9t8, i32 4
  %ln9ta = ptrtoint i64* %ln9t9 to i64
  %ln9tb = inttoptr i64 %ln9ta to i64*
  store i64* %ln9tb, i64** %Hp_Var
  %ln9tc = load i64*, i64** %Hp_Var
  %ln9td = ptrtoint i64* %ln9tc to i64
  %ln9te = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9tf = bitcast i64* %ln9te to i64*
  %ln9tg = load i64, i64* %ln9tf, !tbaa !5
  %ln9th = icmp ugt i64 %ln9td, %ln9tg
  %ln9ti = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9th, i1 0 )
  br i1 %ln9ti, label %c9q2, label %c9q1
c9q1:
  %ln9tk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s92Y_info$def to i64
  %ln9tj = load i64*, i64** %Hp_Var
  %ln9tl = getelementptr inbounds i64, i64* %ln9tj, i32 -3
  store i64 %ln9tk, i64* %ln9tl, !tbaa !3
  %ln9tn = load i64, i64* %ls92O
  %ln9tm = load i64*, i64** %Hp_Var
  %ln9to = getelementptr inbounds i64, i64* %ln9tm, i32 -1
  store i64 %ln9tn, i64* %ln9to, !tbaa !3
  %ln9tq = load i64, i64* %ls92P
  %ln9tp = load i64*, i64** %Hp_Var
  %ln9tr = getelementptr inbounds i64, i64* %ln9tp, i32 0
  store i64 %ln9tq, i64* %ln9tr, !tbaa !3
  %ln9tt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9pW_info$def to i64
  %ln9ts = load i64*, i64** %Sp_Var
  %ln9tu = getelementptr inbounds i64, i64* %ln9ts, i32 -1
  store i64 %ln9tt, i64* %ln9tu, !tbaa !2
  %ln9tv = load i64*, i64** %Hp_Var
  %ln9tw = getelementptr inbounds i64, i64* %ln9tv, i32 -3
  %ln9tx = ptrtoint i64* %ln9tw to i64
  store i64 %ln9tx, i64* %R3_Var
  %ln9ty = ptrtoint %Main_arrayByIndex1_bytes_struct* @Main_arrayByIndex1_bytes$def to i64
  store i64 %ln9ty, i64* %R2_Var
  %ln9tz = load i64*, i64** %Sp_Var
  %ln9tA = getelementptr inbounds i64, i64* %ln9tz, i32 -1
  %ln9tB = ptrtoint i64* %ln9tA to i64
  %ln9tC = inttoptr i64 %ln9tB to i64*
  store i64* %ln9tC, i64** %Sp_Var
  %ln9tD = bitcast i8* @ghczmprim_GHCziCString_unpackAppendCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9tE = load i64*, i64** %Sp_Var
  %ln9tF = load i64*, i64** %Hp_Var
  %ln9tG = load i64, i64* %R1_Var
  %ln9tH = load i64, i64* %R2_Var
  %ln9tI = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9tD( i64* %Base_Arg, i64* %ln9tE, i64* %ln9tF, i64 %ln9tG, i64 %ln9tH, i64 %ln9tI, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9q2:
  %ln9tJ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %ln9tJ, !tbaa !5
  br label %c9pZ
c9pZ:
  %ln9tK = load i64, i64* %ls92P
  store i64 %ln9tK, i64* %R3_Var
  %ln9tL = load i64, i64* %ls92O
  store i64 %ln9tL, i64* %R2_Var
  %ln9tM = ptrtoint %Main_viewGameState3_closure_struct* @Main_viewGameState3_closure$def to i64
  store i64 %ln9tM, i64* %R1_Var
  %ln9tN = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9tO = bitcast i64* %ln9tN to i64*
  %ln9tP = load i64, i64* %ln9tO, !tbaa !5
  %ln9tQ = inttoptr i64 %ln9tP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9tR = load i64*, i64** %Sp_Var
  %ln9tS = load i64*, i64** %Hp_Var
  %ln9tT = load i64, i64* %R1_Var
  %ln9tU = load i64, i64* %R2_Var
  %ln9tV = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9tQ( i64* %Base_Arg, i64* %ln9tR, i64* %ln9tS, i64 %ln9tT, i64 %ln9tU, i64 %ln9tV, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.16777 UTC

@c9pW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9pW_info$def to i8*)
define internal ghccc void @c9pW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9pW_info$def to i64)),i64 16), i64 0, i64 12884901918}>
{
c9pW:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R3_Var
  %ln9tW = ptrtoint %Main_arrayByIndex2_closure_struct* @Main_arrayByIndex2_closure$def to i64
  %ln9tX = add i64 %ln9tW, 2
  store i64 %ln9tX, i64* %R2_Var
  %ln9tY = load i64*, i64** %Sp_Var
  %ln9tZ = getelementptr inbounds i64, i64* %ln9tY, i32 1
  %ln9u0 = ptrtoint i64* %ln9tZ to i64
  %ln9u1 = inttoptr i64 %ln9u0 to i64*
  store i64* %ln9u1, i64** %Sp_Var
  %ln9u2 = bitcast i8* @base_GHCziErr_error_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9u3 = load i64*, i64** %Sp_Var
  %ln9u4 = load i64, i64* %R2_Var
  %ln9u5 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9u2( i64* %Base_Arg, i64* %ln9u3, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9u4, i64 %ln9u5, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.1817487 UTC

%Main_viewGameState_closure_struct = type <{i64, i64}>
@Main_viewGameState_closure$def = internal global %Main_viewGameState_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState_info$def to i64), i64 0}>
@Main_viewGameState_closure = alias i8, bitcast (%Main_viewGameState_closure_struct* @Main_viewGameState_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.1867402 UTC

@s93X_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s93X_info$def to i8*)
define internal ghccc void @s93X_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s93X_info$def to i64)),i64 32), i64 3, i64 12884901903}>
{
c9uJ:
  %ls934 = alloca i64, i32 1
  %ls939 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9y4 = load i64*, i64** %Sp_Var
  %ln9y5 = getelementptr inbounds i64, i64* %ln9y4, i32 -10
  %ln9y6 = ptrtoint i64* %ln9y5 to i64
  %ln9y7 = icmp ult i64 %ln9y6, %SpLim_Arg
  %ln9y8 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9y7, i1 0 )
  br i1 %ln9y8, label %c9v2, label %c9v3
c9v3:
  %ln9ya = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9y9 = load i64*, i64** %Sp_Var
  %ln9yb = getelementptr inbounds i64, i64* %ln9y9, i32 -2
  store i64 %ln9ya, i64* %ln9yb, !tbaa !2
  %ln9yd = load i64, i64* %R1_Var
  %ln9yc = load i64*, i64** %Sp_Var
  %ln9ye = getelementptr inbounds i64, i64* %ln9yc, i32 -1
  store i64 %ln9yd, i64* %ln9ye, !tbaa !2
  %ln9yg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uG_info$def to i64
  %ln9yf = load i64*, i64** %Sp_Var
  %ln9yh = getelementptr inbounds i64, i64* %ln9yf, i32 -5
  store i64 %ln9yg, i64* %ln9yh, !tbaa !2
  %ln9yk = load i64, i64* %R1_Var
  %ln9yl = add i64 %ln9yk, 24
  %ln9ym = inttoptr i64 %ln9yl to i64*
  %ln9yn = load i64, i64* %ln9ym, !tbaa !4
  store i64 %ln9yn, i64* %ls934
  %ln9yq = load i64, i64* %R1_Var
  %ln9yr = add i64 %ln9yq, 32
  %ln9ys = inttoptr i64 %ln9yr to i64*
  %ln9yt = load i64, i64* %ln9ys, !tbaa !4
  store i64 %ln9yt, i64* %ls939
  %ln9yw = load i64, i64* %R1_Var
  %ln9yx = add i64 %ln9yw, 16
  %ln9yy = inttoptr i64 %ln9yx to i64*
  %ln9yz = load i64, i64* %ln9yy, !tbaa !4
  store i64 %ln9yz, i64* %R1_Var
  %ln9yB = load i64, i64* %ls934
  %ln9yA = load i64*, i64** %Sp_Var
  %ln9yC = getelementptr inbounds i64, i64* %ln9yA, i32 -4
  store i64 %ln9yB, i64* %ln9yC, !tbaa !2
  %ln9yE = load i64, i64* %ls939
  %ln9yD = load i64*, i64** %Sp_Var
  %ln9yF = getelementptr inbounds i64, i64* %ln9yD, i32 -3
  store i64 %ln9yE, i64* %ln9yF, !tbaa !2
  %ln9yG = load i64*, i64** %Sp_Var
  %ln9yH = getelementptr inbounds i64, i64* %ln9yG, i32 -5
  %ln9yI = ptrtoint i64* %ln9yH to i64
  %ln9yJ = inttoptr i64 %ln9yI to i64*
  store i64* %ln9yJ, i64** %Sp_Var
  %ln9yK = load i64, i64* %R1_Var
  %ln9yL = and i64 %ln9yK, 7
  %ln9yM = icmp ne i64 %ln9yL, 0
  br i1 %ln9yM, label %u9xb, label %c9uH
c9uH:
  %ln9yO = load i64, i64* %R1_Var
  %ln9yP = inttoptr i64 %ln9yO to i64*
  %ln9yQ = load i64, i64* %ln9yP, !tbaa !4
  %ln9yR = inttoptr i64 %ln9yQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9yS = load i64*, i64** %Sp_Var
  %ln9yT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9yR( i64* %Base_Arg, i64* %ln9yS, i64* %Hp_Arg, i64 %ln9yT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9xb:
  %ln9yU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9yV = load i64*, i64** %Sp_Var
  %ln9yW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9yU( i64* %Base_Arg, i64* %ln9yV, i64* %Hp_Arg, i64 %ln9yW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9v2:
  %ln9yX = load i64, i64* %R1_Var
  store i64 %ln9yX, i64* %R1_Var
  %ln9yY = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9yZ = bitcast i64* %ln9yY to i64*
  %ln9z0 = load i64, i64* %ln9yZ, !tbaa !5
  %ln9z1 = inttoptr i64 %ln9z0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9z2 = load i64*, i64** %Sp_Var
  %ln9z3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9z1( i64* %Base_Arg, i64* %ln9z2, i64* %Hp_Arg, i64 %ln9z3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.1937306 UTC

@c9uG_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uG_info$def to i8*)
define internal ghccc void @c9uG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uG_info$def to i64)),i64 32), i64 2, i64 12884901918}>
{
c9uG:
  %ls93d = alloca i64, i32 1
  %ls93f = alloca i64, i32 1
  %ls93e = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9z5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uM_info$def to i64
  %ln9z4 = load i64*, i64** %Sp_Var
  %ln9z6 = getelementptr inbounds i64, i64* %ln9z4, i32 -3
  store i64 %ln9z5, i64* %ln9z6, !tbaa !2
  %ln9z9 = load i64, i64* %R1_Var
  %ln9za = add i64 %ln9z9, 15
  %ln9zb = inttoptr i64 %ln9za to i64*
  %ln9zc = load i64, i64* %ln9zb, !tbaa !4
  store i64 %ln9zc, i64* %ls93d
  %ln9zf = load i64, i64* %R1_Var
  %ln9zg = add i64 %ln9zf, 23
  %ln9zh = inttoptr i64 %ln9zg to i64*
  %ln9zi = load i64, i64* %ln9zh, !tbaa !4
  store i64 %ln9zi, i64* %ls93f
  %ln9zl = load i64, i64* %R1_Var
  %ln9zm = add i64 %ln9zl, 31
  %ln9zn = inttoptr i64 %ln9zm to i64*
  %ln9zo = load i64, i64* %ln9zn, !tbaa !4
  store i64 %ln9zo, i64* %ls93e
  %ln9zr = load i64, i64* %R1_Var
  %ln9zs = add i64 %ln9zr, 7
  %ln9zt = inttoptr i64 %ln9zs to i64*
  %ln9zu = load i64, i64* %ln9zt, !tbaa !4
  store i64 %ln9zu, i64* %R1_Var
  %ln9zw = load i64, i64* %ls93e
  %ln9zv = load i64*, i64** %Sp_Var
  %ln9zx = getelementptr inbounds i64, i64* %ln9zv, i32 -2
  store i64 %ln9zw, i64* %ln9zx, !tbaa !2
  %ln9zz = load i64, i64* %ls93f
  %ln9zy = load i64*, i64** %Sp_Var
  %ln9zA = getelementptr inbounds i64, i64* %ln9zy, i32 -1
  store i64 %ln9zz, i64* %ln9zA, !tbaa !2
  %ln9zC = load i64, i64* %ls93d
  %ln9zB = load i64*, i64** %Sp_Var
  %ln9zD = getelementptr inbounds i64, i64* %ln9zB, i32 0
  store i64 %ln9zC, i64* %ln9zD, !tbaa !2
  %ln9zE = load i64*, i64** %Sp_Var
  %ln9zF = getelementptr inbounds i64, i64* %ln9zE, i32 -3
  %ln9zG = ptrtoint i64* %ln9zF to i64
  %ln9zH = inttoptr i64 %ln9zG to i64*
  store i64* %ln9zH, i64** %Sp_Var
  %ln9zI = load i64, i64* %R1_Var
  %ln9zJ = and i64 %ln9zI, 7
  %ln9zK = icmp ne i64 %ln9zJ, 0
  br i1 %ln9zK, label %u9xa, label %c9uN
c9uN:
  %ln9zM = load i64, i64* %R1_Var
  %ln9zN = inttoptr i64 %ln9zM to i64*
  %ln9zO = load i64, i64* %ln9zN, !tbaa !4
  %ln9zP = inttoptr i64 %ln9zO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9zQ = load i64*, i64** %Sp_Var
  %ln9zR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9zP( i64* %Base_Arg, i64* %ln9zQ, i64* %Hp_Arg, i64 %ln9zR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9xa:
  %ln9zS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9zT = load i64*, i64** %Sp_Var
  %ln9zU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9zS( i64* %Base_Arg, i64* %ln9zT, i64* %Hp_Arg, i64 %ln9zU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.2017193 UTC

@c9uM_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uM_info$def to i8*)
define internal ghccc void @c9uM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uM_info$def to i64)),i64 32), i64 69, i64 12884901918}>
{
c9uM:
  %ls93h = alloca i64, i32 1
  %ls93i = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9zW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uR_info$def to i64
  %ln9zV = load i64*, i64** %Sp_Var
  %ln9zX = getelementptr inbounds i64, i64* %ln9zV, i32 -1
  store i64 %ln9zW, i64* %ln9zX, !tbaa !2
  %ln9A0 = load i64, i64* %R1_Var
  %ln9A1 = add i64 %ln9A0, 7
  %ln9A2 = inttoptr i64 %ln9A1 to i64*
  %ln9A3 = load i64, i64* %ln9A2, !tbaa !4
  store i64 %ln9A3, i64* %ls93h
  %ln9A6 = load i64, i64* %R1_Var
  %ln9A7 = add i64 %ln9A6, 15
  %ln9A8 = inttoptr i64 %ln9A7 to i64*
  %ln9A9 = load i64, i64* %ln9A8, !tbaa !4
  store i64 %ln9A9, i64* %ls93i
  %ln9Aa = load i64*, i64** %Sp_Var
  %ln9Ab = getelementptr inbounds i64, i64* %ln9Aa, i32 3
  %ln9Ac = bitcast i64* %ln9Ab to i64*
  %ln9Ad = load i64, i64* %ln9Ac, !tbaa !2
  store i64 %ln9Ad, i64* %R1_Var
  %ln9Af = load i64, i64* %ls93i
  %ln9Ae = load i64*, i64** %Sp_Var
  %ln9Ag = getelementptr inbounds i64, i64* %ln9Ae, i32 0
  store i64 %ln9Af, i64* %ln9Ag, !tbaa !2
  %ln9Ai = load i64, i64* %ls93h
  %ln9Ah = load i64*, i64** %Sp_Var
  %ln9Aj = getelementptr inbounds i64, i64* %ln9Ah, i32 3
  store i64 %ln9Ai, i64* %ln9Aj, !tbaa !2
  %ln9Ak = load i64*, i64** %Sp_Var
  %ln9Al = getelementptr inbounds i64, i64* %ln9Ak, i32 -1
  %ln9Am = ptrtoint i64* %ln9Al to i64
  %ln9An = inttoptr i64 %ln9Am to i64*
  store i64* %ln9An, i64** %Sp_Var
  %ln9Ao = load i64, i64* %R1_Var
  %ln9Ap = and i64 %ln9Ao, 7
  %ln9Aq = icmp ne i64 %ln9Ap, 0
  br i1 %ln9Aq, label %u9xc, label %c9uS
c9uS:
  %ln9As = load i64, i64* %R1_Var
  %ln9At = inttoptr i64 %ln9As to i64*
  %ln9Au = load i64, i64* %ln9At, !tbaa !4
  %ln9Av = inttoptr i64 %ln9Au to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Aw = load i64*, i64** %Sp_Var
  %ln9Ax = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Av( i64* %Base_Arg, i64* %ln9Aw, i64* %Hp_Arg, i64 %ln9Ax, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9xc:
  %ln9Ay = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uR_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Az = load i64*, i64** %Sp_Var
  %ln9AA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ay( i64* %Base_Arg, i64* %ln9Az, i64* %Hp_Arg, i64 %ln9AA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.2186971 UTC

@c9uR_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uR_info$def to i8*)
define internal ghccc void @c9uR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uR_info$def to i64)),i64 32), i64 134, i64 12884901918}>
{
c9uR:
  %ls93k = alloca i64, i32 1
  %ls93l = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9AC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uW_info$def to i64
  %ln9AB = load i64*, i64** %Sp_Var
  %ln9AD = getelementptr inbounds i64, i64* %ln9AB, i32 -1
  store i64 %ln9AC, i64* %ln9AD, !tbaa !2
  %ln9AG = load i64, i64* %R1_Var
  %ln9AH = add i64 %ln9AG, 7
  %ln9AI = inttoptr i64 %ln9AH to i64*
  %ln9AJ = load i64, i64* %ln9AI, !tbaa !4
  store i64 %ln9AJ, i64* %ls93k
  %ln9AM = load i64, i64* %R1_Var
  %ln9AN = add i64 %ln9AM, 15
  %ln9AO = inttoptr i64 %ln9AN to i64*
  %ln9AP = load i64, i64* %ln9AO, !tbaa !4
  store i64 %ln9AP, i64* %ls93l
  %ln9AQ = load i64*, i64** %Sp_Var
  %ln9AR = getelementptr inbounds i64, i64* %ln9AQ, i32 4
  %ln9AS = bitcast i64* %ln9AR to i64*
  %ln9AT = load i64, i64* %ln9AS, !tbaa !2
  store i64 %ln9AT, i64* %R1_Var
  %ln9AV = load i64, i64* %ls93l
  %ln9AU = load i64*, i64** %Sp_Var
  %ln9AW = getelementptr inbounds i64, i64* %ln9AU, i32 0
  store i64 %ln9AV, i64* %ln9AW, !tbaa !2
  %ln9AY = load i64, i64* %ls93k
  %ln9AX = load i64*, i64** %Sp_Var
  %ln9AZ = getelementptr inbounds i64, i64* %ln9AX, i32 4
  store i64 %ln9AY, i64* %ln9AZ, !tbaa !2
  %ln9B0 = load i64*, i64** %Sp_Var
  %ln9B1 = getelementptr inbounds i64, i64* %ln9B0, i32 -1
  %ln9B2 = ptrtoint i64* %ln9B1 to i64
  %ln9B3 = inttoptr i64 %ln9B2 to i64*
  store i64* %ln9B3, i64** %Sp_Var
  %ln9B4 = load i64, i64* %R1_Var
  %ln9B5 = and i64 %ln9B4, 7
  %ln9B6 = icmp ne i64 %ln9B5, 0
  br i1 %ln9B6, label %u9xd, label %c9uX
c9uX:
  %ln9B8 = load i64, i64* %R1_Var
  %ln9B9 = inttoptr i64 %ln9B8 to i64*
  %ln9Ba = load i64, i64* %ln9B9, !tbaa !4
  %ln9Bb = inttoptr i64 %ln9Ba to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Bc = load i64*, i64** %Sp_Var
  %ln9Bd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Bb( i64* %Base_Arg, i64* %ln9Bc, i64* %Hp_Arg, i64 %ln9Bd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9xd:
  %ln9Be = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uW_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Bf = load i64*, i64** %Sp_Var
  %ln9Bg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Be( i64* %Base_Arg, i64* %ln9Bf, i64* %Hp_Arg, i64 %ln9Bg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.2276785 UTC

@c9uW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uW_info$def to i8*)
define internal ghccc void @c9uW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uW_info$def to i64)),i64 32), i64 263, i64 12884901918}>
{
c9uW:
  %ls93n = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9Bh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9v1_info$def to i64
  %ln9Bi = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Bh, i64* %ln9Bi, !tbaa !2
  %ln9Bl = load i64, i64* %R1_Var
  %ln9Bm = add i64 %ln9Bl, 7
  %ln9Bn = inttoptr i64 %ln9Bm to i64*
  %ln9Bo = load i64, i64* %ln9Bn, !tbaa !4
  store i64 %ln9Bo, i64* %ls93n
  %ln9Bp = getelementptr inbounds i64, i64* %Sp_Arg, i32 6
  %ln9Bq = bitcast i64* %ln9Bp to i64*
  %ln9Br = load i64, i64* %ln9Bq, !tbaa !2
  store i64 %ln9Br, i64* %R1_Var
  %ln9Bs = load i64, i64* %ls93n
  %ln9Bt = getelementptr inbounds i64, i64* %Sp_Arg, i32 6
  store i64 %ln9Bs, i64* %ln9Bt, !tbaa !2
  %ln9Bu = load i64, i64* %R1_Var
  %ln9Bv = and i64 %ln9Bu, 7
  %ln9Bw = icmp ne i64 %ln9Bv, 0
  br i1 %ln9Bw, label %u9xe, label %c9v8
c9v8:
  %ln9By = load i64, i64* %R1_Var
  %ln9Bz = inttoptr i64 %ln9By to i64*
  %ln9BA = load i64, i64* %ln9Bz, !tbaa !4
  %ln9BB = inttoptr i64 %ln9BA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9BC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9BB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9BC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9xe:
  %ln9BD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9v1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9BE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9BD( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9BE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.234665 UTC

@c9v1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9v1_info$def to i8*)
define internal ghccc void @c9v1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9v1_info$def to i64)),i64 32), i64 2311, i64 12884901918}>
{
c9v1:
  %ls93p = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9BH = load i64, i64* %R1_Var
  %ln9BI = add i64 %ln9BH, 7
  %ln9BJ = inttoptr i64 %ln9BI to i64*
  %ln9BK = load i64, i64* %ln9BJ, !tbaa !4
  store i64 %ln9BK, i64* %ls93p
  %ln9BL = load i64*, i64** %Sp_Var
  %ln9BM = getelementptr inbounds i64, i64* %ln9BL, i32 6
  %ln9BN = bitcast i64* %ln9BM to i64*
  %ln9BO = load i64, i64* %ln9BN, !tbaa !2
  %ln9BP = load i64, i64* %ls93p
  %ln9BQ = icmp sle i64 %ln9BO, %ln9BP
  %ln9BR = zext i1 %ln9BQ to i64
  switch i64 %ln9BR, label %u9x6 [i64 1, label %c9vk]
u9x6:
  %ln9BS = load i64*, i64** %Sp_Var
  %ln9BT = getelementptr inbounds i64, i64* %ln9BS, i32 8
  %ln9BU = ptrtoint i64* %ln9BT to i64
  %ln9BV = inttoptr i64 %ln9BU to i64*
  store i64* %ln9BV, i64** %Sp_Var
  %ln9BW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9vZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9BX = load i64*, i64** %Sp_Var
  %ln9BY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9BW( i64* %Base_Arg, i64* %ln9BX, i64* %Hp_Arg, i64 %ln9BY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9vk:
  %ln9C0 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vj_info$def to i64
  %ln9BZ = load i64*, i64** %Sp_Var
  %ln9C1 = getelementptr inbounds i64, i64* %ln9BZ, i32 0
  store i64 %ln9C0, i64* %ln9C1, !tbaa !2
  %ln9C2 = load i64*, i64** %Sp_Var
  %ln9C3 = getelementptr inbounds i64, i64* %ln9C2, i32 5
  %ln9C4 = bitcast i64* %ln9C3 to i64*
  %ln9C5 = load i64, i64* %ln9C4, !tbaa !2
  store i64 %ln9C5, i64* %R1_Var
  %ln9C7 = load i64, i64* %ls93p
  %ln9C6 = load i64*, i64** %Sp_Var
  %ln9C8 = getelementptr inbounds i64, i64* %ln9C6, i32 5
  store i64 %ln9C7, i64* %ln9C8, !tbaa !2
  %ln9C9 = load i64, i64* %R1_Var
  %ln9Ca = and i64 %ln9C9, 7
  %ln9Cb = icmp ne i64 %ln9Ca, 0
  br i1 %ln9Cb, label %u9xf, label %c9vl
c9vl:
  %ln9Cd = load i64, i64* %R1_Var
  %ln9Ce = inttoptr i64 %ln9Cd to i64*
  %ln9Cf = load i64, i64* %ln9Ce, !tbaa !4
  %ln9Cg = inttoptr i64 %ln9Cf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ch = load i64*, i64** %Sp_Var
  %ln9Ci = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Cg( i64* %Base_Arg, i64* %ln9Ch, i64* %Hp_Arg, i64 %ln9Ci, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9xf:
  %ln9Cj = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vj_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ck = load i64*, i64** %Sp_Var
  %ln9Cl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Cj( i64* %Base_Arg, i64* %ln9Ck, i64* %Hp_Arg, i64 %ln9Cl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.2406524 UTC

@c9vj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vj_info$def to i8*)
define internal ghccc void @c9vj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vj_info$def to i64)),i64 32), i64 3335, i64 12884901918}>
{
c9vj:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9Cm = load i64*, i64** %Sp_Var
  %ln9Cn = getelementptr inbounds i64, i64* %ln9Cm, i32 5
  %ln9Co = bitcast i64* %ln9Cn to i64*
  %ln9Cp = load i64, i64* %ln9Co, !tbaa !2
  %ln9Cs = load i64, i64* %R1_Var
  %ln9Ct = add i64 %ln9Cs, 7
  %ln9Cu = inttoptr i64 %ln9Ct to i64*
  %ln9Cv = load i64, i64* %ln9Cu, !tbaa !4
  %ln9Cw = icmp sle i64 %ln9Cp, %ln9Cv
  %ln9Cx = zext i1 %ln9Cw to i64
  switch i64 %ln9Cx, label %u9x7 [i64 1, label %c9vC]
u9x7:
  %ln9Cy = load i64*, i64** %Sp_Var
  %ln9Cz = getelementptr inbounds i64, i64* %ln9Cy, i32 8
  %ln9CA = ptrtoint i64* %ln9Cz to i64
  %ln9CB = inttoptr i64 %ln9CA to i64*
  store i64* %ln9CB, i64** %Sp_Var
  %ln9CC = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9vZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9CD = load i64*, i64** %Sp_Var
  %ln9CE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9CC( i64* %Base_Arg, i64* %ln9CD, i64* %Hp_Arg, i64 %ln9CE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9vC:
  %ln9CG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vw_info$def to i64
  %ln9CF = load i64*, i64** %Sp_Var
  %ln9CH = getelementptr inbounds i64, i64* %ln9CF, i32 0
  store i64 %ln9CG, i64* %ln9CH, !tbaa !2
  %ln9CI = load i64*, i64** %Sp_Var
  %ln9CJ = getelementptr inbounds i64, i64* %ln9CI, i32 2
  %ln9CK = bitcast i64* %ln9CJ to i64*
  %ln9CL = load i64, i64* %ln9CK, !tbaa !2
  store i64 %ln9CL, i64* %R1_Var
  %ln9CM = load i64, i64* %R1_Var
  %ln9CN = and i64 %ln9CM, 7
  %ln9CO = icmp ne i64 %ln9CN, 0
  br i1 %ln9CO, label %u9xh, label %c9vx
c9vx:
  %ln9CQ = load i64, i64* %R1_Var
  %ln9CR = inttoptr i64 %ln9CQ to i64*
  %ln9CS = load i64, i64* %ln9CR, !tbaa !4
  %ln9CT = inttoptr i64 %ln9CS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9CU = load i64*, i64** %Sp_Var
  %ln9CV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9CT( i64* %Base_Arg, i64* %ln9CU, i64* %Hp_Arg, i64 %ln9CV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9xh:
  %ln9CW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vw_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9CX = load i64*, i64** %Sp_Var
  %ln9CY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9CW( i64* %Base_Arg, i64* %ln9CX, i64* %Hp_Arg, i64 %ln9CY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.2466481 UTC

@c9vw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vw_info$def to i8*)
define internal ghccc void @c9vw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vw_info$def to i64)),i64 32), i64 3463, i64 12884901918}>
{
c9vw:
  %ls93x = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9CZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vB_info$def to i64
  %ln9D0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9CZ, i64* %ln9D0, !tbaa !2
  %ln9D3 = load i64, i64* %R1_Var
  %ln9D4 = add i64 %ln9D3, 7
  %ln9D5 = inttoptr i64 %ln9D4 to i64*
  %ln9D6 = load i64, i64* %ln9D5, !tbaa !4
  store i64 %ln9D6, i64* %ls93x
  %ln9D7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 7
  %ln9D8 = bitcast i64* %ln9D7 to i64*
  %ln9D9 = load i64, i64* %ln9D8, !tbaa !2
  store i64 %ln9D9, i64* %R1_Var
  %ln9Da = load i64, i64* %ls93x
  %ln9Db = getelementptr inbounds i64, i64* %Sp_Arg, i32 7
  store i64 %ln9Da, i64* %ln9Db, !tbaa !2
  %ln9Dc = load i64, i64* %R1_Var
  %ln9Dd = and i64 %ln9Dc, 7
  %ln9De = icmp ne i64 %ln9Dd, 0
  br i1 %ln9De, label %u9xj, label %c9vE
c9vE:
  %ln9Dg = load i64, i64* %R1_Var
  %ln9Dh = inttoptr i64 %ln9Dg to i64*
  %ln9Di = load i64, i64* %ln9Dh, !tbaa !4
  %ln9Dj = inttoptr i64 %ln9Di to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Dk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Dj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Dk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9xj:
  %ln9Dl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vB_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Dm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Dl( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9Dm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.2536359 UTC

@c9vB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vB_info$def to i8*)
define internal ghccc void @c9vB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vB_info$def to i64)),i64 32), i64 7559, i64 12884901918}>
{
c9vB:
  %ls93z = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls93l = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9Dp = load i64, i64* %R1_Var
  %ln9Dq = add i64 %ln9Dp, 7
  %ln9Dr = inttoptr i64 %ln9Dq to i64*
  %ln9Ds = load i64, i64* %ln9Dr, !tbaa !4
  store i64 %ln9Ds, i64* %ls93z
  %ln9Dt = load i64*, i64** %Sp_Var
  %ln9Du = getelementptr inbounds i64, i64* %ln9Dt, i32 7
  %ln9Dv = bitcast i64* %ln9Du to i64*
  %ln9Dw = load i64, i64* %ln9Dv, !tbaa !2
  %ln9Dx = load i64, i64* %ls93z
  %ln9Dy = icmp sle i64 %ln9Dw, %ln9Dx
  %ln9Dz = zext i1 %ln9Dy to i64
  switch i64 %ln9Dz, label %u9x8 [i64 1, label %c9vQ]
u9x8:
  %ln9DA = load i64*, i64** %Sp_Var
  %ln9DB = getelementptr inbounds i64, i64* %ln9DA, i32 8
  %ln9DC = ptrtoint i64* %ln9DB to i64
  %ln9DD = inttoptr i64 %ln9DC to i64*
  store i64* %ln9DD, i64** %Sp_Var
  %ln9DE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9vZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9DF = load i64*, i64** %Sp_Var
  %ln9DG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9DE( i64* %Base_Arg, i64* %ln9DF, i64* %Hp_Arg, i64 %ln9DG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9vQ:
  %ln9DH = load i64*, i64** %Sp_Var
  %ln9DI = getelementptr inbounds i64, i64* %ln9DH, i32 1
  %ln9DJ = bitcast i64* %ln9DI to i64*
  %ln9DK = load i64, i64* %ln9DJ, !tbaa !2
  store i64 %ln9DK, i64* %ls93l
  %ln9DM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vP_info$def to i64
  %ln9DL = load i64*, i64** %Sp_Var
  %ln9DN = getelementptr inbounds i64, i64* %ln9DL, i32 1
  store i64 %ln9DM, i64* %ln9DN, !tbaa !2
  %ln9DO = load i64, i64* %ls93l
  store i64 %ln9DO, i64* %R1_Var
  %ln9DQ = load i64, i64* %ls93z
  %ln9DP = load i64*, i64** %Sp_Var
  %ln9DR = getelementptr inbounds i64, i64* %ln9DP, i32 2
  store i64 %ln9DQ, i64* %ln9DR, !tbaa !2
  %ln9DS = load i64*, i64** %Sp_Var
  %ln9DT = getelementptr inbounds i64, i64* %ln9DS, i32 1
  %ln9DU = ptrtoint i64* %ln9DT to i64
  %ln9DV = inttoptr i64 %ln9DU to i64*
  store i64* %ln9DV, i64** %Sp_Var
  %ln9DW = load i64, i64* %R1_Var
  %ln9DX = and i64 %ln9DW, 7
  %ln9DY = icmp ne i64 %ln9DX, 0
  br i1 %ln9DY, label %u9xk, label %c9vR
c9vR:
  %ln9E0 = load i64, i64* %R1_Var
  %ln9E1 = inttoptr i64 %ln9E0 to i64*
  %ln9E2 = load i64, i64* %ln9E1, !tbaa !4
  %ln9E3 = inttoptr i64 %ln9E2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9E4 = load i64*, i64** %Sp_Var
  %ln9E5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9E3( i64* %Base_Arg, i64* %ln9E4, i64* %Hp_Arg, i64 %ln9E5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9xk:
  %ln9E6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vP_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9E7 = load i64*, i64** %Sp_Var
  %ln9E8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9E6( i64* %Base_Arg, i64* %ln9E7, i64* %Hp_Arg, i64 %ln9E8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.2616208 UTC

@c9vP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vP_info$def to i8*)
define internal ghccc void @c9vP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9vP_info$def to i64)),i64 32), i64 3782, i64 12884901918}>
{
c9vP:
  %ls93z = alloca i64, i32 1
  %ls93D = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls93e = alloca i64, i32 1
  %ls93x = alloca i64, i32 1
  %ls93G = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9E9 = load i64*, i64** %Sp_Var
  %ln9Ea = getelementptr inbounds i64, i64* %ln9E9, i32 1
  %ln9Eb = bitcast i64* %ln9Ea to i64*
  %ln9Ec = load i64, i64* %ln9Eb, !tbaa !2
  store i64 %ln9Ec, i64* %ls93z
  %ln9Ef = load i64, i64* %R1_Var
  %ln9Eg = add i64 %ln9Ef, 7
  %ln9Eh = inttoptr i64 %ln9Eg to i64*
  %ln9Ei = load i64, i64* %ln9Eh, !tbaa !4
  store i64 %ln9Ei, i64* %ls93D
  %ln9Ej = load i64, i64* %ls93z
  %ln9Ek = load i64, i64* %ls93D
  %ln9El = icmp sle i64 %ln9Ej, %ln9Ek
  %ln9Em = zext i1 %ln9El to i64
  switch i64 %ln9Em, label %u9x9 [i64 1, label %c9x5]
u9x9:
  %ln9En = load i64*, i64** %Sp_Var
  %ln9Eo = getelementptr inbounds i64, i64* %ln9En, i32 7
  %ln9Ep = ptrtoint i64* %ln9Eo to i64
  %ln9Eq = inttoptr i64 %ln9Ep to i64*
  store i64* %ln9Eq, i64** %Sp_Var
  %ln9Er = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9vZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Es = load i64*, i64** %Sp_Var
  %ln9Et = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Er( i64* %Base_Arg, i64* %ln9Es, i64* %Hp_Arg, i64 %ln9Et, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9x5:
  %ln9Eu = load i64*, i64** %Sp_Var
  %ln9Ev = getelementptr inbounds i64, i64* %ln9Eu, i32 2
  %ln9Ew = bitcast i64* %ln9Ev to i64*
  %ln9Ex = load i64, i64* %ln9Ew, !tbaa !2
  store i64 %ln9Ex, i64* %ls93e
  %ln9Ey = load i64*, i64** %Sp_Var
  %ln9Ez = getelementptr inbounds i64, i64* %ln9Ey, i32 6
  %ln9EA = bitcast i64* %ln9Ez to i64*
  %ln9EB = load i64, i64* %ln9EA, !tbaa !2
  store i64 %ln9EB, i64* %ls93x
  %ln9EC = load i64*, i64** %Sp_Var
  %ln9ED = getelementptr inbounds i64, i64* %ln9EC, i32 4
  %ln9EE = bitcast i64* %ln9ED to i64*
  %ln9EF = load i64, i64* %ln9EE, !tbaa !2
  %ln9EG = load i64*, i64** %Sp_Var
  %ln9EH = getelementptr inbounds i64, i64* %ln9EG, i32 5
  %ln9EI = bitcast i64* %ln9EH to i64*
  %ln9EJ = load i64, i64* %ln9EI, !tbaa !2
  %ln9EK = sub i64 %ln9EF, %ln9EJ
  %ln9EL = load i64, i64* %ls93D
  %ln9EM = load i64, i64* %ls93x
  %ln9EN = sub i64 1, %ln9EM
  %ln9EO = add i64 %ln9EL, %ln9EN
  %ln9EP = mul i64 %ln9EK, %ln9EO
  %ln9EQ = load i64, i64* %ls93z
  %ln9ER = load i64, i64* %ls93x
  %ln9ES = sub i64 %ln9EQ, %ln9ER
  %ln9ET = add i64 %ln9EP, %ln9ES
  store i64 %ln9ET, i64* %ls93G
  %ln9EU = load i64, i64* %ls93G
  %ln9EV = icmp sle i64 0, %ln9EU
  %ln9EW = zext i1 %ln9EV to i64
  switch i64 %ln9EW, label %c9wt [i64 1, label %c9x4]
c9wt:
  %ln9EX = load i64, i64* %ls93G
  store i64 %ln9EX, i64* %R3_Var
  %ln9EY = load i64, i64* %ls93e
  store i64 %ln9EY, i64* %R2_Var
  %ln9EZ = load i64*, i64** %Sp_Var
  %ln9F0 = getelementptr inbounds i64, i64* %ln9EZ, i32 7
  %ln9F1 = ptrtoint i64* %ln9F0 to i64
  %ln9F2 = inttoptr i64 %ln9F1 to i64*
  store i64* %ln9F2, i64** %Sp_Var
  %ln9F3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9F4 = load i64*, i64** %Sp_Var
  %ln9F5 = load i64, i64* %R1_Var
  %ln9F6 = load i64, i64* %R2_Var
  %ln9F7 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9F3( i64* %Base_Arg, i64* %ln9F4, i64* %Hp_Arg, i64 %ln9F5, i64 %ln9F6, i64 %ln9F7, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9x4:
  %ln9F8 = load i64, i64* %ls93G
  %ln9F9 = load i64, i64* %ls93e
  %ln9Fa = icmp slt i64 %ln9F8, %ln9F9
  %ln9Fb = zext i1 %ln9Fa to i64
  switch i64 %ln9Fb, label %c9wt [i64 1, label %c9x3]
c9x3:
  %ln9Fc = load i64*, i64** %Sp_Var
  %ln9Fd = getelementptr inbounds i64, i64* %ln9Fc, i32 3
  %ln9Fe = bitcast i64* %ln9Fd to i64*
  %ln9Ff = load i64, i64* %ln9Fe, !tbaa !2
  %ln9Fg = load i64, i64* %ls93G
  %ln9Fh = ashr i64 %ln9Fg, 6
  %ln9Fi = shl i64 %ln9Fh, 3
  %ln9Fj = add i64 %ln9Fi, 16
  %ln9Fk = add i64 %ln9Ff, %ln9Fj
  %ln9Fl = inttoptr i64 %ln9Fk to i64*
  %ln9Fm = load i64, i64* %ln9Fl, !tbaa !1
  %ln9Fn = load i64, i64* %ls93G
  %ln9Fo = and i64 %ln9Fn, 63
  %ln9Fp = shl i64 1, %ln9Fo
  %ln9Fq = and i64 %ln9Fm, %ln9Fp
  switch i64 %ln9Fq, label %c9wT [i64 0, label %c9wZ]
c9wT:
  %ln9Fr = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln9Fs = add i64 %ln9Fr, 2
  store i64 %ln9Fs, i64* %R1_Var
  %ln9Ft = load i64*, i64** %Sp_Var
  %ln9Fu = getelementptr inbounds i64, i64* %ln9Ft, i32 7
  %ln9Fv = ptrtoint i64* %ln9Fu to i64
  %ln9Fw = inttoptr i64 %ln9Fv to i64*
  store i64* %ln9Fw, i64** %Sp_Var
  %ln9Fx = load i64*, i64** %Sp_Var
  %ln9Fy = getelementptr inbounds i64, i64* %ln9Fx, i32 0
  %ln9Fz = bitcast i64* %ln9Fy to i64*
  %ln9FA = load i64, i64* %ln9Fz, !tbaa !2
  %ln9FB = inttoptr i64 %ln9FA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9FC = load i64*, i64** %Sp_Var
  %ln9FD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9FB( i64* %Base_Arg, i64* %ln9FC, i64* %Hp_Arg, i64 %ln9FD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9wZ:
  %ln9FE = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %ln9FF = add i64 %ln9FE, 1
  store i64 %ln9FF, i64* %R1_Var
  %ln9FG = load i64*, i64** %Sp_Var
  %ln9FH = getelementptr inbounds i64, i64* %ln9FG, i32 7
  %ln9FI = ptrtoint i64* %ln9FH to i64
  %ln9FJ = inttoptr i64 %ln9FI to i64*
  store i64* %ln9FJ, i64** %Sp_Var
  %ln9FK = load i64*, i64** %Sp_Var
  %ln9FL = getelementptr inbounds i64, i64* %ln9FK, i32 0
  %ln9FM = bitcast i64* %ln9FL to i64*
  %ln9FN = load i64, i64* %ln9FM, !tbaa !2
  %ln9FO = inttoptr i64 %ln9FN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9FP = load i64*, i64** %Sp_Var
  %ln9FQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9FO( i64* %Base_Arg, i64* %ln9FP, i64* %Hp_Arg, i64 %ln9FQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.2686079 UTC

@_c9vZ = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9vZ$def to i8*)
define internal ghccc void @_c9vZ$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c9vZ:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9FR = ptrtoint i8* @base_GHCziArr_hopelessIndexError_closure to i64
  store i64 %ln9FR, i64* %R1_Var
  %ln9FT = load i64, i64* %R1_Var
  %ln9FU = inttoptr i64 %ln9FT to i64*
  %ln9FV = load i64, i64* %ln9FU, !tbaa !4
  %ln9FW = inttoptr i64 %ln9FV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9FX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9FW( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln9FX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.2726035 UTC

@s936_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s936_info$def to i8*)
define internal ghccc void @s936_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s936_info$def to i64)),i64 32), i64 4294967301, i64 2, i64 12884901899}>
{
c9xr:
  %ls936 = alloca i64, i32 1
  %ls930 = alloca i64, i32 1
  %ls934 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9FY = load i64*, i64** %Sp_Var
  %ln9FZ = getelementptr inbounds i64, i64* %ln9FY, i32 -4
  %ln9G0 = ptrtoint i64* %ln9FZ to i64
  %ln9G1 = icmp ult i64 %ln9G0, %SpLim_Arg
  %ln9G2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9G1, i1 0 )
  br i1 %ln9G2, label %c9xs, label %c9xt
c9xt:
  %ln9G4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uv_info$def to i64
  %ln9G3 = load i64*, i64** %Sp_Var
  %ln9G5 = getelementptr inbounds i64, i64* %ln9G3, i32 -4
  store i64 %ln9G4, i64* %ln9G5, !tbaa !2
  %ln9G6 = load i64, i64* %R1_Var
  store i64 %ln9G6, i64* %ls936
  %ln9G9 = load i64, i64* %R1_Var
  %ln9Ga = add i64 %ln9G9, 7
  %ln9Gb = inttoptr i64 %ln9Ga to i64*
  %ln9Gc = load i64, i64* %ln9Gb, !tbaa !4
  store i64 %ln9Gc, i64* %ls930
  %ln9Gf = load i64, i64* %R1_Var
  %ln9Gg = add i64 %ln9Gf, 15
  %ln9Gh = inttoptr i64 %ln9Gg to i64*
  %ln9Gi = load i64, i64* %ln9Gh, !tbaa !4
  store i64 %ln9Gi, i64* %ls934
  %ln9Gj = load i64, i64* %R2_Var
  store i64 %ln9Gj, i64* %R1_Var
  %ln9Gl = load i64, i64* %ls930
  %ln9Gk = load i64*, i64** %Sp_Var
  %ln9Gm = getelementptr inbounds i64, i64* %ln9Gk, i32 -3
  store i64 %ln9Gl, i64* %ln9Gm, !tbaa !2
  %ln9Go = load i64, i64* %ls934
  %ln9Gn = load i64*, i64** %Sp_Var
  %ln9Gp = getelementptr inbounds i64, i64* %ln9Gn, i32 -2
  store i64 %ln9Go, i64* %ln9Gp, !tbaa !2
  %ln9Gr = load i64, i64* %ls936
  %ln9Gq = load i64*, i64** %Sp_Var
  %ln9Gs = getelementptr inbounds i64, i64* %ln9Gq, i32 -1
  store i64 %ln9Gr, i64* %ln9Gs, !tbaa !2
  %ln9Gt = load i64*, i64** %Sp_Var
  %ln9Gu = getelementptr inbounds i64, i64* %ln9Gt, i32 -4
  %ln9Gv = ptrtoint i64* %ln9Gu to i64
  %ln9Gw = inttoptr i64 %ln9Gv to i64*
  store i64* %ln9Gw, i64** %Sp_Var
  %ln9Gx = load i64, i64* %R1_Var
  %ln9Gy = and i64 %ln9Gx, 7
  %ln9Gz = icmp ne i64 %ln9Gy, 0
  br i1 %ln9Gz, label %u9xA, label %c9uw
c9uw:
  %ln9GB = load i64, i64* %R1_Var
  %ln9GC = inttoptr i64 %ln9GB to i64*
  %ln9GD = load i64, i64* %ln9GC, !tbaa !4
  %ln9GE = inttoptr i64 %ln9GD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9GF = load i64*, i64** %Sp_Var
  %ln9GG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9GE( i64* %Base_Arg, i64* %ln9GF, i64* %Hp_Arg, i64 %ln9GG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9xA:
  %ln9GH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9GI = load i64*, i64** %Sp_Var
  %ln9GJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9GH( i64* %Base_Arg, i64* %ln9GI, i64* %Hp_Arg, i64 %ln9GJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9xs:
  %ln9GK = load i64, i64* %R2_Var
  store i64 %ln9GK, i64* %R2_Var
  %ln9GL = load i64, i64* %R1_Var
  store i64 %ln9GL, i64* %R1_Var
  %ln9GM = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9GN = bitcast i64* %ln9GM to i64*
  %ln9GO = load i64, i64* %ln9GN, !tbaa !5
  %ln9GP = inttoptr i64 %ln9GO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9GQ = load i64*, i64** %Sp_Var
  %ln9GR = load i64, i64* %R1_Var
  %ln9GS = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9GP( i64* %Base_Arg, i64* %ln9GQ, i64* %Hp_Arg, i64 %ln9GR, i64 %ln9GS, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.2815952 UTC

@c9uv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uv_info$def to i8*)
define internal ghccc void @c9uv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uv_info$def to i64)),i64 32), i64 3, i64 12884901918}>
{
c9uv:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls939 = alloca i64, i32 1
  %ls93a = alloca i64, i32 1
  %ln9GT = load i64, i64* %R1_Var
  %ln9GU = and i64 %ln9GT, 7
  switch i64 %ln9GU, label %c9xo [i64 1, label %c9xo
                                  i64 2, label %c9xp]
c9xo:
  %ln9GV = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln9GW = add i64 %ln9GV, 1
  store i64 %ln9GW, i64* %R1_Var
  %ln9GX = load i64*, i64** %Sp_Var
  %ln9GY = getelementptr inbounds i64, i64* %ln9GX, i32 4
  %ln9GZ = ptrtoint i64* %ln9GY to i64
  %ln9H0 = inttoptr i64 %ln9GZ to i64*
  store i64* %ln9H0, i64** %Sp_Var
  %ln9H1 = load i64*, i64** %Sp_Var
  %ln9H2 = getelementptr inbounds i64, i64* %ln9H1, i32 0
  %ln9H3 = bitcast i64* %ln9H2 to i64*
  %ln9H4 = load i64, i64* %ln9H3, !tbaa !2
  %ln9H5 = inttoptr i64 %ln9H4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9H6 = load i64*, i64** %Sp_Var
  %ln9H7 = load i64*, i64** %Hp_Var
  %ln9H8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9H5( i64* %Base_Arg, i64* %ln9H6, i64* %ln9H7, i64 %ln9H8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9xp:
  %ln9H9 = load i64*, i64** %Hp_Var
  %ln9Ha = getelementptr inbounds i64, i64* %ln9H9, i32 12
  %ln9Hb = ptrtoint i64* %ln9Ha to i64
  %ln9Hc = inttoptr i64 %ln9Hb to i64*
  store i64* %ln9Hc, i64** %Hp_Var
  %ln9Hd = load i64*, i64** %Hp_Var
  %ln9He = ptrtoint i64* %ln9Hd to i64
  %ln9Hf = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Hg = bitcast i64* %ln9Hf to i64*
  %ln9Hh = load i64, i64* %ln9Hg, !tbaa !5
  %ln9Hi = icmp ugt i64 %ln9He, %ln9Hh
  %ln9Hj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Hi, i1 0 )
  br i1 %ln9Hj, label %c9xz, label %c9xy
c9xy:
  %ln9Hm = load i64, i64* %R1_Var
  %ln9Hn = add i64 %ln9Hm, 6
  %ln9Ho = inttoptr i64 %ln9Hn to i64*
  %ln9Hp = load i64, i64* %ln9Ho, !tbaa !4
  store i64 %ln9Hp, i64* %ls939
  %ln9Hs = load i64, i64* %R1_Var
  %ln9Ht = add i64 %ln9Hs, 14
  %ln9Hu = inttoptr i64 %ln9Ht to i64*
  %ln9Hv = load i64, i64* %ln9Hu, !tbaa !4
  store i64 %ln9Hv, i64* %ls93a
  %ln9Hx = ptrtoint i8* @stg_ap_2_upd_info to i64
  %ln9Hw = load i64*, i64** %Hp_Var
  %ln9Hy = getelementptr inbounds i64, i64* %ln9Hw, i32 -11
  store i64 %ln9Hx, i64* %ln9Hy, !tbaa !3
  %ln9HA = load i64*, i64** %Sp_Var
  %ln9HB = getelementptr inbounds i64, i64* %ln9HA, i32 3
  %ln9HC = bitcast i64* %ln9HB to i64*
  %ln9HD = load i64, i64* %ln9HC, !tbaa !2
  %ln9Hz = load i64*, i64** %Hp_Var
  %ln9HE = getelementptr inbounds i64, i64* %ln9Hz, i32 -9
  store i64 %ln9HD, i64* %ln9HE, !tbaa !3
  %ln9HG = load i64, i64* %ls93a
  %ln9HF = load i64*, i64** %Hp_Var
  %ln9HH = getelementptr inbounds i64, i64* %ln9HF, i32 -8
  store i64 %ln9HG, i64* %ln9HH, !tbaa !3
  %ln9HJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s93X_info$def to i64
  %ln9HI = load i64*, i64** %Hp_Var
  %ln9HK = getelementptr inbounds i64, i64* %ln9HI, i32 -7
  store i64 %ln9HJ, i64* %ln9HK, !tbaa !3
  %ln9HM = load i64*, i64** %Sp_Var
  %ln9HN = getelementptr inbounds i64, i64* %ln9HM, i32 1
  %ln9HO = bitcast i64* %ln9HN to i64*
  %ln9HP = load i64, i64* %ln9HO, !tbaa !2
  %ln9HL = load i64*, i64** %Hp_Var
  %ln9HQ = getelementptr inbounds i64, i64* %ln9HL, i32 -5
  store i64 %ln9HP, i64* %ln9HQ, !tbaa !3
  %ln9HS = load i64*, i64** %Sp_Var
  %ln9HT = getelementptr inbounds i64, i64* %ln9HS, i32 2
  %ln9HU = bitcast i64* %ln9HT to i64*
  %ln9HV = load i64, i64* %ln9HU, !tbaa !2
  %ln9HR = load i64*, i64** %Hp_Var
  %ln9HW = getelementptr inbounds i64, i64* %ln9HR, i32 -4
  store i64 %ln9HV, i64* %ln9HW, !tbaa !3
  %ln9HY = load i64, i64* %ls939
  %ln9HX = load i64*, i64** %Hp_Var
  %ln9HZ = getelementptr inbounds i64, i64* %ln9HX, i32 -3
  store i64 %ln9HY, i64* %ln9HZ, !tbaa !3
  %ln9I1 = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln9I0 = load i64*, i64** %Hp_Var
  %ln9I2 = getelementptr inbounds i64, i64* %ln9I0, i32 -2
  store i64 %ln9I1, i64* %ln9I2, !tbaa !3
  %ln9I4 = load i64*, i64** %Hp_Var
  %ln9I5 = getelementptr inbounds i64, i64* %ln9I4, i32 -7
  %ln9I6 = ptrtoint i64* %ln9I5 to i64
  %ln9I3 = load i64*, i64** %Hp_Var
  %ln9I7 = getelementptr inbounds i64, i64* %ln9I3, i32 -1
  store i64 %ln9I6, i64* %ln9I7, !tbaa !3
  %ln9I9 = load i64*, i64** %Hp_Var
  %ln9Ia = getelementptr inbounds i64, i64* %ln9I9, i32 -11
  %ln9Ib = ptrtoint i64* %ln9Ia to i64
  %ln9I8 = load i64*, i64** %Hp_Var
  %ln9Ic = getelementptr inbounds i64, i64* %ln9I8, i32 0
  store i64 %ln9Ib, i64* %ln9Ic, !tbaa !3
  %ln9Ie = load i64*, i64** %Hp_Var
  %ln9If = ptrtoint i64* %ln9Ie to i64
  %ln9Ig = add i64 %ln9If, -14
  store i64 %ln9Ig, i64* %R1_Var
  %ln9Ih = load i64*, i64** %Sp_Var
  %ln9Ii = getelementptr inbounds i64, i64* %ln9Ih, i32 4
  %ln9Ij = ptrtoint i64* %ln9Ii to i64
  %ln9Ik = inttoptr i64 %ln9Ij to i64*
  store i64* %ln9Ik, i64** %Sp_Var
  %ln9Il = load i64*, i64** %Sp_Var
  %ln9Im = getelementptr inbounds i64, i64* %ln9Il, i32 0
  %ln9In = bitcast i64* %ln9Im to i64*
  %ln9Io = load i64, i64* %ln9In, !tbaa !2
  %ln9Ip = inttoptr i64 %ln9Io to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Iq = load i64*, i64** %Sp_Var
  %ln9Ir = load i64*, i64** %Hp_Var
  %ln9Is = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ip( i64* %Base_Arg, i64* %ln9Iq, i64* %ln9Ir, i64 %ln9Is, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9xz:
  %ln9It = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 96, i64* %ln9It, !tbaa !5
  %ln9Iu = load i64, i64* %R1_Var
  store i64 %ln9Iu, i64* %R1_Var
  %ln9Iv = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Iw = load i64*, i64** %Sp_Var
  %ln9Ix = load i64*, i64** %Hp_Var
  %ln9Iy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Iv( i64* %Base_Arg, i64* %ln9Iw, i64* %ln9Ix, i64 %ln9Iy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.2905779 UTC

@s93Z_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s93Z_info$def to i8*)
define internal ghccc void @s93Z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s93Z_info$def to i64)),i64 32), i64 2, i64 30064771090}>
{
c9xB:
  %ls93Z = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls930 = alloca i64, i32 1
  %ls934 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9Iz = load i64, i64* %R1_Var
  store i64 %ln9Iz, i64* %ls93Z
  %ln9IA = load i64*, i64** %Sp_Var
  %ln9IB = getelementptr inbounds i64, i64* %ln9IA, i32 -2
  %ln9IC = ptrtoint i64* %ln9IB to i64
  %ln9ID = icmp ult i64 %ln9IC, %SpLim_Arg
  %ln9IE = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9ID, i1 0 )
  br i1 %ln9IE, label %c9xC, label %c9xD
c9xD:
  %ln9IF = load i64*, i64** %Hp_Var
  %ln9IG = getelementptr inbounds i64, i64* %ln9IF, i32 3
  %ln9IH = ptrtoint i64* %ln9IG to i64
  %ln9II = inttoptr i64 %ln9IH to i64*
  store i64* %ln9II, i64** %Hp_Var
  %ln9IJ = load i64*, i64** %Hp_Var
  %ln9IK = ptrtoint i64* %ln9IJ to i64
  %ln9IL = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9IM = bitcast i64* %ln9IL to i64*
  %ln9IN = load i64, i64* %ln9IM, !tbaa !5
  %ln9IO = icmp ugt i64 %ln9IK, %ln9IN
  %ln9IP = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9IO, i1 0 )
  br i1 %ln9IP, label %c9xF, label %c9xE
c9xE:
  %ln9IR = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9IQ = load i64*, i64** %Sp_Var
  %ln9IS = getelementptr inbounds i64, i64* %ln9IQ, i32 -2
  store i64 %ln9IR, i64* %ln9IS, !tbaa !2
  %ln9IU = load i64, i64* %ls93Z
  %ln9IT = load i64*, i64** %Sp_Var
  %ln9IV = getelementptr inbounds i64, i64* %ln9IT, i32 -1
  store i64 %ln9IU, i64* %ln9IV, !tbaa !2
  %ln9IW = load i64, i64* %ls93Z
  %ln9IX = add i64 %ln9IW, 16
  %ln9IY = inttoptr i64 %ln9IX to i64*
  %ln9IZ = load i64, i64* %ln9IY, !tbaa !1
  store i64 %ln9IZ, i64* %ls930
  %ln9J0 = load i64, i64* %ls93Z
  %ln9J1 = add i64 %ln9J0, 24
  %ln9J2 = inttoptr i64 %ln9J1 to i64*
  %ln9J3 = load i64, i64* %ln9J2, !tbaa !1
  store i64 %ln9J3, i64* %ls934
  %ln9J5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s936_info$def to i64
  %ln9J4 = load i64*, i64** %Hp_Var
  %ln9J6 = getelementptr inbounds i64, i64* %ln9J4, i32 -2
  store i64 %ln9J5, i64* %ln9J6, !tbaa !3
  %ln9J8 = load i64, i64* %ls930
  %ln9J7 = load i64*, i64** %Hp_Var
  %ln9J9 = getelementptr inbounds i64, i64* %ln9J7, i32 -1
  store i64 %ln9J8, i64* %ln9J9, !tbaa !3
  %ln9Jb = load i64, i64* %ls934
  %ln9Ja = load i64*, i64** %Hp_Var
  %ln9Jc = getelementptr inbounds i64, i64* %ln9Ja, i32 0
  store i64 %ln9Jb, i64* %ln9Jc, !tbaa !3
  %ln9Jd = ptrtoint %Main_viewGameState2_closure_struct* @Main_viewGameState2_closure$def to i64
  store i64 %ln9Jd, i64* %R2_Var
  %ln9Jf = load i64*, i64** %Hp_Var
  %ln9Jg = ptrtoint i64* %ln9Jf to i64
  %ln9Jh = add i64 %ln9Jg, -15
  store i64 %ln9Jh, i64* %R1_Var
  %ln9Ji = load i64*, i64** %Sp_Var
  %ln9Jj = getelementptr inbounds i64, i64* %ln9Ji, i32 -2
  %ln9Jk = ptrtoint i64* %ln9Jj to i64
  %ln9Jl = inttoptr i64 %ln9Jk to i64*
  store i64* %ln9Jl, i64** %Sp_Var
  %ln9Jm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s936_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Jn = load i64*, i64** %Sp_Var
  %ln9Jo = load i64*, i64** %Hp_Var
  %ln9Jp = load i64, i64* %R1_Var
  %ln9Jq = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Jm( i64* %Base_Arg, i64* %ln9Jn, i64* %ln9Jo, i64 %ln9Jp, i64 %ln9Jq, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9xF:
  %ln9Jr = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9Jr, !tbaa !5
  br label %c9xC
c9xC:
  %ln9Js = load i64, i64* %ls93Z
  store i64 %ln9Js, i64* %R1_Var
  %ln9Jt = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9Ju = bitcast i64* %ln9Jt to i64*
  %ln9Jv = load i64, i64* %ln9Ju, !tbaa !5
  %ln9Jw = inttoptr i64 %ln9Jv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Jx = load i64*, i64** %Sp_Var
  %ln9Jy = load i64*, i64** %Hp_Var
  %ln9Jz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Jw( i64* %Base_Arg, i64* %ln9Jx, i64* %ln9Jy, i64 %ln9Jz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.2985673 UTC

@s931_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s931_info$def to i8*)
define internal ghccc void @s931_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s931_info$def to i64)),i64 32), i64 4294967301, i64 1, i64 30064771081}>
{
c9xK:
  %ls931 = alloca i64, i32 1
  %ls930 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9JA = load i64*, i64** %Sp_Var
  %ln9JB = getelementptr inbounds i64, i64* %ln9JA, i32 -3
  %ln9JC = ptrtoint i64* %ln9JB to i64
  %ln9JD = icmp ult i64 %ln9JC, %SpLim_Arg
  %ln9JE = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9JD, i1 0 )
  br i1 %ln9JE, label %c9xL, label %c9xM
c9xM:
  %ln9JG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uf_info$def to i64
  %ln9JF = load i64*, i64** %Sp_Var
  %ln9JH = getelementptr inbounds i64, i64* %ln9JF, i32 -3
  store i64 %ln9JG, i64* %ln9JH, !tbaa !2
  %ln9JI = load i64, i64* %R1_Var
  store i64 %ln9JI, i64* %ls931
  %ln9JL = load i64, i64* %R1_Var
  %ln9JM = add i64 %ln9JL, 7
  %ln9JN = inttoptr i64 %ln9JM to i64*
  %ln9JO = load i64, i64* %ln9JN, !tbaa !4
  store i64 %ln9JO, i64* %ls930
  %ln9JP = load i64, i64* %R2_Var
  store i64 %ln9JP, i64* %R1_Var
  %ln9JR = load i64, i64* %ls930
  %ln9JQ = load i64*, i64** %Sp_Var
  %ln9JS = getelementptr inbounds i64, i64* %ln9JQ, i32 -2
  store i64 %ln9JR, i64* %ln9JS, !tbaa !2
  %ln9JU = load i64, i64* %ls931
  %ln9JT = load i64*, i64** %Sp_Var
  %ln9JV = getelementptr inbounds i64, i64* %ln9JT, i32 -1
  store i64 %ln9JU, i64* %ln9JV, !tbaa !2
  %ln9JW = load i64*, i64** %Sp_Var
  %ln9JX = getelementptr inbounds i64, i64* %ln9JW, i32 -3
  %ln9JY = ptrtoint i64* %ln9JX to i64
  %ln9JZ = inttoptr i64 %ln9JY to i64*
  store i64* %ln9JZ, i64** %Sp_Var
  %ln9K0 = load i64, i64* %R1_Var
  %ln9K1 = and i64 %ln9K0, 7
  %ln9K2 = icmp ne i64 %ln9K1, 0
  br i1 %ln9K2, label %u9xT, label %c9ug
c9ug:
  %ln9K4 = load i64, i64* %R1_Var
  %ln9K5 = inttoptr i64 %ln9K4 to i64*
  %ln9K6 = load i64, i64* %ln9K5, !tbaa !4
  %ln9K7 = inttoptr i64 %ln9K6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9K8 = load i64*, i64** %Sp_Var
  %ln9K9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9K7( i64* %Base_Arg, i64* %ln9K8, i64* %Hp_Arg, i64 %ln9K9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9xT:
  %ln9Ka = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Kb = load i64*, i64** %Sp_Var
  %ln9Kc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ka( i64* %Base_Arg, i64* %ln9Kb, i64* %Hp_Arg, i64 %ln9Kc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9xL:
  %ln9Kd = load i64, i64* %R2_Var
  store i64 %ln9Kd, i64* %R2_Var
  %ln9Ke = load i64, i64* %R1_Var
  store i64 %ln9Ke, i64* %R1_Var
  %ln9Kf = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9Kg = bitcast i64* %ln9Kf to i64*
  %ln9Kh = load i64, i64* %ln9Kg, !tbaa !5
  %ln9Ki = inttoptr i64 %ln9Kh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Kj = load i64*, i64** %Sp_Var
  %ln9Kk = load i64, i64* %R1_Var
  %ln9Kl = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ki( i64* %Base_Arg, i64* %ln9Kj, i64* %Hp_Arg, i64 %ln9Kk, i64 %ln9Kl, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.3075467 UTC

@c9uf_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uf_info$def to i8*)
define internal ghccc void @c9uf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9uf_info$def to i64)),i64 32), i64 2, i64 30064771102}>
{
c9uf:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls934 = alloca i64, i32 1
  %ls935 = alloca i64, i32 1
  %ln9Km = load i64, i64* %R1_Var
  %ln9Kn = and i64 %ln9Km, 7
  switch i64 %ln9Kn, label %c9xH [i64 1, label %c9xH
                                  i64 2, label %c9xI]
c9xH:
  %ln9Ko = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln9Kp = add i64 %ln9Ko, 1
  store i64 %ln9Kp, i64* %R1_Var
  %ln9Kq = load i64*, i64** %Sp_Var
  %ln9Kr = getelementptr inbounds i64, i64* %ln9Kq, i32 3
  %ln9Ks = ptrtoint i64* %ln9Kr to i64
  %ln9Kt = inttoptr i64 %ln9Ks to i64*
  store i64* %ln9Kt, i64** %Sp_Var
  %ln9Ku = load i64*, i64** %Sp_Var
  %ln9Kv = getelementptr inbounds i64, i64* %ln9Ku, i32 0
  %ln9Kw = bitcast i64* %ln9Kv to i64*
  %ln9Kx = load i64, i64* %ln9Kw, !tbaa !2
  %ln9Ky = inttoptr i64 %ln9Kx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Kz = load i64*, i64** %Sp_Var
  %ln9KA = load i64*, i64** %Hp_Var
  %ln9KB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ky( i64* %Base_Arg, i64* %ln9Kz, i64* %ln9KA, i64 %ln9KB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9xI:
  %ln9KC = load i64*, i64** %Hp_Var
  %ln9KD = getelementptr inbounds i64, i64* %ln9KC, i32 11
  %ln9KE = ptrtoint i64* %ln9KD to i64
  %ln9KF = inttoptr i64 %ln9KE to i64*
  store i64* %ln9KF, i64** %Hp_Var
  %ln9KG = load i64*, i64** %Hp_Var
  %ln9KH = ptrtoint i64* %ln9KG to i64
  %ln9KI = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9KJ = bitcast i64* %ln9KI to i64*
  %ln9KK = load i64, i64* %ln9KJ, !tbaa !5
  %ln9KL = icmp ugt i64 %ln9KH, %ln9KK
  %ln9KM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9KL, i1 0 )
  br i1 %ln9KM, label %c9xS, label %c9xR
c9xR:
  %ln9KP = load i64, i64* %R1_Var
  %ln9KQ = add i64 %ln9KP, 6
  %ln9KR = inttoptr i64 %ln9KQ to i64*
  %ln9KS = load i64, i64* %ln9KR, !tbaa !4
  store i64 %ln9KS, i64* %ls934
  %ln9KV = load i64, i64* %R1_Var
  %ln9KW = add i64 %ln9KV, 14
  %ln9KX = inttoptr i64 %ln9KW to i64*
  %ln9KY = load i64, i64* %ln9KX, !tbaa !4
  store i64 %ln9KY, i64* %ls935
  %ln9L0 = ptrtoint i8* @stg_ap_2_upd_info to i64
  %ln9KZ = load i64*, i64** %Hp_Var
  %ln9L1 = getelementptr inbounds i64, i64* %ln9KZ, i32 -10
  store i64 %ln9L0, i64* %ln9L1, !tbaa !3
  %ln9L3 = load i64*, i64** %Sp_Var
  %ln9L4 = getelementptr inbounds i64, i64* %ln9L3, i32 2
  %ln9L5 = bitcast i64* %ln9L4 to i64*
  %ln9L6 = load i64, i64* %ln9L5, !tbaa !2
  %ln9L2 = load i64*, i64** %Hp_Var
  %ln9L7 = getelementptr inbounds i64, i64* %ln9L2, i32 -8
  store i64 %ln9L6, i64* %ln9L7, !tbaa !3
  %ln9L9 = load i64, i64* %ls935
  %ln9L8 = load i64*, i64** %Hp_Var
  %ln9La = getelementptr inbounds i64, i64* %ln9L8, i32 -7
  store i64 %ln9L9, i64* %ln9La, !tbaa !3
  %ln9Lc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s93Z_info$def to i64
  %ln9Lb = load i64*, i64** %Hp_Var
  %ln9Ld = getelementptr inbounds i64, i64* %ln9Lb, i32 -6
  store i64 %ln9Lc, i64* %ln9Ld, !tbaa !3
  %ln9Lf = load i64*, i64** %Sp_Var
  %ln9Lg = getelementptr inbounds i64, i64* %ln9Lf, i32 1
  %ln9Lh = bitcast i64* %ln9Lg to i64*
  %ln9Li = load i64, i64* %ln9Lh, !tbaa !2
  %ln9Le = load i64*, i64** %Hp_Var
  %ln9Lj = getelementptr inbounds i64, i64* %ln9Le, i32 -4
  store i64 %ln9Li, i64* %ln9Lj, !tbaa !3
  %ln9Ll = load i64, i64* %ls934
  %ln9Lk = load i64*, i64** %Hp_Var
  %ln9Lm = getelementptr inbounds i64, i64* %ln9Lk, i32 -3
  store i64 %ln9Ll, i64* %ln9Lm, !tbaa !3
  %ln9Lo = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln9Ln = load i64*, i64** %Hp_Var
  %ln9Lp = getelementptr inbounds i64, i64* %ln9Ln, i32 -2
  store i64 %ln9Lo, i64* %ln9Lp, !tbaa !3
  %ln9Lr = load i64*, i64** %Hp_Var
  %ln9Ls = getelementptr inbounds i64, i64* %ln9Lr, i32 -6
  %ln9Lt = ptrtoint i64* %ln9Ls to i64
  %ln9Lq = load i64*, i64** %Hp_Var
  %ln9Lu = getelementptr inbounds i64, i64* %ln9Lq, i32 -1
  store i64 %ln9Lt, i64* %ln9Lu, !tbaa !3
  %ln9Lw = load i64*, i64** %Hp_Var
  %ln9Lx = getelementptr inbounds i64, i64* %ln9Lw, i32 -10
  %ln9Ly = ptrtoint i64* %ln9Lx to i64
  %ln9Lv = load i64*, i64** %Hp_Var
  %ln9Lz = getelementptr inbounds i64, i64* %ln9Lv, i32 0
  store i64 %ln9Ly, i64* %ln9Lz, !tbaa !3
  %ln9LB = load i64*, i64** %Hp_Var
  %ln9LC = ptrtoint i64* %ln9LB to i64
  %ln9LD = add i64 %ln9LC, -14
  store i64 %ln9LD, i64* %R1_Var
  %ln9LE = load i64*, i64** %Sp_Var
  %ln9LF = getelementptr inbounds i64, i64* %ln9LE, i32 3
  %ln9LG = ptrtoint i64* %ln9LF to i64
  %ln9LH = inttoptr i64 %ln9LG to i64*
  store i64* %ln9LH, i64** %Sp_Var
  %ln9LI = load i64*, i64** %Sp_Var
  %ln9LJ = getelementptr inbounds i64, i64* %ln9LI, i32 0
  %ln9LK = bitcast i64* %ln9LJ to i64*
  %ln9LL = load i64, i64* %ln9LK, !tbaa !2
  %ln9LM = inttoptr i64 %ln9LL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9LN = load i64*, i64** %Sp_Var
  %ln9LO = load i64*, i64** %Hp_Var
  %ln9LP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9LM( i64* %Base_Arg, i64* %ln9LN, i64* %ln9LO, i64 %ln9LP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9xS:
  %ln9LQ = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 88, i64* %ln9LQ, !tbaa !5
  %ln9LR = load i64, i64* %R1_Var
  store i64 %ln9LR, i64* %R1_Var
  %ln9LS = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9LT = load i64*, i64** %Sp_Var
  %ln9LU = load i64*, i64** %Hp_Var
  %ln9LV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9LS( i64* %Base_Arg, i64* %ln9LT, i64* %ln9LU, i64 %ln9LV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.3145403 UTC

@Main_viewGameState_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState_info$def to i8*)
define ghccc void @Main_viewGameState_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState_info$def to i64)),i64 32), i64 4294967301, i64 0, i64 133143986190}>
{
c9xW:
  %ls930 = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9LW = load i64, i64* %R2_Var
  store i64 %ln9LW, i64* %ls930
  %ln9LX = load i64*, i64** %Sp_Var
  %ln9LY = getelementptr inbounds i64, i64* %ln9LX, i32 -1
  %ln9LZ = ptrtoint i64* %ln9LY to i64
  %ln9M0 = icmp ult i64 %ln9LZ, %SpLim_Arg
  %ln9M1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9M0, i1 0 )
  br i1 %ln9M1, label %c9xX, label %c9xY
c9xY:
  %ln9M2 = load i64*, i64** %Hp_Var
  %ln9M3 = getelementptr inbounds i64, i64* %ln9M2, i32 2
  %ln9M4 = ptrtoint i64* %ln9M3 to i64
  %ln9M5 = inttoptr i64 %ln9M4 to i64*
  store i64* %ln9M5, i64** %Hp_Var
  %ln9M6 = load i64*, i64** %Hp_Var
  %ln9M7 = ptrtoint i64* %ln9M6 to i64
  %ln9M8 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9M9 = bitcast i64* %ln9M8 to i64*
  %ln9Ma = load i64, i64* %ln9M9, !tbaa !5
  %ln9Mb = icmp ugt i64 %ln9M7, %ln9Ma
  %ln9Mc = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Mb, i1 0 )
  br i1 %ln9Mc, label %c9y0, label %c9xZ
c9xZ:
  %ln9Me = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s931_info$def to i64
  %ln9Md = load i64*, i64** %Hp_Var
  %ln9Mf = getelementptr inbounds i64, i64* %ln9Md, i32 -1
  store i64 %ln9Me, i64* %ln9Mf, !tbaa !3
  %ln9Mh = load i64, i64* %ls930
  %ln9Mg = load i64*, i64** %Hp_Var
  %ln9Mi = getelementptr inbounds i64, i64* %ln9Mg, i32 0
  store i64 %ln9Mh, i64* %ln9Mi, !tbaa !3
  %ln9Mk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9xU_info$def to i64
  %ln9Mj = load i64*, i64** %Sp_Var
  %ln9Ml = getelementptr inbounds i64, i64* %ln9Mj, i32 -1
  store i64 %ln9Mk, i64* %ln9Ml, !tbaa !2
  %ln9Mm = ptrtoint %Main_viewGameState1_closure_struct* @Main_viewGameState1_closure$def to i64
  store i64 %ln9Mm, i64* %R2_Var
  %ln9Mo = load i64*, i64** %Hp_Var
  %ln9Mp = ptrtoint i64* %ln9Mo to i64
  %ln9Mq = add i64 %ln9Mp, -7
  store i64 %ln9Mq, i64* %R1_Var
  %ln9Mr = load i64*, i64** %Sp_Var
  %ln9Ms = getelementptr inbounds i64, i64* %ln9Mr, i32 -1
  %ln9Mt = ptrtoint i64* %ln9Ms to i64
  %ln9Mu = inttoptr i64 %ln9Mt to i64*
  store i64* %ln9Mu, i64** %Sp_Var
  %ln9Mv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s931_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Mw = load i64*, i64** %Sp_Var
  %ln9Mx = load i64*, i64** %Hp_Var
  %ln9My = load i64, i64* %R1_Var
  %ln9Mz = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Mv( i64* %Base_Arg, i64* %ln9Mw, i64* %ln9Mx, i64 %ln9My, i64 %ln9Mz, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9y0:
  %ln9MA = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9MA, !tbaa !5
  br label %c9xX
c9xX:
  %ln9MB = load i64, i64* %ls930
  store i64 %ln9MB, i64* %R2_Var
  %ln9MC = ptrtoint %Main_viewGameState_closure_struct* @Main_viewGameState_closure$def to i64
  store i64 %ln9MC, i64* %R1_Var
  %ln9MD = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9ME = bitcast i64* %ln9MD to i64*
  %ln9MF = load i64, i64* %ln9ME, !tbaa !5
  %ln9MG = inttoptr i64 %ln9MF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9MH = load i64*, i64** %Sp_Var
  %ln9MI = load i64*, i64** %Hp_Var
  %ln9MJ = load i64, i64* %R1_Var
  %ln9MK = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9MG( i64* %Base_Arg, i64* %ln9MH, i64* %ln9MI, i64 %ln9MJ, i64 %ln9MK, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.3215293 UTC

@c9xU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9xU_info$def to i8*)
define internal ghccc void @c9xU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 30}>
{
c9xU:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln9ML = load i64*, i64** %Sp_Var
  %ln9MM = getelementptr inbounds i64, i64* %ln9ML, i32 1
  %ln9MN = ptrtoint i64* %ln9MM to i64
  %ln9MO = inttoptr i64 %ln9MN to i64*
  store i64* %ln9MO, i64** %Sp_Var
  %ln9MP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameStatezuf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9MQ = load i64*, i64** %Sp_Var
  %ln9MR = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9MP( i64* %Base_Arg, i64* %ln9MQ, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9MR, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.325523 UTC

%Main_xWidth_closure_struct = type <{i64, i64}>
@Main_xWidth_closure$def = internal global %Main_xWidth_closure_struct<{i64 ptrtoint (i8* @base_GHCziInt_I8zh_con_info to i64), i64 16}>
@Main_xWidth_closure = alias i8, bitcast (%Main_xWidth_closure_struct* @Main_xWidth_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3295199 UTC

%Main_fieldSizze2_closure_struct = type <{i64, i64}>
@Main_fieldSizze2_closure$def = internal global %Main_fieldSizze2_closure_struct<{i64 ptrtoint (i8* @base_GHCziInt_I8zh_con_info to i64), i64 15}>
@Main_fieldSizze2_closure = alias i8, bitcast (%Main_fieldSizze2_closure_struct* @Main_fieldSizze2_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3355131 UTC

%Main_fieldSizze1_closure_struct = type <{i64, i64, i64, i64}>
@Main_fieldSizze1_closure$def = internal global %Main_fieldSizze1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64), i64 add (i64 ptrtoint (%Main_fieldSizze2_closure_struct* @Main_fieldSizze2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_xWidth_closure_struct* @Main_xWidth_closure$def to i64),i64 1), i64 3}>
@Main_fieldSizze1_closure = alias i8, bitcast (%Main_fieldSizze1_closure_struct* @Main_fieldSizze1_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3395004 UTC

%Main_fieldSizze4_closure_struct = type <{i64, i64}>
@Main_fieldSizze4_closure$def = internal global %Main_fieldSizze4_closure_struct<{i64 ptrtoint (i8* @base_GHCziInt_I8zh_con_info to i64), i64 0}>
@Main_fieldSizze4_closure = alias i8, bitcast (%Main_fieldSizze4_closure_struct* @Main_fieldSizze4_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3434974 UTC

%Main_fieldSizze3_closure_struct = type <{i64, i64, i64, i64}>
@Main_fieldSizze3_closure$def = internal global %Main_fieldSizze3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64), i64 add (i64 ptrtoint (%Main_fieldSizze4_closure_struct* @Main_fieldSizze4_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_fieldSizze4_closure_struct* @Main_fieldSizze4_closure$def to i64),i64 1), i64 3}>
@Main_fieldSizze3_closure = alias i8, bitcast (%Main_fieldSizze3_closure_struct* @Main_fieldSizze3_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3474853 UTC

%Main_fieldSizze_closure_struct = type <{i64, i64, i64, i64}>
@Main_fieldSizze_closure$def = internal global %Main_fieldSizze_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64), i64 add (i64 ptrtoint (%Main_fieldSizze3_closure_struct* @Main_fieldSizze3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_fieldSizze1_closure_struct* @Main_fieldSizze1_closure$def to i64),i64 1), i64 3}>
@Main_fieldSizze_closure = alias i8, bitcast (%Main_fieldSizze_closure_struct* @Main_fieldSizze_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3494828 UTC

%Main_yWidth_closure_struct = type <{i64, i64}>
@Main_yWidth_closure$def = internal global %Main_yWidth_closure_struct<{i64 ptrtoint (i8* @base_GHCziInt_I8zh_con_info to i64), i64 17}>
@Main_yWidth_closure = alias i8, bitcast (%Main_yWidth_closure_struct* @Main_yWidth_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3524775 UTC

%Main_zdtrModule2_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule2_bytes$def = internal constant %Main_zdtrModule2_bytes_struct<{[5 x i8] [i8 77, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule2_bytes = alias i8, bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3544782 UTC

%Main_zdtrModule1_closure_struct = type <{i64, i64}>
@Main_zdtrModule1_closure$def = internal global %Main_zdtrModule1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i64)}>
@Main_zdtrModule1_closure = alias i8, bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3574722 UTC

%Main_zdtrModule4_bytes_struct = type <{[5 x i8]}>
@Main_zdtrModule4_bytes$def = internal constant %Main_zdtrModule4_bytes_struct<{[5 x i8] [i8 109, i8 97, i8 105, i8 110, i8 0]}>, align 1
@Main_zdtrModule4_bytes = alias i8, bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3604669 UTC

%Main_zdtrModule3_closure_struct = type <{i64, i64}>
@Main_zdtrModule3_closure$def = internal global %Main_zdtrModule3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i64)}>
@Main_zdtrModule3_closure = alias i8, bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3644587 UTC

%Main_zdtrModule_closure_struct = type <{i64, i64, i64, i64}>
@Main_zdtrModule_closure$def = internal global %Main_zdtrModule_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Module_con_info to i64), i64 add (i64 ptrtoint (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i64),i64 1), i64 3}>
@Main_zdtrModule_closure = alias i8, bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3664568 UTC

%r92a_closure_struct = type <{i64, i64}>
@r92a_closure$def = internal global %r92a_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Izh_con_info to i64), i64 74}>
@r92a_closure = internal alias i8, bitcast (%r92a_closure_struct* @r92a_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.369454 UTC

%r92b_closure_struct = type <{i64, i64}>
@r92b_closure$def = internal global %r92b_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Izh_con_info to i64), i64 40}>
@r92b_closure = internal alias i8, bitcast (%r92b_closure_struct* @r92b_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3724455 UTC

%r92c_closure_struct = type <{i64, i64}>
@r92c_closure$def = internal global %r92c_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Izh_con_info to i64), i64 67}>
@r92c_closure = internal alias i8, bitcast (%r92c_closure_struct* @r92c_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3754427 UTC

%r92d_closure_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64, i64}>
@r92d_closure$def = internal global %r92d_closure_struct<{i64 ptrtoint (i8* @base_GHCziStackziTypes_SrcLoc_con_info to i64), i64 ptrtoint (%Main_arrayByIndex12_closure_struct* @Main_arrayByIndex12_closure$def to i64), i64 ptrtoint (%Main_arrayByIndex10_closure_struct* @Main_arrayByIndex10_closure$def to i64), i64 ptrtoint (%Main_arrayByIndex8_closure_struct* @Main_arrayByIndex8_closure$def to i64), i64 add (i64 ptrtoint (%r92a_closure_struct* @r92a_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r92b_closure_struct* @r92b_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r92a_closure_struct* @r92a_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%r92c_closure_struct* @r92c_closure$def to i64),i64 1), i64 0}>
@r92d_closure = internal alias i8, bitcast (%r92d_closure_struct* @r92d_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3784399 UTC

%r92e_closure_struct = type <{i64, i64, i64, i64, i64}>
@r92e_closure$def = internal global %r92e_closure_struct<{i64 ptrtoint (i8* @base_GHCziStackziTypes_PushCallStack_con_info to i64), i64 ptrtoint (%Main_arrayByIndex14_closure_struct* @Main_arrayByIndex14_closure$def to i64), i64 add (i64 ptrtoint (%r92d_closure_struct* @r92d_closure$def to i64),i64 1), i64 add (i64 ptrtoint (i8* @base_GHCziStackziTypes_EmptyCallStack_closure to i64),i64 1), i64 0}>
@r92e_closure = internal alias i8, bitcast (%r92e_closure_struct* @r92e_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3824311 UTC

%r92f_bytes_struct = type <{[20 x i8]}>
@r92f_bytes$def = internal constant %r92f_bytes_struct<{[20 x i8] [i8 78, i8 101, i8 103, i8 97, i8 116, i8 105, i8 118, i8 101, i8 32, i8 114, i8 97, i8 110, i8 103, i8 101, i8 32, i8 115, i8 105, i8 122, i8 101, i8 0]}>, align 1
@r92f_bytes = internal alias i8, bitcast (%r92f_bytes_struct* @r92f_bytes$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3854251 UTC

%Main_arrayByIndex19_closure_struct = type <{i64, i64, i64, i64}>
@Main_arrayByIndex19_closure$def = internal global %Main_arrayByIndex19_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex19_info$def to i64), i64 0, i64 0, i64 0}>
@Main_arrayByIndex19_closure = alias i8, bitcast (%Main_arrayByIndex19_closure_struct* @Main_arrayByIndex19_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.3894195 UTC

@Main_arrayByIndex19_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex19_info$def to i8*)
define ghccc void @Main_arrayByIndex19_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex19_info$def to i64)),i64 16), i64 0, i64 554050781205}>
{
c9N0:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %lc9MV = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9N6 = load i64*, i64** %Sp_Var
  %ln9N7 = getelementptr inbounds i64, i64* %ln9N6, i32 -3
  %ln9N8 = ptrtoint i64* %ln9N7 to i64
  %ln9N9 = icmp ult i64 %ln9N8, %SpLim_Arg
  %ln9Na = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9N9, i1 0 )
  br i1 %ln9Na, label %c9N1, label %c9N2
c9N2:
  %ln9Nb = ptrtoint i64* %Base_Arg to i64
  %ln9Nc = inttoptr i64 %ln9Nb to i8*
  %ln9Nd = load i64, i64* %R1_Var
  %ln9Ne = inttoptr i64 %ln9Nd to i8*
  %ln9Nf = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  %ln9Ng = call ccc i8* (i8*, i8*) %ln9Nf( i8* %ln9Nc, i8* %ln9Ne ) nounwind
  %ln9Nh = ptrtoint i8* %ln9Ng to i64
  store i64 %ln9Nh, i64* %lc9MV
  %ln9Ni = load i64, i64* %lc9MV
  %ln9Nj = icmp eq i64 %ln9Ni, 0
  br i1 %ln9Nj, label %c9MX, label %c9MW
c9MW:
  %ln9Nl = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9Nk = load i64*, i64** %Sp_Var
  %ln9Nm = getelementptr inbounds i64, i64* %ln9Nk, i32 -2
  store i64 %ln9Nl, i64* %ln9Nm, !tbaa !2
  %ln9No = load i64, i64* %lc9MV
  %ln9Nn = load i64*, i64** %Sp_Var
  %ln9Np = getelementptr inbounds i64, i64* %ln9Nn, i32 -1
  store i64 %ln9No, i64* %ln9Np, !tbaa !2
  %ln9Nr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9MY_info$def to i64
  %ln9Nq = load i64*, i64** %Sp_Var
  %ln9Ns = getelementptr inbounds i64, i64* %ln9Nq, i32 -3
  store i64 %ln9Nr, i64* %ln9Ns, !tbaa !2
  %ln9Nt = ptrtoint %r92f_bytes_struct* @r92f_bytes$def to i64
  store i64 %ln9Nt, i64* %R2_Var
  %ln9Nu = load i64*, i64** %Sp_Var
  %ln9Nv = getelementptr inbounds i64, i64* %ln9Nu, i32 -3
  %ln9Nw = ptrtoint i64* %ln9Nv to i64
  %ln9Nx = inttoptr i64 %ln9Nw to i64*
  store i64* %ln9Nx, i64** %Sp_Var
  %ln9Ny = bitcast i8* @ghczmprim_GHCziCString_unpackCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Nz = load i64*, i64** %Sp_Var
  %ln9NA = load i64, i64* %R1_Var
  %ln9NB = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ny( i64* %Base_Arg, i64* %ln9Nz, i64* %Hp_Arg, i64 %ln9NA, i64 %ln9NB, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9MX:
  %ln9ND = load i64, i64* %R1_Var
  %ln9NE = inttoptr i64 %ln9ND to i64*
  %ln9NF = load i64, i64* %ln9NE, !tbaa !4
  %ln9NG = inttoptr i64 %ln9NF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9NH = load i64*, i64** %Sp_Var
  %ln9NI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9NG( i64* %Base_Arg, i64* %ln9NH, i64* %Hp_Arg, i64 %ln9NI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9N1:
  %ln9NJ = load i64, i64* %R1_Var
  store i64 %ln9NJ, i64* %R1_Var
  %ln9NK = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9NL = bitcast i64* %ln9NK to i64*
  %ln9NM = load i64, i64* %ln9NL, !tbaa !5
  %ln9NN = inttoptr i64 %ln9NM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9NO = load i64*, i64** %Sp_Var
  %ln9NP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9NN( i64* %Base_Arg, i64* %ln9NO, i64* %Hp_Arg, i64 %ln9NP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.3954095 UTC

@c9MY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9MY_info$def to i8*)
define internal ghccc void @c9MY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9MY_info$def to i64)),i64 16), i64 0, i64 554050781214}>
{
c9MY:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R3_Var
  %ln9NQ = ptrtoint %r92e_closure_struct* @r92e_closure$def to i64
  %ln9NR = add i64 %ln9NQ, 2
  store i64 %ln9NR, i64* %R2_Var
  %ln9NS = load i64*, i64** %Sp_Var
  %ln9NT = getelementptr inbounds i64, i64* %ln9NS, i32 1
  %ln9NU = ptrtoint i64* %ln9NT to i64
  %ln9NV = inttoptr i64 %ln9NU to i64*
  store i64* %ln9NV, i64** %Sp_Var
  %ln9NW = bitcast i8* @base_GHCziErr_error_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9NX = load i64*, i64** %Sp_Var
  %ln9NY = load i64, i64* %R2_Var
  %ln9NZ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9NW( i64* %Base_Arg, i64* %ln9NX, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9NY, i64 %ln9NZ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.399407 UTC

%r92g_closure_struct = type <{i64, i64}>
@r92g_closure$def = internal global %r92g_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Izh_con_info to i64), i64 0}>
@r92g_closure = internal alias i8, bitcast (%r92g_closure_struct* @r92g_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.4043966 UTC

%r92h_closure_struct = type <{i64, i64}>
@r92h_closure$def = internal global %r92h_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r92h_info$def to i64), i64 0}>
@r92h_closure = internal alias i8, bitcast (%r92h_closure_struct* @r92h_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.4073913 UTC

@s948_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s948_info$def to i8*)
define internal ghccc void @s948_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s948_info$def to i64)),i64 8), i64 1, i64 4294967312}>
{
c9Oi:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9OG = load i64*, i64** %Sp_Var
  %ln9OH = getelementptr inbounds i64, i64* %ln9OG, i32 -2
  %ln9OI = ptrtoint i64* %ln9OH to i64
  %ln9OJ = icmp ult i64 %ln9OI, %SpLim_Arg
  %ln9OK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9OJ, i1 0 )
  br i1 %ln9OK, label %c9Oj, label %c9Ok
c9Ok:
  %ln9OM = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9OL = load i64*, i64** %Sp_Var
  %ln9ON = getelementptr inbounds i64, i64* %ln9OL, i32 -2
  store i64 %ln9OM, i64* %ln9ON, !tbaa !2
  %ln9OP = load i64, i64* %R1_Var
  %ln9OO = load i64*, i64** %Sp_Var
  %ln9OQ = getelementptr inbounds i64, i64* %ln9OO, i32 -1
  store i64 %ln9OP, i64* %ln9OQ, !tbaa !2
  %ln9OR = ptrtoint %Main_arrayByIndex16_closure_struct* @Main_arrayByIndex16_closure$def to i64
  store i64 %ln9OR, i64* %R3_Var
  %ln9OU = load i64, i64* %R1_Var
  %ln9OV = add i64 %ln9OU, 16
  %ln9OW = inttoptr i64 %ln9OV to i64*
  %ln9OX = load i64, i64* %ln9OW, !tbaa !4
  store i64 %ln9OX, i64* %R2_Var
  %ln9OY = load i64*, i64** %Sp_Var
  %ln9OZ = getelementptr inbounds i64, i64* %ln9OY, i32 -2
  %ln9P0 = ptrtoint i64* %ln9OZ to i64
  %ln9P1 = inttoptr i64 %ln9P0 to i64*
  store i64* %ln9P1, i64** %Sp_Var
  %ln9P2 = bitcast i8* @base_GHCziBase_zpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9P3 = load i64*, i64** %Sp_Var
  %ln9P4 = load i64, i64* %R1_Var
  %ln9P5 = load i64, i64* %R2_Var
  %ln9P6 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9P2( i64* %Base_Arg, i64* %ln9P3, i64* %Hp_Arg, i64 %ln9P4, i64 %ln9P5, i64 %ln9P6, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Oj:
  %ln9P7 = load i64, i64* %R1_Var
  store i64 %ln9P7, i64* %R1_Var
  %ln9P8 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9P9 = bitcast i64* %ln9P8 to i64*
  %ln9Pa = load i64, i64* %ln9P9, !tbaa !5
  %ln9Pb = inttoptr i64 %ln9Pa to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Pc = load i64*, i64** %Sp_Var
  %ln9Pd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Pb( i64* %Base_Arg, i64* %ln9Pc, i64* %Hp_Arg, i64 %ln9Pd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.4143854 UTC

@s949_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s949_info$def to i8*)
define internal ghccc void @s949_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s949_info$def to i64)),i64 8), i64 1, i64 4294967312}>
{
c9Ol:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls943 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9Pe = load i64*, i64** %Hp_Var
  %ln9Pf = getelementptr inbounds i64, i64* %ln9Pe, i32 3
  %ln9Pg = ptrtoint i64* %ln9Pf to i64
  %ln9Ph = inttoptr i64 %ln9Pg to i64*
  store i64* %ln9Ph, i64** %Hp_Var
  %ln9Pi = load i64*, i64** %Hp_Var
  %ln9Pj = ptrtoint i64* %ln9Pi to i64
  %ln9Pk = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Pl = bitcast i64* %ln9Pk to i64*
  %ln9Pm = load i64, i64* %ln9Pl, !tbaa !5
  %ln9Pn = icmp ugt i64 %ln9Pj, %ln9Pm
  %ln9Po = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Pn, i1 0 )
  br i1 %ln9Po, label %c9Op, label %c9Oo
c9Oo:
  %ln9Pr = load i64, i64* %R1_Var
  %ln9Ps = add i64 %ln9Pr, 16
  %ln9Pt = inttoptr i64 %ln9Ps to i64*
  %ln9Pu = load i64, i64* %ln9Pt, !tbaa !4
  store i64 %ln9Pu, i64* %ls943
  %ln9Pw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s948_info$def to i64
  %ln9Pv = load i64*, i64** %Hp_Var
  %ln9Px = getelementptr inbounds i64, i64* %ln9Pv, i32 -2
  store i64 %ln9Pw, i64* %ln9Px, !tbaa !3
  %ln9Pz = load i64, i64* %ls943
  %ln9Py = load i64*, i64** %Hp_Var
  %ln9PA = getelementptr inbounds i64, i64* %ln9Py, i32 0
  store i64 %ln9Pz, i64* %ln9PA, !tbaa !3
  %ln9PB = load i64*, i64** %Hp_Var
  %ln9PC = getelementptr inbounds i64, i64* %ln9PB, i32 -2
  %ln9PD = ptrtoint i64* %ln9PC to i64
  store i64 %ln9PD, i64* %R3_Var
  %ln9PE = ptrtoint %Main_arrayByIndex18_bytes_struct* @Main_arrayByIndex18_bytes$def to i64
  store i64 %ln9PE, i64* %R2_Var
  %ln9PF = bitcast i8* @ghczmprim_GHCziCString_unpackAppendCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9PG = load i64*, i64** %Hp_Var
  %ln9PH = load i64, i64* %R1_Var
  %ln9PI = load i64, i64* %R2_Var
  %ln9PJ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9PF( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9PG, i64 %ln9PH, i64 %ln9PI, i64 %ln9PJ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Op:
  %ln9PK = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9PK, !tbaa !5
  %ln9PL = load i64, i64* %R1_Var
  store i64 %ln9PL, i64* %R1_Var
  %ln9PM = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9PN = bitcast i64* %ln9PM to i64*
  %ln9PO = load i64, i64* %ln9PN, !tbaa !5
  %ln9PP = inttoptr i64 %ln9PO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9PQ = load i64*, i64** %Hp_Var
  %ln9PR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9PP( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9PQ, i64 %ln9PR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.4213693 UTC

@s94a_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s94a_info$def to i8*)
define internal ghccc void @s94a_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s94a_info$def to i64)),i64 8), i64 4294967297, i64 4294967315}>
{
c9Oq:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9PS = load i64*, i64** %Sp_Var
  %ln9PT = getelementptr inbounds i64, i64* %ln9PS, i32 -4
  %ln9PU = ptrtoint i64* %ln9PT to i64
  %ln9PV = icmp ult i64 %ln9PU, %SpLim_Arg
  %ln9PW = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9PV, i1 0 )
  br i1 %ln9PW, label %c9Or, label %c9Os
c9Os:
  %ln9PY = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9PX = load i64*, i64** %Sp_Var
  %ln9PZ = getelementptr inbounds i64, i64* %ln9PX, i32 -2
  store i64 %ln9PY, i64* %ln9PZ, !tbaa !2
  %ln9Q1 = load i64, i64* %R1_Var
  %ln9Q0 = load i64*, i64** %Sp_Var
  %ln9Q2 = getelementptr inbounds i64, i64* %ln9Q0, i32 -1
  store i64 %ln9Q1, i64* %ln9Q2, !tbaa !2
  %ln9Q4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9O8_info$def to i64
  %ln9Q3 = load i64*, i64** %Sp_Var
  %ln9Q5 = getelementptr inbounds i64, i64* %ln9Q3, i32 -4
  store i64 %ln9Q4, i64* %ln9Q5, !tbaa !2
  %ln9Q6 = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln9Q7 = add i64 %ln9Q6, 1
  store i64 %ln9Q7, i64* %R4_Var
  %ln9Qa = load i64, i64* %R1_Var
  %ln9Qb = add i64 %ln9Qa, 24
  %ln9Qc = inttoptr i64 %ln9Qb to i64*
  %ln9Qd = load i64, i64* %ln9Qc, !tbaa !4
  store i64 %ln9Qd, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln9Qh = load i64, i64* %R1_Var
  %ln9Qi = add i64 %ln9Qh, 16
  %ln9Qj = inttoptr i64 %ln9Qi to i64*
  %ln9Qk = load i64, i64* %ln9Qj, !tbaa !4
  %ln9Qe = load i64*, i64** %Sp_Var
  %ln9Ql = getelementptr inbounds i64, i64* %ln9Qe, i32 -3
  store i64 %ln9Qk, i64* %ln9Ql, !tbaa !2
  %ln9Qm = load i64*, i64** %Sp_Var
  %ln9Qn = getelementptr inbounds i64, i64* %ln9Qm, i32 -4
  %ln9Qo = ptrtoint i64* %ln9Qn to i64
  %ln9Qp = inttoptr i64 %ln9Qo to i64*
  store i64* %ln9Qp, i64** %Sp_Var
  %ln9Qq = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Qr = load i64*, i64** %Sp_Var
  %ln9Qs = load i64, i64* %R1_Var
  %ln9Qt = load i64, i64* %R2_Var
  %ln9Qu = load i64, i64* %R3_Var
  %ln9Qv = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Qq( i64* %Base_Arg, i64* %ln9Qr, i64* %Hp_Arg, i64 %ln9Qs, i64 %ln9Qt, i64 %ln9Qu, i64 %ln9Qv, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Or:
  %ln9Qw = load i64, i64* %R1_Var
  store i64 %ln9Qw, i64* %R1_Var
  %ln9Qx = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9Qy = bitcast i64* %ln9Qx to i64*
  %ln9Qz = load i64, i64* %ln9Qy, !tbaa !5
  %ln9QA = inttoptr i64 %ln9Qz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9QB = load i64*, i64** %Sp_Var
  %ln9QC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9QA( i64* %Base_Arg, i64* %ln9QB, i64* %Hp_Arg, i64 %ln9QC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.4283629 UTC

@c9O8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9O8_info$def to i8*)
define internal ghccc void @c9O8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9O8_info$def to i64)),i64 8), i64 1, i64 4294967326}>
{
c9O8:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9QD = load i64*, i64** %Hp_Var
  %ln9QE = getelementptr inbounds i64, i64* %ln9QD, i32 3
  %ln9QF = ptrtoint i64* %ln9QE to i64
  %ln9QG = inttoptr i64 %ln9QF to i64*
  store i64* %ln9QG, i64** %Hp_Var
  %ln9QH = load i64*, i64** %Hp_Var
  %ln9QI = ptrtoint i64* %ln9QH to i64
  %ln9QJ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9QK = bitcast i64* %ln9QJ to i64*
  %ln9QL = load i64, i64* %ln9QK, !tbaa !5
  %ln9QM = icmp ugt i64 %ln9QI, %ln9QL
  %ln9QN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9QM, i1 0 )
  br i1 %ln9QN, label %c9Ov, label %c9Ou
c9Ou:
  %ln9QP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s949_info$def to i64
  %ln9QO = load i64*, i64** %Hp_Var
  %ln9QQ = getelementptr inbounds i64, i64* %ln9QO, i32 -2
  store i64 %ln9QP, i64* %ln9QQ, !tbaa !3
  %ln9QS = load i64*, i64** %Sp_Var
  %ln9QT = getelementptr inbounds i64, i64* %ln9QS, i32 1
  %ln9QU = bitcast i64* %ln9QT to i64*
  %ln9QV = load i64, i64* %ln9QU, !tbaa !2
  %ln9QR = load i64*, i64** %Hp_Var
  %ln9QW = getelementptr inbounds i64, i64* %ln9QR, i32 0
  store i64 %ln9QV, i64* %ln9QW, !tbaa !3
  %ln9QX = load i64, i64* %R2_Var
  store i64 %ln9QX, i64* %R4_Var
  %ln9QY = load i64, i64* %R1_Var
  store i64 %ln9QY, i64* %R3_Var
  %ln9QZ = load i64*, i64** %Hp_Var
  %ln9R0 = getelementptr inbounds i64, i64* %ln9QZ, i32 -2
  %ln9R1 = ptrtoint i64* %ln9R0 to i64
  store i64 %ln9R1, i64* %R2_Var
  %ln9R2 = load i64*, i64** %Sp_Var
  %ln9R3 = getelementptr inbounds i64, i64* %ln9R2, i32 2
  %ln9R4 = ptrtoint i64* %ln9R3 to i64
  %ln9R5 = inttoptr i64 %ln9R4 to i64*
  store i64* %ln9R5, i64** %Sp_Var
  %ln9R6 = bitcast i8* @base_GHCziBase_zpzpzuzdszpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9R7 = load i64*, i64** %Sp_Var
  %ln9R8 = load i64*, i64** %Hp_Var
  %ln9R9 = load i64, i64* %R1_Var
  %ln9Ra = load i64, i64* %R2_Var
  %ln9Rb = load i64, i64* %R3_Var
  %ln9Rc = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9R6( i64* %Base_Arg, i64* %ln9R7, i64* %ln9R8, i64 %ln9R9, i64 %ln9Ra, i64 %ln9Rb, i64 %ln9Rc, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Ov:
  %ln9Rd = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9Rd, !tbaa !5
  %ln9Re = load i64, i64* %R2_Var
  store i64 %ln9Re, i64* %R2_Var
  %ln9Rf = load i64, i64* %R1_Var
  store i64 %ln9Rf, i64* %R1_Var
  %ln9Rg = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Rh = load i64*, i64** %Sp_Var
  %ln9Ri = load i64*, i64** %Hp_Var
  %ln9Rj = load i64, i64* %R1_Var
  %ln9Rk = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Rg( i64* %Base_Arg, i64* %ln9Rh, i64* %ln9Ri, i64 %ln9Rj, i64 %ln9Rk, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.4353474 UTC

@r92h_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r92h_info$def to i8*)
define internal ghccc void @r92h_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r92h_info$def to i64)),i64 8), i64 8589934606, i64 0, i64 2229088026638}>
{
c9Oy:
  %ls944 = alloca i64, i32 1
  %ls943 = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9Rl = load i64, i64* %R3_Var
  store i64 %ln9Rl, i64* %ls944
  %ln9Rm = load i64, i64* %R2_Var
  store i64 %ln9Rm, i64* %ls943
  %ln9Rn = load i64*, i64** %Sp_Var
  %ln9Ro = getelementptr inbounds i64, i64* %ln9Rn, i32 -1
  %ln9Rp = ptrtoint i64* %ln9Ro to i64
  %ln9Rq = icmp ult i64 %ln9Rp, %SpLim_Arg
  %ln9Rr = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9Rq, i1 0 )
  br i1 %ln9Rr, label %c9Oz, label %c9OA
c9OA:
  %ln9Rs = load i64*, i64** %Hp_Var
  %ln9Rt = getelementptr inbounds i64, i64* %ln9Rs, i32 4
  %ln9Ru = ptrtoint i64* %ln9Rt to i64
  %ln9Rv = inttoptr i64 %ln9Ru to i64*
  store i64* %ln9Rv, i64** %Hp_Var
  %ln9Rw = load i64*, i64** %Hp_Var
  %ln9Rx = ptrtoint i64* %ln9Rw to i64
  %ln9Ry = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Rz = bitcast i64* %ln9Ry to i64*
  %ln9RA = load i64, i64* %ln9Rz, !tbaa !5
  %ln9RB = icmp ugt i64 %ln9Rx, %ln9RA
  %ln9RC = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln9RB, i1 0 )
  br i1 %ln9RC, label %c9OC, label %c9OB
c9OB:
  %ln9RE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s94a_info$def to i64
  %ln9RD = load i64*, i64** %Hp_Var
  %ln9RF = getelementptr inbounds i64, i64* %ln9RD, i32 -3
  store i64 %ln9RE, i64* %ln9RF, !tbaa !3
  %ln9RH = load i64, i64* %ls943
  %ln9RG = load i64*, i64** %Hp_Var
  %ln9RI = getelementptr inbounds i64, i64* %ln9RG, i32 -1
  store i64 %ln9RH, i64* %ln9RI, !tbaa !3
  %ln9RK = load i64, i64* %ls944
  %ln9RJ = load i64*, i64** %Hp_Var
  %ln9RL = getelementptr inbounds i64, i64* %ln9RJ, i32 0
  store i64 %ln9RK, i64* %ln9RL, !tbaa !3
  %ln9RN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ow_info$def to i64
  %ln9RM = load i64*, i64** %Sp_Var
  %ln9RO = getelementptr inbounds i64, i64* %ln9RM, i32 -1
  store i64 %ln9RN, i64* %ln9RO, !tbaa !2
  %ln9RP = load i64*, i64** %Hp_Var
  %ln9RQ = getelementptr inbounds i64, i64* %ln9RP, i32 -3
  %ln9RR = ptrtoint i64* %ln9RQ to i64
  store i64 %ln9RR, i64* %R3_Var
  %ln9RS = ptrtoint %Main_arrayByIndex1_bytes_struct* @Main_arrayByIndex1_bytes$def to i64
  store i64 %ln9RS, i64* %R2_Var
  %ln9RT = load i64*, i64** %Sp_Var
  %ln9RU = getelementptr inbounds i64, i64* %ln9RT, i32 -1
  %ln9RV = ptrtoint i64* %ln9RU to i64
  %ln9RW = inttoptr i64 %ln9RV to i64*
  store i64* %ln9RW, i64** %Sp_Var
  %ln9RX = bitcast i8* @ghczmprim_GHCziCString_unpackAppendCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9RY = load i64*, i64** %Sp_Var
  %ln9RZ = load i64*, i64** %Hp_Var
  %ln9S0 = load i64, i64* %R1_Var
  %ln9S1 = load i64, i64* %R2_Var
  %ln9S2 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9RX( i64* %Base_Arg, i64* %ln9RY, i64* %ln9RZ, i64 %ln9S0, i64 %ln9S1, i64 %ln9S2, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9OC:
  %ln9S3 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %ln9S3, !tbaa !5
  br label %c9Oz
c9Oz:
  %ln9S4 = load i64, i64* %ls944
  store i64 %ln9S4, i64* %R3_Var
  %ln9S5 = load i64, i64* %ls943
  store i64 %ln9S5, i64* %R2_Var
  %ln9S6 = ptrtoint %r92h_closure_struct* @r92h_closure$def to i64
  store i64 %ln9S6, i64* %R1_Var
  %ln9S7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9S8 = bitcast i64* %ln9S7 to i64*
  %ln9S9 = load i64, i64* %ln9S8, !tbaa !5
  %ln9Sa = inttoptr i64 %ln9S9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Sb = load i64*, i64** %Sp_Var
  %ln9Sc = load i64*, i64** %Hp_Var
  %ln9Sd = load i64, i64* %R1_Var
  %ln9Se = load i64, i64* %R2_Var
  %ln9Sf = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Sa( i64* %Base_Arg, i64* %ln9Sb, i64* %ln9Sc, i64 %ln9Sd, i64 %ln9Se, i64 %ln9Sf, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.4413386 UTC

@c9Ow_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ow_info$def to i8*)
define internal ghccc void @c9Ow_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ow_info$def to i64)),i64 16), i64 0, i64 12884901918}>
{
c9Ow:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R3_Var
  %ln9Sg = ptrtoint %Main_arrayByIndex2_closure_struct* @Main_arrayByIndex2_closure$def to i64
  %ln9Sh = add i64 %ln9Sg, 2
  store i64 %ln9Sh, i64* %R2_Var
  %ln9Si = load i64*, i64** %Sp_Var
  %ln9Sj = getelementptr inbounds i64, i64* %ln9Si, i32 1
  %ln9Sk = ptrtoint i64* %ln9Sj to i64
  %ln9Sl = inttoptr i64 %ln9Sk to i64*
  store i64* %ln9Sl, i64** %Sp_Var
  %ln9Sm = bitcast i8* @base_GHCziErr_error_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Sn = load i64*, i64** %Sp_Var
  %ln9So = load i64, i64* %R2_Var
  %ln9Sp = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Sm( i64* %Base_Arg, i64* %ln9Sn, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9So, i64 %ln9Sp, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.4593136 UTC

%Main_zdwzdsarrayByIndex_closure_struct = type <{i64, i64}>
@Main_zdwzdsarrayByIndex_closure$def = internal global %Main_zdwzdsarrayByIndex_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwzdsarrayByIndex_info$def to i64), i64 0}>
@Main_zdwzdsarrayByIndex_closure = alias i8, bitcast (%Main_zdwzdsarrayByIndex_closure_struct* @Main_zdwzdsarrayByIndex_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.4623057 UTC

@Main_zdwzdsarrayByIndex_slow = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwzdsarrayByIndex_slow$def to i8*)
define ghccc void @Main_zdwzdsarrayByIndex_slow$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c9Sr:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9ZD = load i64*, i64** %Sp_Var
  %ln9ZE = getelementptr inbounds i64, i64* %ln9ZD, i32 4
  %ln9ZF = bitcast i64* %ln9ZE to i64*
  %ln9ZG = load i64, i64* %ln9ZF, !tbaa !2
  store i64 %ln9ZG, i64* %R6_Var
  %ln9ZH = load i64*, i64** %Sp_Var
  %ln9ZI = getelementptr inbounds i64, i64* %ln9ZH, i32 3
  %ln9ZJ = bitcast i64* %ln9ZI to i64*
  %ln9ZK = load i64, i64* %ln9ZJ, !tbaa !2
  store i64 %ln9ZK, i64* %R5_Var
  %ln9ZL = load i64*, i64** %Sp_Var
  %ln9ZM = getelementptr inbounds i64, i64* %ln9ZL, i32 2
  %ln9ZN = bitcast i64* %ln9ZM to i64*
  %ln9ZO = load i64, i64* %ln9ZN, !tbaa !2
  store i64 %ln9ZO, i64* %R4_Var
  %ln9ZP = load i64*, i64** %Sp_Var
  %ln9ZQ = getelementptr inbounds i64, i64* %ln9ZP, i32 1
  %ln9ZR = bitcast i64* %ln9ZQ to i64*
  %ln9ZS = load i64, i64* %ln9ZR, !tbaa !2
  store i64 %ln9ZS, i64* %R3_Var
  %ln9ZT = load i64*, i64** %Sp_Var
  %ln9ZU = getelementptr inbounds i64, i64* %ln9ZT, i32 0
  %ln9ZV = bitcast i64* %ln9ZU to i64*
  %ln9ZW = load i64, i64* %ln9ZV, !tbaa !2
  store i64 %ln9ZW, i64* %R2_Var
  %ln9ZX = load i64, i64* %R1_Var
  store i64 %ln9ZX, i64* %R1_Var
  %ln9ZY = load i64*, i64** %Sp_Var
  %ln9ZZ = getelementptr inbounds i64, i64* %ln9ZY, i32 5
  %lna00 = ptrtoint i64* %ln9ZZ to i64
  %lna01 = inttoptr i64 %lna00 to i64*
  store i64* %lna01, i64** %Sp_Var
  %lna02 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwzdsarrayByIndex_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna03 = load i64*, i64** %Sp_Var
  %lna04 = load i64, i64* %R1_Var
  %lna05 = load i64, i64* %R2_Var
  %lna06 = load i64, i64* %R3_Var
  %lna07 = load i64, i64* %R4_Var
  %lna08 = load i64, i64* %R5_Var
  %lna09 = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna02( i64* %Base_Arg, i64* %lna03, i64* %Hp_Arg, i64 %lna04, i64 %lna05, i64 %lna06, i64 %lna07, i64 %lna08, i64 %lna09, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.4682963 UTC

@s94q_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s94q_info$def to i8*)
define internal ghccc void @s94q_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s94q_info$def to i64)),i64 88), i64 8589934594, i64 4294967311}>
{
c9SY:
  %ls94c = alloca i64, i32 1
  %ls94e = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls94f = alloca i64, i32 1
  %lna0a = load i64*, i64** %Sp_Var
  %lna0b = getelementptr inbounds i64, i64* %lna0a, i32 -6
  %lna0c = ptrtoint i64* %lna0b to i64
  %lna0d = icmp ult i64 %lna0c, %SpLim_Arg
  %lna0e = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna0d, i1 0 )
  br i1 %lna0e, label %c9SZ, label %c9TP
c9TP:
  %lna0g = ptrtoint i8* @stg_upd_frame_info to i64
  %lna0f = load i64*, i64** %Sp_Var
  %lna0h = getelementptr inbounds i64, i64* %lna0f, i32 -2
  store i64 %lna0g, i64* %lna0h, !tbaa !2
  %lna0j = load i64, i64* %R1_Var
  %lna0i = load i64*, i64** %Sp_Var
  %lna0k = getelementptr inbounds i64, i64* %lna0i, i32 -1
  store i64 %lna0j, i64* %lna0k, !tbaa !2
  %lna0n = load i64, i64* %R1_Var
  %lna0o = add i64 %lna0n, 32
  %lna0p = inttoptr i64 %lna0o to i64*
  %lna0q = load i64, i64* %lna0p, !tbaa !4
  store i64 %lna0q, i64* %ls94c
  %lna0t = load i64, i64* %R1_Var
  %lna0u = add i64 %lna0t, 40
  %lna0v = inttoptr i64 %lna0u to i64*
  %lna0w = load i64, i64* %lna0v, !tbaa !4
  store i64 %lna0w, i64* %ls94e
  %lna0x = load i64, i64* %ls94c
  %lna0y = load i64, i64* %ls94e
  %lna0z = icmp sle i64 %lna0x, %lna0y
  %lna0A = zext i1 %lna0z to i64
  switch i64 %lna0A, label %c9SW [i64 1, label %c9SX]
c9SW:
  %lna0B = ptrtoint %r92g_closure_struct* @r92g_closure$def to i64
  %lna0C = add i64 %lna0B, 1
  store i64 %lna0C, i64* %R1_Var
  %lna0D = load i64*, i64** %Sp_Var
  %lna0E = getelementptr inbounds i64, i64* %lna0D, i32 -2
  %lna0F = ptrtoint i64* %lna0E to i64
  %lna0G = inttoptr i64 %lna0F to i64*
  store i64* %lna0G, i64** %Sp_Var
  %lna0H = load i64*, i64** %Sp_Var
  %lna0I = getelementptr inbounds i64, i64* %lna0H, i32 0
  %lna0J = bitcast i64* %lna0I to i64*
  %lna0K = load i64, i64* %lna0J, !tbaa !2
  %lna0L = inttoptr i64 %lna0K to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna0M = load i64*, i64** %Sp_Var
  %lna0N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna0L( i64* %Base_Arg, i64* %lna0M, i64* %Hp_Arg, i64 %lna0N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9SX:
  %lna0P = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9T2_info$def to i64
  %lna0O = load i64*, i64** %Sp_Var
  %lna0Q = getelementptr inbounds i64, i64* %lna0O, i32 -6
  store i64 %lna0P, i64* %lna0Q, !tbaa !2
  %lna0T = load i64, i64* %R1_Var
  %lna0U = add i64 %lna0T, 24
  %lna0V = inttoptr i64 %lna0U to i64*
  %lna0W = load i64, i64* %lna0V, !tbaa !4
  store i64 %lna0W, i64* %ls94f
  %lna0Z = load i64, i64* %R1_Var
  %lna10 = add i64 %lna0Z, 16
  %lna11 = inttoptr i64 %lna10 to i64*
  %lna12 = load i64, i64* %lna11, !tbaa !4
  store i64 %lna12, i64* %R1_Var
  %lna14 = load i64, i64* %ls94c
  %lna13 = load i64*, i64** %Sp_Var
  %lna15 = getelementptr inbounds i64, i64* %lna13, i32 -5
  store i64 %lna14, i64* %lna15, !tbaa !2
  %lna17 = load i64, i64* %ls94e
  %lna16 = load i64*, i64** %Sp_Var
  %lna18 = getelementptr inbounds i64, i64* %lna16, i32 -4
  store i64 %lna17, i64* %lna18, !tbaa !2
  %lna1a = load i64, i64* %ls94f
  %lna19 = load i64*, i64** %Sp_Var
  %lna1b = getelementptr inbounds i64, i64* %lna19, i32 -3
  store i64 %lna1a, i64* %lna1b, !tbaa !2
  %lna1c = load i64*, i64** %Sp_Var
  %lna1d = getelementptr inbounds i64, i64* %lna1c, i32 -6
  %lna1e = ptrtoint i64* %lna1d to i64
  %lna1f = inttoptr i64 %lna1e to i64*
  store i64* %lna1f, i64** %Sp_Var
  %lna1g = load i64, i64* %R1_Var
  %lna1h = and i64 %lna1g, 7
  %lna1i = icmp ne i64 %lna1h, 0
  br i1 %lna1i, label %u9TQ, label %c9T3
c9T3:
  %lna1k = load i64, i64* %R1_Var
  %lna1l = inttoptr i64 %lna1k to i64*
  %lna1m = load i64, i64* %lna1l, !tbaa !4
  %lna1n = inttoptr i64 %lna1m to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna1o = load i64*, i64** %Sp_Var
  %lna1p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna1n( i64* %Base_Arg, i64* %lna1o, i64* %Hp_Arg, i64 %lna1p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9TQ:
  %lna1q = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9T2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna1r = load i64*, i64** %Sp_Var
  %lna1s = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna1q( i64* %Base_Arg, i64* %lna1r, i64* %Hp_Arg, i64 %lna1s, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9SZ:
  %lna1t = load i64, i64* %R1_Var
  store i64 %lna1t, i64* %R1_Var
  %lna1u = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lna1v = bitcast i64* %lna1u to i64*
  %lna1w = load i64, i64* %lna1v, !tbaa !5
  %lna1x = inttoptr i64 %lna1w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna1y = load i64*, i64** %Sp_Var
  %lna1z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna1x( i64* %Base_Arg, i64* %lna1y, i64* %Hp_Arg, i64 %lna1z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.4772854 UTC

@c9T2_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9T2_info$def to i8*)
define internal ghccc void @c9T2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9T2_info$def to i64)),i64 88), i64 195, i64 4294967326}>
{
c9T2:
  %ls94t = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lna1A = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9T7_info$def to i64
  %lna1B = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lna1A, i64* %lna1B, !tbaa !2
  %lna1E = load i64, i64* %R1_Var
  %lna1F = add i64 %lna1E, 7
  %lna1G = inttoptr i64 %lna1F to i64*
  %lna1H = load i64, i64* %lna1G, !tbaa !4
  store i64 %lna1H, i64* %ls94t
  %lna1I = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lna1J = bitcast i64* %lna1I to i64*
  %lna1K = load i64, i64* %lna1J, !tbaa !2
  store i64 %lna1K, i64* %R1_Var
  %lna1L = load i64, i64* %ls94t
  %lna1M = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  store i64 %lna1L, i64* %lna1M, !tbaa !2
  %lna1N = load i64, i64* %R1_Var
  %lna1O = and i64 %lna1N, 7
  %lna1P = icmp ne i64 %lna1O, 0
  br i1 %lna1P, label %u9TR, label %c9T9
c9T9:
  %lna1R = load i64, i64* %R1_Var
  %lna1S = inttoptr i64 %lna1R to i64*
  %lna1T = load i64, i64* %lna1S, !tbaa !4
  %lna1U = inttoptr i64 %lna1T to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna1V = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna1U( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lna1V, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9TR:
  %lna1W = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9T7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna1X = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna1W( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lna1X, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.4842712 UTC

@c9T7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9T7_info$def to i8*)
define internal ghccc void @c9T7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9T7_info$def to i64)),i64 88), i64 451, i64 4294967326}>
{
c9T7:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls94t = alloca i64, i32 1
  %ls94v = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls94x = alloca i64, i32 1
  %lna1Y = load i64*, i64** %Hp_Var
  %lna1Z = getelementptr inbounds i64, i64* %lna1Y, i32 2
  %lna20 = ptrtoint i64* %lna1Z to i64
  %lna21 = inttoptr i64 %lna20 to i64*
  store i64* %lna21, i64** %Hp_Var
  %lna22 = load i64*, i64** %Hp_Var
  %lna23 = ptrtoint i64* %lna22 to i64
  %lna24 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lna25 = bitcast i64* %lna24 to i64*
  %lna26 = load i64, i64* %lna25, !tbaa !5
  %lna27 = icmp ugt i64 %lna23, %lna26
  %lna28 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna27, i1 0 )
  br i1 %lna28, label %c9Tf, label %c9Te
c9Te:
  %lna29 = load i64*, i64** %Sp_Var
  %lna2a = getelementptr inbounds i64, i64* %lna29, i32 3
  %lna2b = bitcast i64* %lna2a to i64*
  %lna2c = load i64, i64* %lna2b, !tbaa !2
  store i64 %lna2c, i64* %ls94t
  %lna2f = load i64, i64* %R1_Var
  %lna2g = add i64 %lna2f, 7
  %lna2h = inttoptr i64 %lna2g to i64*
  %lna2i = load i64, i64* %lna2h, !tbaa !4
  store i64 %lna2i, i64* %ls94v
  %lna2j = load i64, i64* %ls94t
  %lna2k = load i64, i64* %ls94v
  %lna2l = icmp sle i64 %lna2j, %lna2k
  %lna2m = zext i1 %lna2l to i64
  switch i64 %lna2m, label %c9Tj [i64 1, label %c9TO]
c9Tj:
  %lna2n = load i64*, i64** %Hp_Var
  %lna2o = getelementptr inbounds i64, i64* %lna2n, i32 -2
  %lna2p = ptrtoint i64* %lna2o to i64
  %lna2q = inttoptr i64 %lna2p to i64*
  store i64* %lna2q, i64** %Hp_Var
  %lna2r = ptrtoint %r92g_closure_struct* @r92g_closure$def to i64
  %lna2s = add i64 %lna2r, 1
  store i64 %lna2s, i64* %R1_Var
  %lna2t = load i64*, i64** %Sp_Var
  %lna2u = getelementptr inbounds i64, i64* %lna2t, i32 4
  %lna2v = ptrtoint i64* %lna2u to i64
  %lna2w = inttoptr i64 %lna2v to i64*
  store i64* %lna2w, i64** %Sp_Var
  %lna2x = load i64*, i64** %Sp_Var
  %lna2y = getelementptr inbounds i64, i64* %lna2x, i32 0
  %lna2z = bitcast i64* %lna2y to i64*
  %lna2A = load i64, i64* %lna2z, !tbaa !2
  %lna2B = inttoptr i64 %lna2A to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna2C = load i64*, i64** %Sp_Var
  %lna2D = load i64*, i64** %Hp_Var
  %lna2E = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna2B( i64* %Base_Arg, i64* %lna2C, i64* %lna2D, i64 %lna2E, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9TO:
  %lna2F = load i64*, i64** %Sp_Var
  %lna2G = getelementptr inbounds i64, i64* %lna2F, i32 2
  %lna2H = bitcast i64* %lna2G to i64*
  %lna2I = load i64, i64* %lna2H, !tbaa !2
  %lna2J = load i64*, i64** %Sp_Var
  %lna2K = getelementptr inbounds i64, i64* %lna2J, i32 1
  %lna2L = bitcast i64* %lna2K to i64*
  %lna2M = load i64, i64* %lna2L, !tbaa !2
  %lna2N = sub i64 %lna2I, %lna2M
  %lna2O = load i64, i64* %ls94v
  %lna2P = load i64, i64* %ls94t
  %lna2Q = sub i64 1, %lna2P
  %lna2R = add i64 %lna2O, %lna2Q
  %lna2S = mul i64 %lna2N, %lna2R
  %lna2T = load i64, i64* %ls94v
  %lna2U = load i64, i64* %ls94t
  %lna2V = sub i64 %lna2T, %lna2U
  %lna2W = add i64 %lna2S, %lna2V
  %lna2X = add i64 %lna2W, 1
  store i64 %lna2X, i64* %ls94x
  %lna2Y = load i64, i64* %ls94x
  %lna2Z = icmp slt i64 %lna2Y, 0
  %lna30 = zext i1 %lna2Z to i64
  switch i64 %lna30, label %c9TM [i64 1, label %c9TN]
c9TM:
  %lna32 = ptrtoint i8* @ghczmprim_GHCziTypes_Izh_con_info to i64
  %lna31 = load i64*, i64** %Hp_Var
  %lna33 = getelementptr inbounds i64, i64* %lna31, i32 -1
  store i64 %lna32, i64* %lna33, !tbaa !3
  %lna35 = load i64, i64* %ls94x
  %lna34 = load i64*, i64** %Hp_Var
  %lna36 = getelementptr inbounds i64, i64* %lna34, i32 0
  store i64 %lna35, i64* %lna36, !tbaa !3
  %lna38 = load i64*, i64** %Hp_Var
  %lna39 = ptrtoint i64* %lna38 to i64
  %lna3a = add i64 %lna39, -7
  store i64 %lna3a, i64* %R1_Var
  %lna3b = load i64*, i64** %Sp_Var
  %lna3c = getelementptr inbounds i64, i64* %lna3b, i32 4
  %lna3d = ptrtoint i64* %lna3c to i64
  %lna3e = inttoptr i64 %lna3d to i64*
  store i64* %lna3e, i64** %Sp_Var
  %lna3f = load i64*, i64** %Sp_Var
  %lna3g = getelementptr inbounds i64, i64* %lna3f, i32 0
  %lna3h = bitcast i64* %lna3g to i64*
  %lna3i = load i64, i64* %lna3h, !tbaa !2
  %lna3j = inttoptr i64 %lna3i to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna3k = load i64*, i64** %Sp_Var
  %lna3l = load i64*, i64** %Hp_Var
  %lna3m = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna3j( i64* %Base_Arg, i64* %lna3k, i64* %lna3l, i64 %lna3m, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9TN:
  %lna3n = load i64*, i64** %Hp_Var
  %lna3o = getelementptr inbounds i64, i64* %lna3n, i32 -2
  %lna3p = ptrtoint i64* %lna3o to i64
  %lna3q = inttoptr i64 %lna3p to i64*
  store i64* %lna3q, i64** %Hp_Var
  %lna3r = ptrtoint %Main_arrayByIndex19_closure_struct* @Main_arrayByIndex19_closure$def to i64
  store i64 %lna3r, i64* %R1_Var
  %lna3s = load i64*, i64** %Sp_Var
  %lna3t = getelementptr inbounds i64, i64* %lna3s, i32 4
  %lna3u = ptrtoint i64* %lna3t to i64
  %lna3v = inttoptr i64 %lna3u to i64*
  store i64* %lna3v, i64** %Sp_Var
  %lna3x = load i64, i64* %R1_Var
  %lna3y = inttoptr i64 %lna3x to i64*
  %lna3z = load i64, i64* %lna3y, !tbaa !4
  %lna3A = inttoptr i64 %lna3z to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna3B = load i64*, i64** %Sp_Var
  %lna3C = load i64*, i64** %Hp_Var
  %lna3D = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna3A( i64* %Base_Arg, i64* %lna3B, i64* %lna3C, i64 %lna3D, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Tf:
  %lna3E = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lna3E, !tbaa !5
  %lna3F = load i64, i64* %R1_Var
  store i64 %lna3F, i64* %R1_Var
  %lna3G = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna3H = load i64*, i64** %Sp_Var
  %lna3I = load i64*, i64** %Hp_Var
  %lna3J = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna3G( i64* %Base_Arg, i64* %lna3H, i64* %lna3I, i64 %lna3J, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.4922587 UTC

@Main_zdwzdsarrayByIndex_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwzdsarrayByIndex_info$def to i8*)
define ghccc void @Main_zdwzdsarrayByIndex_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwzdsarrayByIndex_slow$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwzdsarrayByIndex_info$def to i64)),i64 0), i64 325, i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwzdsarrayByIndex_info$def to i64)),i64 0), i64 21474836480, i64 0, i64 30928059498510}>
{
c9U0:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lna3K = load i64*, i64** %Sp_Var
  %lna3L = getelementptr inbounds i64, i64* %lna3K, i32 -17
  %lna3M = ptrtoint i64* %lna3L to i64
  %lna3N = icmp ult i64 %lna3M, %SpLim_Arg
  %lna3O = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna3N, i1 0 )
  br i1 %lna3O, label %c9U1, label %c9U2
c9U2:
  %lna3P = icmp sle i64 %R2_Arg, %R4_Arg
  %lna3Q = zext i1 %lna3P to i64
  switch i64 %lna3Q, label %u9YN [i64 1, label %c9TW]
u9YN:
  %lna3R = load i64*, i64** %Sp_Var
  %lna3S = getelementptr inbounds i64, i64* %lna3R, i32 -5
  store i64 %R2_Arg, i64* %lna3S, !tbaa !2
  %lna3T = load i64*, i64** %Sp_Var
  %lna3U = getelementptr inbounds i64, i64* %lna3T, i32 -4
  store i64 %R3_Arg, i64* %lna3U, !tbaa !2
  %lna3V = load i64*, i64** %Sp_Var
  %lna3W = getelementptr inbounds i64, i64* %lna3V, i32 -3
  store i64 %R4_Arg, i64* %lna3W, !tbaa !2
  %lna3X = load i64*, i64** %Sp_Var
  %lna3Y = getelementptr inbounds i64, i64* %lna3X, i32 -2
  store i64 %R5_Arg, i64* %lna3Y, !tbaa !2
  %lna3Z = load i64*, i64** %Sp_Var
  %lna40 = getelementptr inbounds i64, i64* %lna3Z, i32 -1
  store i64 %R6_Arg, i64* %lna40, !tbaa !2
  %lna41 = load i64*, i64** %Sp_Var
  %lna42 = getelementptr inbounds i64, i64* %lna41, i32 -5
  %lna43 = ptrtoint i64* %lna42 to i64
  %lna44 = inttoptr i64 %lna43 to i64*
  store i64* %lna44, i64** %Sp_Var
  %lna45 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9XN$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna46 = load i64*, i64** %Sp_Var
  %lna47 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna45( i64* %Base_Arg, i64* %lna46, i64* %Hp_Arg, i64 %lna47, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9TW:
  %lna49 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xy_info$def to i64
  %lna48 = load i64*, i64** %Sp_Var
  %lna4a = getelementptr inbounds i64, i64* %lna48, i32 -6
  store i64 %lna49, i64* %lna4a, !tbaa !2
  store i64 %R3_Arg, i64* %R1_Var
  %lna4b = load i64*, i64** %Sp_Var
  %lna4c = getelementptr inbounds i64, i64* %lna4b, i32 -5
  store i64 %R2_Arg, i64* %lna4c, !tbaa !2
  %lna4d = load i64*, i64** %Sp_Var
  %lna4e = getelementptr inbounds i64, i64* %lna4d, i32 -4
  store i64 %R3_Arg, i64* %lna4e, !tbaa !2
  %lna4f = load i64*, i64** %Sp_Var
  %lna4g = getelementptr inbounds i64, i64* %lna4f, i32 -3
  store i64 %R4_Arg, i64* %lna4g, !tbaa !2
  %lna4h = load i64*, i64** %Sp_Var
  %lna4i = getelementptr inbounds i64, i64* %lna4h, i32 -2
  store i64 %R5_Arg, i64* %lna4i, !tbaa !2
  %lna4j = load i64*, i64** %Sp_Var
  %lna4k = getelementptr inbounds i64, i64* %lna4j, i32 -1
  store i64 %R6_Arg, i64* %lna4k, !tbaa !2
  %lna4l = load i64*, i64** %Sp_Var
  %lna4m = getelementptr inbounds i64, i64* %lna4l, i32 -6
  %lna4n = ptrtoint i64* %lna4m to i64
  %lna4o = inttoptr i64 %lna4n to i64*
  store i64* %lna4o, i64** %Sp_Var
  %lna4p = load i64, i64* %R1_Var
  %lna4q = and i64 %lna4p, 7
  %lna4r = icmp ne i64 %lna4q, 0
  br i1 %lna4r, label %u9Z7, label %c9Xz
c9Xz:
  %lna4t = load i64, i64* %R1_Var
  %lna4u = inttoptr i64 %lna4t to i64*
  %lna4v = load i64, i64* %lna4u, !tbaa !4
  %lna4w = inttoptr i64 %lna4v to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna4x = load i64*, i64** %Sp_Var
  %lna4y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna4w( i64* %Base_Arg, i64* %lna4x, i64* %Hp_Arg, i64 %lna4y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9Z7:
  %lna4z = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xy_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna4A = load i64*, i64** %Sp_Var
  %lna4B = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna4z( i64* %Base_Arg, i64* %lna4A, i64* %Hp_Arg, i64 %lna4B, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9U1:
  %lna4C = ptrtoint %Main_zdwzdsarrayByIndex_closure_struct* @Main_zdwzdsarrayByIndex_closure$def to i64
  store i64 %lna4C, i64* %R1_Var
  %lna4D = load i64*, i64** %Sp_Var
  %lna4E = getelementptr inbounds i64, i64* %lna4D, i32 -5
  store i64 %R2_Arg, i64* %lna4E, !tbaa !2
  %lna4F = load i64*, i64** %Sp_Var
  %lna4G = getelementptr inbounds i64, i64* %lna4F, i32 -4
  store i64 %R3_Arg, i64* %lna4G, !tbaa !2
  %lna4H = load i64*, i64** %Sp_Var
  %lna4I = getelementptr inbounds i64, i64* %lna4H, i32 -3
  store i64 %R4_Arg, i64* %lna4I, !tbaa !2
  %lna4J = load i64*, i64** %Sp_Var
  %lna4K = getelementptr inbounds i64, i64* %lna4J, i32 -2
  store i64 %R5_Arg, i64* %lna4K, !tbaa !2
  %lna4L = load i64*, i64** %Sp_Var
  %lna4M = getelementptr inbounds i64, i64* %lna4L, i32 -1
  store i64 %R6_Arg, i64* %lna4M, !tbaa !2
  %lna4N = load i64*, i64** %Sp_Var
  %lna4O = getelementptr inbounds i64, i64* %lna4N, i32 -5
  %lna4P = ptrtoint i64* %lna4O to i64
  %lna4Q = inttoptr i64 %lna4P to i64*
  store i64* %lna4Q, i64** %Sp_Var
  %lna4R = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lna4S = bitcast i64* %lna4R to i64*
  %lna4T = load i64, i64* %lna4S, !tbaa !5
  %lna4U = inttoptr i64 %lna4T to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna4V = load i64*, i64** %Sp_Var
  %lna4W = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna4U( i64* %Base_Arg, i64* %lna4V, i64* %Hp_Arg, i64 %lna4W, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.4992471 UTC

@c9Xy_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xy_info$def to i8*)
define internal ghccc void @c9Xy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xy_info$def to i64)),i64 0), i64 325, i64 13335873454110}>
{
c9Xy:
  %ls962 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lna4Y = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9XD_info$def to i64
  %lna4X = load i64*, i64** %Sp_Var
  %lna4Z = getelementptr inbounds i64, i64* %lna4X, i32 -1
  store i64 %lna4Y, i64* %lna4Z, !tbaa !2
  %lna52 = load i64, i64* %R1_Var
  %lna53 = add i64 %lna52, 7
  %lna54 = inttoptr i64 %lna53 to i64*
  %lna55 = load i64, i64* %lna54, !tbaa !4
  store i64 %lna55, i64* %ls962
  %lna56 = load i64*, i64** %Sp_Var
  %lna57 = getelementptr inbounds i64, i64* %lna56, i32 4
  %lna58 = bitcast i64* %lna57 to i64*
  %lna59 = load i64, i64* %lna58, !tbaa !2
  store i64 %lna59, i64* %R1_Var
  %lna5b = load i64, i64* %ls962
  %lna5a = load i64*, i64** %Sp_Var
  %lna5c = getelementptr inbounds i64, i64* %lna5a, i32 0
  store i64 %lna5b, i64* %lna5c, !tbaa !2
  %lna5d = load i64*, i64** %Sp_Var
  %lna5e = getelementptr inbounds i64, i64* %lna5d, i32 -1
  %lna5f = ptrtoint i64* %lna5e to i64
  %lna5g = inttoptr i64 %lna5f to i64*
  store i64* %lna5g, i64** %Sp_Var
  %lna5h = load i64, i64* %R1_Var
  %lna5i = and i64 %lna5h, 7
  %lna5j = icmp ne i64 %lna5i, 0
  br i1 %lna5j, label %u9Zw, label %c9XF
c9XF:
  %lna5l = load i64, i64* %R1_Var
  %lna5m = inttoptr i64 %lna5l to i64*
  %lna5n = load i64, i64* %lna5m, !tbaa !4
  %lna5o = inttoptr i64 %lna5n to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna5p = load i64*, i64** %Sp_Var
  %lna5q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna5o( i64* %Base_Arg, i64* %lna5p, i64* %Hp_Arg, i64 %lna5q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9Zw:
  %lna5r = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9XD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna5s = load i64*, i64** %Sp_Var
  %lna5t = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna5r( i64* %Base_Arg, i64* %lna5s, i64* %Hp_Arg, i64 %lna5t, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5042399 UTC

@c9XD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9XD_info$def to i8*)
define internal ghccc void @c9XD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9XD_info$def to i64)),i64 0), i64 710, i64 13335873454110}>
{
c9XD:
  %ls962 = alloca i64, i32 1
  %ls964 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lna5u = load i64*, i64** %Sp_Var
  %lna5v = getelementptr inbounds i64, i64* %lna5u, i32 1
  %lna5w = bitcast i64* %lna5v to i64*
  %lna5x = load i64, i64* %lna5w, !tbaa !2
  store i64 %lna5x, i64* %ls962
  %lna5y = add i64 %R1_Arg, 7
  %lna5z = inttoptr i64 %lna5y to i64*
  %lna5A = load i64, i64* %lna5z, !tbaa !4
  store i64 %lna5A, i64* %ls964
  %lna5B = load i64, i64* %ls962
  %lna5C = load i64, i64* %ls964
  %lna5D = icmp sle i64 %lna5B, %lna5C
  %lna5E = zext i1 %lna5D to i64
  switch i64 %lna5E, label %u9YO [i64 1, label %c9XO]
u9YO:
  %lna5F = load i64*, i64** %Sp_Var
  %lna5G = getelementptr inbounds i64, i64* %lna5F, i32 2
  %lna5H = ptrtoint i64* %lna5G to i64
  %lna5I = inttoptr i64 %lna5H to i64*
  store i64* %lna5I, i64** %Sp_Var
  %lna5J = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9XN$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna5K = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna5J( i64* %Base_Arg, i64* %lna5K, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9XO:
  %lna5M = load i64*, i64** %Sp_Var
  %lna5N = getelementptr inbounds i64, i64* %lna5M, i32 4
  %lna5O = bitcast i64* %lna5N to i64*
  %lna5P = load i64, i64* %lna5O, !tbaa !2
  %lna5Q = load i64*, i64** %Sp_Var
  %lna5R = getelementptr inbounds i64, i64* %lna5Q, i32 2
  %lna5S = bitcast i64* %lna5R to i64*
  %lna5T = load i64, i64* %lna5S, !tbaa !2
  %lna5U = sub i64 %lna5P, %lna5T
  %lna5V = load i64, i64* %ls964
  %lna5W = load i64, i64* %ls962
  %lna5X = sub i64 1, %lna5W
  %lna5Y = add i64 %lna5V, %lna5X
  %lna5Z = mul i64 %lna5U, %lna5Y
  %lna60 = load i64, i64* %ls964
  %lna61 = load i64, i64* %ls962
  %lna62 = sub i64 %lna60, %lna61
  %lna63 = add i64 %lna5Z, %lna62
  %lna64 = add i64 %lna63, 1
  %lna5L = load i64*, i64** %Sp_Var
  %lna65 = getelementptr inbounds i64, i64* %lna5L, i32 1
  store i64 %lna64, i64* %lna65, !tbaa !2
  %lna66 = load i64*, i64** %Sp_Var
  %lna67 = getelementptr inbounds i64, i64* %lna66, i32 1
  %lna68 = ptrtoint i64* %lna67 to i64
  %lna69 = inttoptr i64 %lna68 to i64*
  store i64* %lna69, i64** %Sp_Var
  %lna6a = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s94h$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6b = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6a( i64* %Base_Arg, i64* %lna6b, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5082336 UTC

@_c9XN = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9XN$def to i8*)
define internal ghccc void @_c9XN$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c9XN:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lna6c = load i64*, i64** %Sp_Var
  %lna6d = getelementptr inbounds i64, i64* %lna6c, i32 -1
  store i64 0, i64* %lna6d, !tbaa !2
  %lna6e = load i64*, i64** %Sp_Var
  %lna6f = getelementptr inbounds i64, i64* %lna6e, i32 -1
  %lna6g = ptrtoint i64* %lna6f to i64
  %lna6h = inttoptr i64 %lna6g to i64*
  store i64* %lna6h, i64** %Sp_Var
  %lna6i = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s94h$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6j = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6i( i64* %Base_Arg, i64* %lna6j, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5132258 UTC

@_s94h = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s94h$def to i8*)
define internal ghccc void @_s94h$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
s94h:
  %ls94i = alloca i64, i32 1
  %ls94k = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lna6k = load i64*, i64** %Sp_Var
  %lna6l = getelementptr inbounds i64, i64* %lna6k, i32 0
  %lna6m = bitcast i64* %lna6l to i64*
  %lna6n = load i64, i64* %lna6m, !tbaa !2
  store i64 %lna6n, i64* %ls94i
  %lna6o = load i64, i64* %ls94i
  %lna6p = icmp slt i64 %lna6o, 0
  %lna6q = zext i1 %lna6p to i64
  switch i64 %lna6q, label %c9U6 [i64 1, label %c9Xu]
c9U6:
  %lna6s = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9SJ_info$def to i64
  %lna6r = load i64*, i64** %Sp_Var
  %lna6t = getelementptr inbounds i64, i64* %lna6r, i32 -2
  store i64 %lna6s, i64* %lna6t, !tbaa !2
  %lna6u = load i64, i64* %ls94i
  %lna6v = add i64 %lna6u, 7
  %lna6w = ashr i64 %lna6v, 3
  store i64 %lna6w, i64* %ls94k
  %lna6x = load i64, i64* %ls94k
  store i64 %lna6x, i64* %R1_Var
  %lna6z = load i64, i64* %ls94k
  %lna6y = load i64*, i64** %Sp_Var
  %lna6A = getelementptr inbounds i64, i64* %lna6y, i32 -1
  store i64 %lna6z, i64* %lna6A, !tbaa !2
  %lna6B = load i64*, i64** %Sp_Var
  %lna6C = getelementptr inbounds i64, i64* %lna6B, i32 -2
  %lna6D = ptrtoint i64* %lna6C to i64
  %lna6E = inttoptr i64 %lna6D to i64*
  store i64* %lna6E, i64** %Sp_Var
  %lna6F = bitcast i8* @stg_newByteArrayzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6G = load i64*, i64** %Sp_Var
  %lna6H = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6F( i64* %Base_Arg, i64* %lna6G, i64* %Hp_Arg, i64 %lna6H, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Xu:
  %lna6J = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xt_info$def to i64
  %lna6I = load i64*, i64** %Sp_Var
  %lna6K = getelementptr inbounds i64, i64* %lna6I, i32 5
  store i64 %lna6J, i64* %lna6K, !tbaa !2
  %lna6L = ptrtoint %Main_arrayByIndex19_closure_struct* @Main_arrayByIndex19_closure$def to i64
  store i64 %lna6L, i64* %R1_Var
  %lna6M = load i64, i64* %R1_Var
  %lna6N = and i64 %lna6M, 7
  %lna6O = icmp ne i64 %lna6N, 0
  br i1 %lna6O, label %u9YS, label %u9YR
u9YR:
  %lna6P = load i64*, i64** %Sp_Var
  %lna6Q = getelementptr inbounds i64, i64* %lna6P, i32 6
  %lna6R = ptrtoint i64* %lna6Q to i64
  %lna6S = inttoptr i64 %lna6R to i64*
  store i64* %lna6S, i64** %Sp_Var
  %lna6T = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9Xv$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6U = load i64*, i64** %Sp_Var
  %lna6V = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6T( i64* %Base_Arg, i64* %lna6U, i64* %Hp_Arg, i64 %lna6V, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9YS:
  %lna6W = load i64*, i64** %Sp_Var
  %lna6X = getelementptr inbounds i64, i64* %lna6W, i32 5
  %lna6Y = ptrtoint i64* %lna6X to i64
  %lna6Z = inttoptr i64 %lna6Y to i64*
  store i64* %lna6Z, i64** %Sp_Var
  %lna70 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna71 = load i64*, i64** %Sp_Var
  %lna72 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna70( i64* %Base_Arg, i64* %lna71, i64* %Hp_Arg, i64 %lna72, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5212126 UTC

@c9SJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9SJ_info$def to i8*)
define internal ghccc void @c9SJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9SJ_info$def to i64)),i64 0), i64 1479, i64 13335873454110}>
{
c9SJ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls94c = alloca i64, i32 1
  %ls94d = alloca i64, i32 1
  %ls94e = alloca i64, i32 1
  %ls94f = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lna73 = load i64*, i64** %Hp_Var
  %lna74 = getelementptr inbounds i64, i64* %lna73, i32 6
  %lna75 = ptrtoint i64* %lna74 to i64
  %lna76 = inttoptr i64 %lna75 to i64*
  store i64* %lna76, i64** %Hp_Var
  %lna77 = load i64*, i64** %Hp_Var
  %lna78 = ptrtoint i64* %lna77 to i64
  %lna79 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lna7a = bitcast i64* %lna79 to i64*
  %lna7b = load i64, i64* %lna7a, !tbaa !5
  %lna7c = icmp ugt i64 %lna78, %lna7b
  %lna7d = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lna7c, i1 0 )
  br i1 %lna7d, label %c9U9, label %c9U8
c9U8:
  %lna7e = load i64*, i64** %Sp_Var
  %lna7f = getelementptr inbounds i64, i64* %lna7e, i32 3
  %lna7g = bitcast i64* %lna7f to i64*
  %lna7h = load i64, i64* %lna7g, !tbaa !2
  store i64 %lna7h, i64* %ls94c
  %lna7i = load i64*, i64** %Sp_Var
  %lna7j = getelementptr inbounds i64, i64* %lna7i, i32 4
  %lna7k = bitcast i64* %lna7j to i64*
  %lna7l = load i64, i64* %lna7k, !tbaa !2
  store i64 %lna7l, i64* %ls94d
  %lna7m = load i64*, i64** %Sp_Var
  %lna7n = getelementptr inbounds i64, i64* %lna7m, i32 5
  %lna7o = bitcast i64* %lna7n to i64*
  %lna7p = load i64, i64* %lna7o, !tbaa !2
  store i64 %lna7p, i64* %ls94e
  %lna7q = load i64*, i64** %Sp_Var
  %lna7r = getelementptr inbounds i64, i64* %lna7q, i32 6
  %lna7s = bitcast i64* %lna7r to i64*
  %lna7t = load i64, i64* %lna7s, !tbaa !2
  store i64 %lna7t, i64* %ls94f
  %lna7v = load i64, i64* %R1_Var
  %lna7w = add i64 %lna7v, 16
  %lna7x = inttoptr i64 %lna7w to i8*
  %lna7y = load i64*, i64** %Sp_Var
  %lna7z = getelementptr inbounds i64, i64* %lna7y, i32 1
  %lna7A = bitcast i64* %lna7z to i64*
  %lna7B = load i64, i64* %lna7A, !tbaa !2
  %lna7D = trunc i64 0 to i8
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  call ccc void (i8*, i8, i64, i32, i1) @llvm.memset.p0i8.i64( i8* %lna7x, i8 %lna7D, i64 %lna7B, i32 1, i1 0 )
  %lna7F = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s94q_info$def to i64
  %lna7E = load i64*, i64** %Hp_Var
  %lna7G = getelementptr inbounds i64, i64* %lna7E, i32 -5
  store i64 %lna7F, i64* %lna7G, !tbaa !3
  %lna7I = load i64, i64* %ls94d
  %lna7H = load i64*, i64** %Hp_Var
  %lna7J = getelementptr inbounds i64, i64* %lna7H, i32 -3
  store i64 %lna7I, i64* %lna7J, !tbaa !3
  %lna7L = load i64, i64* %ls94f
  %lna7K = load i64*, i64** %Hp_Var
  %lna7M = getelementptr inbounds i64, i64* %lna7K, i32 -2
  store i64 %lna7L, i64* %lna7M, !tbaa !3
  %lna7O = load i64, i64* %ls94c
  %lna7N = load i64*, i64** %Hp_Var
  %lna7P = getelementptr inbounds i64, i64* %lna7N, i32 -1
  store i64 %lna7O, i64* %lna7P, !tbaa !3
  %lna7R = load i64, i64* %ls94e
  %lna7Q = load i64*, i64** %Hp_Var
  %lna7S = getelementptr inbounds i64, i64* %lna7Q, i32 0
  store i64 %lna7R, i64* %lna7S, !tbaa !3
  %lna7U = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9U4_info$def to i64
  %lna7T = load i64*, i64** %Sp_Var
  %lna7V = getelementptr inbounds i64, i64* %lna7T, i32 -1
  store i64 %lna7U, i64* %lna7V, !tbaa !2
  %lna7W = load i64, i64* %ls94e
  store i64 %lna7W, i64* %R3_Var
  %lna7X = load i64, i64* %ls94c
  store i64 %lna7X, i64* %R2_Var
  %lna7Z = load i64, i64* %R1_Var
  %lna7Y = load i64*, i64** %Sp_Var
  %lna80 = getelementptr inbounds i64, i64* %lna7Y, i32 0
  store i64 %lna7Z, i64* %lna80, !tbaa !2
  %lna82 = load i64*, i64** %Hp_Var
  %lna83 = getelementptr inbounds i64, i64* %lna82, i32 -5
  %lna84 = ptrtoint i64* %lna83 to i64
  %lna81 = load i64*, i64** %Sp_Var
  %lna85 = getelementptr inbounds i64, i64* %lna81, i32 1
  store i64 %lna84, i64* %lna85, !tbaa !2
  %lna86 = load i64*, i64** %Sp_Var
  %lna87 = getelementptr inbounds i64, i64* %lna86, i32 -1
  %lna88 = ptrtoint i64* %lna87 to i64
  %lna89 = inttoptr i64 %lna88 to i64*
  store i64* %lna89, i64** %Sp_Var
  %lna8a = bitcast i8* @base_GHCziInt_zdwzdcenumFromTo3_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna8b = load i64*, i64** %Sp_Var
  %lna8c = load i64*, i64** %Hp_Var
  %lna8d = load i64, i64* %R1_Var
  %lna8e = load i64, i64* %R2_Var
  %lna8f = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna8a( i64* %Base_Arg, i64* %lna8b, i64* %lna8c, i64 %lna8d, i64 %lna8e, i64 %lna8f, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9U9:
  %lna8g = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lna8g, !tbaa !5
  %lna8h = load i64, i64* %R1_Var
  store i64 %lna8h, i64* %R1_Var
  %lna8i = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna8j = load i64*, i64** %Sp_Var
  %lna8k = load i64*, i64** %Hp_Var
  %lna8l = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna8i( i64* %Base_Arg, i64* %lna8j, i64* %lna8k, i64 %lna8l, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc void @llvm.memset.p0i8.i64(i8*, i8, i64, i32, i1)


==================== LLVM Code ====================
2018-12-28 09:14:26.5282016 UTC

@c9U4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9U4_info$def to i8*)
define internal ghccc void @c9U4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9U4_info$def to i64)),i64 0), i64 2824, i64 4539780431902}>
{
c9U4:
  %lna8m = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lna8m, !tbaa !2
  %lna8n = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9UN$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna8n( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5311969 UTC

@_c9UN = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9UN$def to i8*)
define internal ghccc void @_c9UN$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c9UN:
  %ls94Z = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lna8o = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lna8p = bitcast i64* %lna8o to i64*
  %lna8q = load i64, i64* %lna8p, !tbaa !2
  store i64 %lna8q, i64* %ls94Z
  %lna8r = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UP_info$def to i64
  %lna8s = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lna8r, i64* %lna8s, !tbaa !2
  %lna8t = load i64, i64* %ls94Z
  store i64 %lna8t, i64* %R1_Var
  %lna8u = load i64, i64* %R1_Var
  %lna8v = and i64 %lna8u, 7
  %lna8w = icmp ne i64 %lna8v, 0
  br i1 %lna8w, label %u9Zb, label %c9UR
c9UR:
  %lna8y = load i64, i64* %R1_Var
  %lna8z = inttoptr i64 %lna8y to i64*
  %lna8A = load i64, i64* %lna8z, !tbaa !4
  %lna8B = inttoptr i64 %lna8A to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna8C = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna8B( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lna8C, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9Zb:
  %lna8D = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UP_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna8E = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna8D( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lna8E, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5361897 UTC

@c9UP_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UP_info$def to i8*)
define internal ghccc void @c9UP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UP_info$def to i64)),i64 0), i64 2824, i64 4539780431902}>
{
c9UP:
  %ls952 = alloca i64, i32 1
  %ls953 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lna8F = load i64, i64* %R1_Var
  %lna8G = and i64 %lna8F, 7
  switch i64 %lna8G, label %u9Zc [i64 1, label %u9Zc
                                  i64 2, label %c9Vc]
u9Zc:
  %lna8H = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Uh_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna8I = load i64*, i64** %Sp_Var
  %lna8J = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna8H( i64* %Base_Arg, i64* %lna8I, i64* %Hp_Arg, i64 %lna8J, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Vc:
  %lna8L = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9V0_info$def to i64
  %lna8K = load i64*, i64** %Sp_Var
  %lna8M = getelementptr inbounds i64, i64* %lna8K, i32 -2
  store i64 %lna8L, i64* %lna8M, !tbaa !2
  %lna8P = load i64, i64* %R1_Var
  %lna8Q = add i64 %lna8P, 6
  %lna8R = inttoptr i64 %lna8Q to i64*
  %lna8S = load i64, i64* %lna8R, !tbaa !4
  store i64 %lna8S, i64* %ls952
  %lna8V = load i64, i64* %R1_Var
  %lna8W = add i64 %lna8V, 14
  %lna8X = inttoptr i64 %lna8W to i64*
  %lna8Y = load i64, i64* %lna8X, !tbaa !4
  store i64 %lna8Y, i64* %ls953
  %lna8Z = load i64*, i64** %Sp_Var
  %lna90 = getelementptr inbounds i64, i64* %lna8Z, i32 5
  %lna91 = bitcast i64* %lna90 to i64*
  %lna92 = load i64, i64* %lna91, !tbaa !2
  store i64 %lna92, i64* %R1_Var
  %lna94 = load i64, i64* %ls953
  %lna93 = load i64*, i64** %Sp_Var
  %lna95 = getelementptr inbounds i64, i64* %lna93, i32 -1
  store i64 %lna94, i64* %lna95, !tbaa !2
  %lna97 = load i64, i64* %ls952
  %lna96 = load i64*, i64** %Sp_Var
  %lna98 = getelementptr inbounds i64, i64* %lna96, i32 0
  store i64 %lna97, i64* %lna98, !tbaa !2
  %lna99 = load i64*, i64** %Sp_Var
  %lna9a = getelementptr inbounds i64, i64* %lna99, i32 -2
  %lna9b = ptrtoint i64* %lna9a to i64
  %lna9c = inttoptr i64 %lna9b to i64*
  store i64* %lna9c, i64** %Sp_Var
  %lna9d = load i64, i64* %R1_Var
  %lna9e = and i64 %lna9d, 7
  %lna9f = icmp ne i64 %lna9e, 0
  br i1 %lna9f, label %u9Zd, label %c9V1
c9V1:
  %lna9h = load i64, i64* %R1_Var
  %lna9i = inttoptr i64 %lna9h to i64*
  %lna9j = load i64, i64* %lna9i, !tbaa !4
  %lna9k = inttoptr i64 %lna9j to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna9l = load i64*, i64** %Sp_Var
  %lna9m = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna9k( i64* %Base_Arg, i64* %lna9l, i64* %Hp_Arg, i64 %lna9m, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9Zd:
  %lna9n = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9V0_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna9o = load i64*, i64** %Sp_Var
  %lna9p = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna9n( i64* %Base_Arg, i64* %lna9o, i64* %Hp_Arg, i64 %lna9p, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5421803 UTC

@c9V0_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9V0_info$def to i8*)
define internal ghccc void @c9V0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9V0_info$def to i64)),i64 0), i64 11274, i64 4539780431902}>
{
c9V0:
  %ls955 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lna9r = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9V5_info$def to i64
  %lna9q = load i64*, i64** %Sp_Var
  %lna9s = getelementptr inbounds i64, i64* %lna9q, i32 -1
  store i64 %lna9r, i64* %lna9s, !tbaa !2
  %lna9v = load i64, i64* %R1_Var
  %lna9w = add i64 %lna9v, 7
  %lna9x = inttoptr i64 %lna9w to i64*
  %lna9y = load i64, i64* %lna9x, !tbaa !4
  store i64 %lna9y, i64* %ls955
  %lna9z = load i64*, i64** %Sp_Var
  %lna9A = getelementptr inbounds i64, i64* %lna9z, i32 9
  %lna9B = bitcast i64* %lna9A to i64*
  %lna9C = load i64, i64* %lna9B, !tbaa !2
  store i64 %lna9C, i64* %R1_Var
  %lna9E = load i64, i64* %ls955
  %lna9D = load i64*, i64** %Sp_Var
  %lna9F = getelementptr inbounds i64, i64* %lna9D, i32 0
  store i64 %lna9E, i64* %lna9F, !tbaa !2
  %lna9G = load i64*, i64** %Sp_Var
  %lna9H = getelementptr inbounds i64, i64* %lna9G, i32 -1
  %lna9I = ptrtoint i64* %lna9H to i64
  %lna9J = inttoptr i64 %lna9I to i64*
  store i64* %lna9J, i64** %Sp_Var
  %lna9K = load i64, i64* %R1_Var
  %lna9L = and i64 %lna9K, 7
  %lna9M = icmp ne i64 %lna9L, 0
  br i1 %lna9M, label %u9Ze, label %c9V6
c9V6:
  %lna9O = load i64, i64* %R1_Var
  %lna9P = inttoptr i64 %lna9O to i64*
  %lna9Q = load i64, i64* %lna9P, !tbaa !4
  %lna9R = inttoptr i64 %lna9Q to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna9S = load i64*, i64** %Sp_Var
  %lna9T = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna9R( i64* %Base_Arg, i64* %lna9S, i64* %Hp_Arg, i64 %lna9T, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9Ze:
  %lna9U = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9V5_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna9V = load i64*, i64** %Sp_Var
  %lna9W = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna9U( i64* %Base_Arg, i64* %lna9V, i64* %Hp_Arg, i64 %lna9W, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5461741 UTC

@c9V5_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9V5_info$def to i8*)
define internal ghccc void @c9V5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9V5_info$def to i64)),i64 0), i64 22603, i64 4539780431902}>
{
c9V5:
  %ls957 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lna9Y = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Va_info$def to i64
  %lna9X = load i64*, i64** %Sp_Var
  %lna9Z = getelementptr inbounds i64, i64* %lna9X, i32 -1
  store i64 %lna9Y, i64* %lna9Z, !tbaa !2
  %lnaa0 = add i64 %R1_Arg, 7
  %lnaa1 = inttoptr i64 %lnaa0 to i64*
  %lnaa2 = load i64, i64* %lnaa1, !tbaa !4
  store i64 %lnaa2, i64* %ls957
  %lnaa3 = load i64, i64* %ls957
  store i64 %lnaa3, i64* %R3_Var
  %lnaa4 = load i64*, i64** %Sp_Var
  %lnaa5 = getelementptr inbounds i64, i64* %lnaa4, i32 1
  %lnaa6 = bitcast i64* %lnaa5 to i64*
  %lnaa7 = load i64, i64* %lnaa6, !tbaa !2
  store i64 %lnaa7, i64* %R2_Var
  %lnaa9 = load i64, i64* %ls957
  %lnaa8 = load i64*, i64** %Sp_Var
  %lnaaa = getelementptr inbounds i64, i64* %lnaa8, i32 0
  store i64 %lnaa9, i64* %lnaaa, !tbaa !2
  %lnaab = load i64*, i64** %Sp_Var
  %lnaac = getelementptr inbounds i64, i64* %lnaab, i32 -1
  %lnaad = ptrtoint i64* %lnaac to i64
  %lnaae = inttoptr i64 %lnaad to i64*
  store i64* %lnaae, i64** %Sp_Var
  %lnaaf = bitcast i8* @base_GHCziInt_zdwzdcenumFromTo3_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaag = load i64*, i64** %Sp_Var
  %lnaah = load i64, i64* %R2_Var
  %lnaai = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaaf( i64* %Base_Arg, i64* %lnaag, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaah, i64 %lnaai, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5511662 UTC

@c9Va_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Va_info$def to i8*)
define internal ghccc void @c9Va_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Va_info$def to i64)),i64 0), i64 45260, i64 4539780431902}>
{
c9Va:
  %lnaaj = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lnaaj, !tbaa !2
  %lnaak = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9Vy$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaak( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5541615 UTC

@_c9Vy = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9Vy$def to i8*)
define internal ghccc void @_c9Vy$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c9Vy:
  %ls95d = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaal = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnaam = bitcast i64* %lnaal to i64*
  %lnaan = load i64, i64* %lnaam, !tbaa !2
  store i64 %lnaan, i64* %ls95d
  %lnaao = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9VA_info$def to i64
  %lnaap = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaao, i64* %lnaap, !tbaa !2
  %lnaaq = load i64, i64* %ls95d
  store i64 %lnaaq, i64* %R1_Var
  %lnaar = load i64, i64* %R1_Var
  %lnaas = and i64 %lnaar, 7
  %lnaat = icmp ne i64 %lnaas, 0
  br i1 %lnaat, label %u9Zg, label %c9VC
c9VC:
  %lnaav = load i64, i64* %R1_Var
  %lnaaw = inttoptr i64 %lnaav to i64*
  %lnaax = load i64, i64* %lnaaw, !tbaa !4
  %lnaay = inttoptr i64 %lnaax to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaaz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaay( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaaz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9Zg:
  %lnaaA = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9VA_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaaB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaaA( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaaB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5601528 UTC

@c9VA_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9VA_info$def to i8*)
define internal ghccc void @c9VA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9VA_info$def to i64)),i64 0), i64 45260, i64 4539780431902}>
{
c9VA:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls95g = alloca i64, i32 1
  %ls95h = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaaC = load i64, i64* %R1_Var
  %lnaaD = and i64 %lnaaC, 7
  switch i64 %lnaaD, label %c9VI [i64 1, label %c9VI
                                  i64 2, label %c9VN]
c9VI:
  %lnaaF = load i64*, i64** %Sp_Var
  %lnaaG = getelementptr inbounds i64, i64* %lnaaF, i32 3
  %lnaaH = bitcast i64* %lnaaG to i64*
  %lnaaI = load i64, i64* %lnaaH, !tbaa !2
  %lnaaE = load i64*, i64** %Sp_Var
  %lnaaJ = getelementptr inbounds i64, i64* %lnaaE, i32 4
  store i64 %lnaaI, i64* %lnaaJ, !tbaa !2
  %lnaaK = load i64*, i64** %Sp_Var
  %lnaaL = getelementptr inbounds i64, i64* %lnaaK, i32 4
  %lnaaM = ptrtoint i64* %lnaaL to i64
  %lnaaN = inttoptr i64 %lnaaM to i64*
  store i64* %lnaaN, i64** %Sp_Var
  %lnaaO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9UN$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaaP = load i64*, i64** %Sp_Var
  %lnaaQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaaO( i64* %Base_Arg, i64* %lnaaP, i64* %Hp_Arg, i64 %lnaaQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9VN:
  %lnaaS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9VL_info$def to i64
  %lnaaR = load i64*, i64** %Sp_Var
  %lnaaT = getelementptr inbounds i64, i64* %lnaaR, i32 -2
  store i64 %lnaaS, i64* %lnaaT, !tbaa !2
  %lnaaW = load i64, i64* %R1_Var
  %lnaaX = add i64 %lnaaW, 6
  %lnaaY = inttoptr i64 %lnaaX to i64*
  %lnaaZ = load i64, i64* %lnaaY, !tbaa !4
  store i64 %lnaaZ, i64* %ls95g
  %lnab2 = load i64, i64* %R1_Var
  %lnab3 = add i64 %lnab2, 14
  %lnab4 = inttoptr i64 %lnab3 to i64*
  %lnab5 = load i64, i64* %lnab4, !tbaa !4
  store i64 %lnab5, i64* %ls95h
  %lnab6 = load i64*, i64** %Sp_Var
  %lnab7 = getelementptr inbounds i64, i64* %lnab6, i32 4
  %lnab8 = bitcast i64* %lnab7 to i64*
  %lnab9 = load i64, i64* %lnab8, !tbaa !2
  store i64 %lnab9, i64* %R1_Var
  %lnabb = load i64, i64* %ls95h
  %lnaba = load i64*, i64** %Sp_Var
  %lnabc = getelementptr inbounds i64, i64* %lnaba, i32 -1
  store i64 %lnabb, i64* %lnabc, !tbaa !2
  %lnabe = load i64, i64* %ls95g
  %lnabd = load i64*, i64** %Sp_Var
  %lnabf = getelementptr inbounds i64, i64* %lnabd, i32 0
  store i64 %lnabe, i64* %lnabf, !tbaa !2
  %lnabg = load i64*, i64** %Sp_Var
  %lnabh = getelementptr inbounds i64, i64* %lnabg, i32 -2
  %lnabi = ptrtoint i64* %lnabh to i64
  %lnabj = inttoptr i64 %lnabi to i64*
  store i64* %lnabj, i64** %Sp_Var
  %lnabk = load i64, i64* %R1_Var
  %lnabl = and i64 %lnabk, 7
  %lnabm = icmp ne i64 %lnabl, 0
  br i1 %lnabm, label %u9Zh, label %c9VO
c9VO:
  %lnabo = load i64, i64* %R1_Var
  %lnabp = inttoptr i64 %lnabo to i64*
  %lnabq = load i64, i64* %lnabp, !tbaa !4
  %lnabr = inttoptr i64 %lnabq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnabs = load i64*, i64** %Sp_Var
  %lnabt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnabr( i64* %Base_Arg, i64* %lnabs, i64* %Hp_Arg, i64 %lnabt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9Zh:
  %lnabu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9VL_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnabv = load i64*, i64** %Sp_Var
  %lnabw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnabu( i64* %Base_Arg, i64* %lnabv, i64* %Hp_Arg, i64 %lnabw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5661427 UTC

@c9VL_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9VL_info$def to i8*)
define internal ghccc void @c9VL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9VL_info$def to i64)),i64 0), i64 181006, i64 4539780431902}>
{
c9VL:
  %ls95j = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls95i = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnabz = load i64, i64* %R1_Var
  %lnabA = add i64 %lnabz, 7
  %lnabB = inttoptr i64 %lnabA to i64*
  %lnabC = load i64, i64* %lnabB, !tbaa !4
  store i64 %lnabC, i64* %ls95j
  %lnabD = load i64*, i64** %Sp_Var
  %lnabE = getelementptr inbounds i64, i64* %lnabD, i32 10
  %lnabF = bitcast i64* %lnabE to i64*
  %lnabG = load i64, i64* %lnabF, !tbaa !2
  %lnabH = load i64, i64* %ls95j
  %lnabI = icmp sle i64 %lnabG, %lnabH
  %lnabJ = zext i1 %lnabI to i64
  switch i64 %lnabJ, label %u9YV [i64 1, label %c9Xr]
u9YV:
  %lnabK = load i64*, i64** %Sp_Var
  %lnabL = getelementptr inbounds i64, i64* %lnabK, i32 15
  %lnabM = ptrtoint i64* %lnabL to i64
  %lnabN = inttoptr i64 %lnabM to i64*
  store i64* %lnabN, i64** %Sp_Var
  br label %u9Zl
u9Zl:
  %lnabO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9Wt$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnabP = load i64*, i64** %Sp_Var
  %lnabQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnabO( i64* %Base_Arg, i64* %lnabP, i64* %Hp_Arg, i64 %lnabQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Xr:
  %lnabR = load i64, i64* %ls95j
  %lnabS = load i64*, i64** %Sp_Var
  %lnabT = getelementptr inbounds i64, i64* %lnabS, i32 12
  %lnabU = bitcast i64* %lnabT to i64*
  %lnabV = load i64, i64* %lnabU, !tbaa !2
  %lnabW = icmp sle i64 %lnabR, %lnabV
  %lnabX = zext i1 %lnabW to i64
  switch i64 %lnabX, label %u9YW [i64 1, label %c9Wa]
u9YW:
  %lnabY = load i64*, i64** %Sp_Var
  %lnabZ = getelementptr inbounds i64, i64* %lnabY, i32 15
  %lnac0 = ptrtoint i64* %lnabZ to i64
  %lnac1 = inttoptr i64 %lnac0 to i64*
  store i64* %lnac1, i64** %Sp_Var
  br label %u9Zl
c9Wa:
  %lnac3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9W9_info$def to i64
  %lnac2 = load i64*, i64** %Sp_Var
  %lnac4 = getelementptr inbounds i64, i64* %lnac2, i32 -1
  store i64 %lnac3, i64* %lnac4, !tbaa !2
  %lnac5 = load i64, i64* %R1_Var
  store i64 %lnac5, i64* %ls95i
  %lnac6 = load i64*, i64** %Sp_Var
  %lnac7 = getelementptr inbounds i64, i64* %lnac6, i32 2
  %lnac8 = bitcast i64* %lnac7 to i64*
  %lnac9 = load i64, i64* %lnac8, !tbaa !2
  store i64 %lnac9, i64* %R1_Var
  %lnacb = load i64, i64* %ls95j
  %lnaca = load i64*, i64** %Sp_Var
  %lnacc = getelementptr inbounds i64, i64* %lnaca, i32 0
  store i64 %lnacb, i64* %lnacc, !tbaa !2
  %lnace = load i64, i64* %ls95i
  %lnacd = load i64*, i64** %Sp_Var
  %lnacf = getelementptr inbounds i64, i64* %lnacd, i32 2
  store i64 %lnace, i64* %lnacf, !tbaa !2
  %lnacg = load i64*, i64** %Sp_Var
  %lnach = getelementptr inbounds i64, i64* %lnacg, i32 -1
  %lnaci = ptrtoint i64* %lnach to i64
  %lnacj = inttoptr i64 %lnaci to i64*
  store i64* %lnacj, i64** %Sp_Var
  %lnack = load i64, i64* %R1_Var
  %lnacl = and i64 %lnack, 7
  %lnacm = icmp ne i64 %lnacl, 0
  br i1 %lnacm, label %u9Zj, label %c9Wb
c9Wb:
  %lnaco = load i64, i64* %R1_Var
  %lnacp = inttoptr i64 %lnaco to i64*
  %lnacq = load i64, i64* %lnacp, !tbaa !4
  %lnacr = inttoptr i64 %lnacq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnacs = load i64*, i64** %Sp_Var
  %lnact = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnacr( i64* %Base_Arg, i64* %lnacs, i64* %Hp_Arg, i64 %lnact, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9Zj:
  %lnacu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9W9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnacv = load i64*, i64** %Sp_Var
  %lnacw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnacu( i64* %Base_Arg, i64* %lnacv, i64* %Hp_Arg, i64 %lnacw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.574134 UTC

@c9W9_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9W9_info$def to i8*)
define internal ghccc void @c9W9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9W9_info$def to i64)),i64 0), i64 362063, i64 4539780431902}>
{
c9W9:
  %ls955 = alloca i64, i32 1
  %ls95p = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls957 = alloca i64, i32 1
  %ls95u = alloca i64, i32 1
  %ls95o = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnacx = load i64*, i64** %Sp_Var
  %lnacy = getelementptr inbounds i64, i64* %lnacx, i32 5
  %lnacz = bitcast i64* %lnacy to i64*
  %lnacA = load i64, i64* %lnacz, !tbaa !2
  store i64 %lnacA, i64* %ls955
  %lnacD = load i64, i64* %R1_Var
  %lnacE = add i64 %lnacD, 7
  %lnacF = inttoptr i64 %lnacE to i64*
  %lnacG = load i64, i64* %lnacF, !tbaa !4
  store i64 %lnacG, i64* %ls95p
  %lnacH = load i64, i64* %ls955
  %lnacI = load i64, i64* %ls95p
  %lnacJ = icmp sle i64 %lnacH, %lnacI
  %lnacK = zext i1 %lnacJ to i64
  switch i64 %lnacK, label %u9YX [i64 1, label %c9Xq]
u9YX:
  %lnacL = load i64*, i64** %Sp_Var
  %lnacM = getelementptr inbounds i64, i64* %lnacL, i32 16
  %lnacN = ptrtoint i64* %lnacM to i64
  %lnacO = inttoptr i64 %lnacN to i64*
  store i64* %lnacO, i64** %Sp_Var
  br label %u9Zo
u9Zo:
  %lnacP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9Wt$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnacQ = load i64*, i64** %Sp_Var
  %lnacR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnacP( i64* %Base_Arg, i64* %lnacQ, i64* %Hp_Arg, i64 %lnacR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Xq:
  %lnacS = load i64*, i64** %Sp_Var
  %lnacT = getelementptr inbounds i64, i64* %lnacS, i32 4
  %lnacU = bitcast i64* %lnacT to i64*
  %lnacV = load i64, i64* %lnacU, !tbaa !2
  store i64 %lnacV, i64* %ls957
  %lnacW = load i64, i64* %ls95p
  %lnacX = load i64, i64* %ls957
  %lnacY = icmp sle i64 %lnacW, %lnacX
  %lnacZ = zext i1 %lnacY to i64
  switch i64 %lnacZ, label %u9YY [i64 1, label %c9Xp]
u9YY:
  %lnad0 = load i64*, i64** %Sp_Var
  %lnad1 = getelementptr inbounds i64, i64* %lnad0, i32 16
  %lnad2 = ptrtoint i64* %lnad1 to i64
  %lnad3 = inttoptr i64 %lnad2 to i64*
  store i64* %lnad3, i64** %Sp_Var
  br label %u9Zo
c9Xp:
  %lnad4 = load i64*, i64** %Sp_Var
  %lnad5 = getelementptr inbounds i64, i64* %lnad4, i32 1
  %lnad6 = bitcast i64* %lnad5 to i64*
  %lnad7 = load i64, i64* %lnad6, !tbaa !2
  %lnad8 = load i64*, i64** %Sp_Var
  %lnad9 = getelementptr inbounds i64, i64* %lnad8, i32 11
  %lnada = bitcast i64* %lnad9 to i64*
  %lnadb = load i64, i64* %lnada, !tbaa !2
  %lnadc = sub i64 %lnad7, %lnadb
  %lnadd = load i64, i64* %ls957
  %lnade = load i64, i64* %ls955
  %lnadf = sub i64 1, %lnade
  %lnadg = add i64 %lnadd, %lnadf
  %lnadh = mul i64 %lnadc, %lnadg
  %lnadi = load i64, i64* %ls95p
  %lnadj = load i64, i64* %ls955
  %lnadk = sub i64 %lnadi, %lnadj
  %lnadl = add i64 %lnadh, %lnadk
  store i64 %lnadl, i64* %ls95u
  %lnadm = load i64, i64* %ls95u
  %lnadn = icmp sle i64 0, %lnadm
  %lnado = zext i1 %lnadn to i64
  switch i64 %lnado, label %c9WR [i64 1, label %c9WV]
c9WR:
  %lnadq = load i64, i64* %ls95u
  %lnadp = load i64*, i64** %Sp_Var
  %lnadr = getelementptr inbounds i64, i64* %lnadp, i32 15
  store i64 %lnadq, i64* %lnadr, !tbaa !2
  %lnads = load i64*, i64** %Sp_Var
  %lnadt = getelementptr inbounds i64, i64* %lnads, i32 9
  %lnadu = ptrtoint i64* %lnadt to i64
  %lnadv = inttoptr i64 %lnadu to i64*
  store i64* %lnadv, i64** %Sp_Var
  %lnadw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s95a$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnadx = load i64*, i64** %Sp_Var
  %lnady = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnadw( i64* %Base_Arg, i64* %lnadx, i64* %Hp_Arg, i64 %lnady, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9WV:
  %lnadA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9WU_info$def to i64
  %lnadz = load i64*, i64** %Sp_Var
  %lnadB = getelementptr inbounds i64, i64* %lnadz, i32 -1
  store i64 %lnadA, i64* %lnadB, !tbaa !2
  %lnadC = load i64, i64* %R1_Var
  store i64 %lnadC, i64* %ls95o
  %lnadD = load i64*, i64** %Sp_Var
  %lnadE = getelementptr inbounds i64, i64* %lnadD, i32 9
  %lnadF = bitcast i64* %lnadE to i64*
  %lnadG = load i64, i64* %lnadF, !tbaa !2
  store i64 %lnadG, i64* %R1_Var
  %lnadI = load i64, i64* %ls95u
  %lnadH = load i64*, i64** %Sp_Var
  %lnadJ = getelementptr inbounds i64, i64* %lnadH, i32 0
  store i64 %lnadI, i64* %lnadJ, !tbaa !2
  %lnadL = load i64, i64* %ls95o
  %lnadK = load i64*, i64** %Sp_Var
  %lnadM = getelementptr inbounds i64, i64* %lnadK, i32 1
  store i64 %lnadL, i64* %lnadM, !tbaa !2
  %lnadN = load i64*, i64** %Sp_Var
  %lnadO = getelementptr inbounds i64, i64* %lnadN, i32 -1
  %lnadP = ptrtoint i64* %lnadO to i64
  %lnadQ = inttoptr i64 %lnadP to i64*
  store i64* %lnadQ, i64** %Sp_Var
  %lnadR = load i64, i64* %R1_Var
  %lnadS = and i64 %lnadR, 7
  %lnadT = icmp ne i64 %lnadS, 0
  br i1 %lnadT, label %u9Zm, label %c9WW
c9WW:
  %lnadV = load i64, i64* %R1_Var
  %lnadW = inttoptr i64 %lnadV to i64*
  %lnadX = load i64, i64* %lnadW, !tbaa !4
  %lnadY = inttoptr i64 %lnadX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnadZ = load i64*, i64** %Sp_Var
  %lnae0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnadY( i64* %Base_Arg, i64* %lnadZ, i64* %Hp_Arg, i64 %lnae0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9Zm:
  %lnae1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9WU_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnae2 = load i64*, i64** %Sp_Var
  %lnae3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnae1( i64* %Base_Arg, i64* %lnae2, i64* %Hp_Arg, i64 %lnae3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5811198 UTC

@c9WU_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9WU_info$def to i8*)
define internal ghccc void @c9WU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9WU_info$def to i64)),i64 0), i64 724048, i64 4539780431902}>
{
c9WU:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls95u = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls95E = alloca i64, i32 1
  %ls95H = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnae4 = load i64*, i64** %Hp_Var
  %lnae5 = getelementptr inbounds i64, i64* %lnae4, i32 3
  %lnae6 = ptrtoint i64* %lnae5 to i64
  %lnae7 = inttoptr i64 %lnae6 to i64*
  store i64* %lnae7, i64** %Hp_Var
  %lnae8 = load i64*, i64** %Hp_Var
  %lnae9 = ptrtoint i64* %lnae8 to i64
  %lnaea = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaeb = bitcast i64* %lnaea to i64*
  %lnaec = load i64, i64* %lnaeb, !tbaa !5
  %lnaed = icmp ugt i64 %lnae9, %lnaec
  %lnaee = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaed, i1 0 )
  br i1 %lnaee, label %c9X2, label %c9X1
c9X1:
  %lnaef = load i64*, i64** %Sp_Var
  %lnaeg = getelementptr inbounds i64, i64* %lnaef, i32 1
  %lnaeh = bitcast i64* %lnaeg to i64*
  %lnaei = load i64, i64* %lnaeh, !tbaa !2
  store i64 %lnaei, i64* %ls95u
  %lnaej = load i64, i64* %ls95u
  %lnaem = load i64, i64* %R1_Var
  %lnaen = add i64 %lnaem, 7
  %lnaeo = inttoptr i64 %lnaen to i64*
  %lnaep = load i64, i64* %lnaeo, !tbaa !4
  %lnaeq = icmp slt i64 %lnaej, %lnaep
  %lnaer = zext i1 %lnaeq to i64
  switch i64 %lnaer, label %c9X6 [i64 1, label %c9Xe]
c9X6:
  %lnaes = load i64*, i64** %Hp_Var
  %lnaet = getelementptr inbounds i64, i64* %lnaes, i32 -3
  %lnaeu = ptrtoint i64* %lnaet to i64
  %lnaev = inttoptr i64 %lnaeu to i64*
  store i64* %lnaev, i64** %Hp_Var
  %lnaex = load i64, i64* %ls95u
  %lnaew = load i64*, i64** %Sp_Var
  %lnaey = getelementptr inbounds i64, i64* %lnaew, i32 16
  store i64 %lnaex, i64* %lnaey, !tbaa !2
  %lnaez = load i64*, i64** %Sp_Var
  %lnaeA = getelementptr inbounds i64, i64* %lnaez, i32 10
  %lnaeB = ptrtoint i64* %lnaeA to i64
  %lnaeC = inttoptr i64 %lnaeB to i64*
  store i64* %lnaeC, i64** %Sp_Var
  %lnaeD = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s95a$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaeE = load i64*, i64** %Sp_Var
  %lnaeF = load i64*, i64** %Hp_Var
  %lnaeG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaeD( i64* %Base_Arg, i64* %lnaeE, i64* %lnaeF, i64 %lnaeG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Xe:
  %lnaeI = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnaeH = load i64*, i64** %Hp_Var
  %lnaeJ = getelementptr inbounds i64, i64* %lnaeH, i32 -2
  store i64 %lnaeI, i64* %lnaeJ, !tbaa !3
  %lnaeL = load i64*, i64** %Sp_Var
  %lnaeM = getelementptr inbounds i64, i64* %lnaeL, i32 4
  %lnaeN = bitcast i64* %lnaeM to i64*
  %lnaeO = load i64, i64* %lnaeN, !tbaa !2
  %lnaeK = load i64*, i64** %Hp_Var
  %lnaeP = getelementptr inbounds i64, i64* %lnaeK, i32 -1
  store i64 %lnaeO, i64* %lnaeP, !tbaa !3
  %lnaeR = load i64*, i64** %Sp_Var
  %lnaeS = getelementptr inbounds i64, i64* %lnaeR, i32 2
  %lnaeT = bitcast i64* %lnaeS to i64*
  %lnaeU = load i64, i64* %lnaeT, !tbaa !2
  %lnaeQ = load i64*, i64** %Hp_Var
  %lnaeV = getelementptr inbounds i64, i64* %lnaeQ, i32 0
  store i64 %lnaeU, i64* %lnaeV, !tbaa !3
  %lnaeW = load i64, i64* %ls95u
  %lnaeX = ashr i64 %lnaeW, 6
  store i64 %lnaeX, i64* %ls95E
  %lnaeY = load i64*, i64** %Sp_Var
  %lnaeZ = getelementptr inbounds i64, i64* %lnaeY, i32 9
  %lnaf0 = bitcast i64* %lnaeZ to i64*
  %lnaf1 = load i64, i64* %lnaf0, !tbaa !2
  %lnaf2 = load i64, i64* %ls95E
  %lnaf3 = shl i64 %lnaf2, 3
  %lnaf4 = add i64 %lnaf3, 16
  %lnaf5 = add i64 %lnaf1, %lnaf4
  %lnaf6 = inttoptr i64 %lnaf5 to i64*
  %lnaf7 = load i64, i64* %lnaf6, !tbaa !1
  store i64 %lnaf7, i64* %ls95H
  %lnaf9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xd_info$def to i64
  %lnaf8 = load i64*, i64** %Sp_Var
  %lnafa = getelementptr inbounds i64, i64* %lnaf8, i32 0
  store i64 %lnaf9, i64* %lnafa, !tbaa !2
  %lnafc = load i64*, i64** %Hp_Var
  %lnafd = ptrtoint i64* %lnafc to i64
  %lnafe = add i64 %lnafd, -15
  store i64 %lnafe, i64* %R2_Var
  %lnaff = load i64*, i64** %Sp_Var
  %lnafg = getelementptr inbounds i64, i64* %lnaff, i32 16
  %lnafh = bitcast i64* %lnafg to i64*
  %lnafi = load i64, i64* %lnafh, !tbaa !2
  store i64 %lnafi, i64* %R1_Var
  %lnafk = load i64, i64* %ls95H
  %lnafj = load i64*, i64** %Sp_Var
  %lnafl = getelementptr inbounds i64, i64* %lnafj, i32 2
  store i64 %lnafk, i64* %lnafl, !tbaa !2
  %lnafn = load i64, i64* %ls95E
  %lnafm = load i64*, i64** %Sp_Var
  %lnafo = getelementptr inbounds i64, i64* %lnafm, i32 4
  store i64 %lnafn, i64* %lnafo, !tbaa !2
  %lnafp = bitcast i8* @stg_ap_p_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnafq = load i64*, i64** %Sp_Var
  %lnafr = load i64*, i64** %Hp_Var
  %lnafs = load i64, i64* %R1_Var
  %lnaft = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnafp( i64* %Base_Arg, i64* %lnafq, i64* %lnafr, i64 %lnafs, i64 %lnaft, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9X2:
  %lnafu = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnafu, !tbaa !5
  %lnafv = load i64, i64* %R1_Var
  store i64 %lnafv, i64* %R1_Var
  %lnafw = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnafx = load i64*, i64** %Sp_Var
  %lnafy = load i64*, i64** %Hp_Var
  %lnafz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnafw( i64* %Base_Arg, i64* %lnafx, i64* %lnafy, i64 %lnafz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5881076 UTC

@c9Xd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xd_info$def to i8*)
define internal ghccc void @c9Xd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xd_info$def to i64)),i64 0), i64 724688, i64 4539780431902}>
{
c9Xd:
  %ls94o = alloca i64, i32 1
  %ls95h = alloca i64, i32 1
  %ls95u = alloca i64, i32 1
  %ls95E = alloca i64, i32 1
  %ls95H = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnafA = load i64*, i64** %Sp_Var
  %lnafB = getelementptr inbounds i64, i64* %lnafA, i32 9
  %lnafC = bitcast i64* %lnafB to i64*
  %lnafD = load i64, i64* %lnafC, !tbaa !2
  store i64 %lnafD, i64* %ls94o
  %lnafE = load i64*, i64** %Sp_Var
  %lnafF = getelementptr inbounds i64, i64* %lnafE, i32 3
  %lnafG = bitcast i64* %lnafF to i64*
  %lnafH = load i64, i64* %lnafG, !tbaa !2
  store i64 %lnafH, i64* %ls95h
  %lnafI = load i64*, i64** %Sp_Var
  %lnafJ = getelementptr inbounds i64, i64* %lnafI, i32 1
  %lnafK = bitcast i64* %lnafJ to i64*
  %lnafL = load i64, i64* %lnafK, !tbaa !2
  store i64 %lnafL, i64* %ls95u
  %lnafM = load i64*, i64** %Sp_Var
  %lnafN = getelementptr inbounds i64, i64* %lnafM, i32 4
  %lnafO = bitcast i64* %lnafN to i64*
  %lnafP = load i64, i64* %lnafO, !tbaa !2
  store i64 %lnafP, i64* %ls95E
  %lnafQ = load i64*, i64** %Sp_Var
  %lnafR = getelementptr inbounds i64, i64* %lnafQ, i32 2
  %lnafS = bitcast i64* %lnafR to i64*
  %lnafT = load i64, i64* %lnafS, !tbaa !2
  store i64 %lnafT, i64* %ls95H
  %lnafU = and i64 %R1_Arg, 7
  switch i64 %lnafU, label %c9Xk [i64 1, label %c9Xk
                                  i64 2, label %c9Xo]
c9Xk:
  %lnafV = load i64, i64* %ls94o
  %lnafW = add i64 %lnafV, 16
  %lnafX = load i64, i64* %ls95E
  %lnafY = shl i64 %lnafX, 3
  %lnafZ = add i64 %lnafW, %lnafY
  %lnag0 = load i64, i64* %ls95H
  %lnag1 = load i64, i64* %ls95u
  %lnag2 = and i64 %lnag1, 63
  %lnag3 = shl i64 1, %lnag2
  %lnag4 = xor i64 %lnag3, -1
  %lnag5 = and i64 %lnag0, %lnag4
  %lnag6 = inttoptr i64 %lnafZ to i64*
  store i64 %lnag5, i64* %lnag6, !tbaa !1
  %lnag8 = load i64, i64* %ls95h
  %lnag7 = load i64*, i64** %Sp_Var
  %lnag9 = getelementptr inbounds i64, i64* %lnag7, i32 4
  store i64 %lnag8, i64* %lnag9, !tbaa !2
  %lnaga = load i64*, i64** %Sp_Var
  %lnagb = getelementptr inbounds i64, i64* %lnaga, i32 4
  %lnagc = ptrtoint i64* %lnagb to i64
  %lnagd = inttoptr i64 %lnagc to i64*
  store i64* %lnagd, i64** %Sp_Var
  br label %u9Zu
u9Zu:
  %lnage = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9Vy$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnagf = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnage( i64* %Base_Arg, i64* %lnagf, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Xo:
  %lnagg = load i64, i64* %ls94o
  %lnagh = add i64 %lnagg, 16
  %lnagi = load i64, i64* %ls95E
  %lnagj = shl i64 %lnagi, 3
  %lnagk = add i64 %lnagh, %lnagj
  %lnagl = load i64, i64* %ls95H
  %lnagm = load i64, i64* %ls95u
  %lnagn = and i64 %lnagm, 63
  %lnago = shl i64 1, %lnagn
  %lnagp = or i64 %lnagl, %lnago
  %lnagq = inttoptr i64 %lnagk to i64*
  store i64 %lnagp, i64* %lnagq, !tbaa !1
  %lnags = load i64, i64* %ls95h
  %lnagr = load i64*, i64** %Sp_Var
  %lnagt = getelementptr inbounds i64, i64* %lnagr, i32 4
  store i64 %lnags, i64* %lnagt, !tbaa !2
  %lnagu = load i64*, i64** %Sp_Var
  %lnagv = getelementptr inbounds i64, i64* %lnagu, i32 4
  %lnagw = ptrtoint i64* %lnagv to i64
  %lnagx = inttoptr i64 %lnagw to i64*
  store i64* %lnagx, i64** %Sp_Var
  br label %u9Zu
}


==================== LLVM Code ====================
2018-12-28 09:14:26.5941007 UTC

@_s95a = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s95a$def to i8*)
define internal ghccc void @_s95a$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
s95a:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnagz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ur_info$def to i64
  %lnagy = load i64*, i64** %Sp_Var
  %lnagA = getelementptr inbounds i64, i64* %lnagy, i32 5
  store i64 %lnagz, i64* %lnagA, !tbaa !2
  %lnagB = load i64*, i64** %Sp_Var
  %lnagC = getelementptr inbounds i64, i64* %lnagB, i32 0
  %lnagD = bitcast i64* %lnagC to i64*
  %lnagE = load i64, i64* %lnagD, !tbaa !2
  store i64 %lnagE, i64* %R1_Var
  %lnagG = load i64*, i64** %Sp_Var
  %lnagH = getelementptr inbounds i64, i64* %lnagG, i32 6
  %lnagI = bitcast i64* %lnagH to i64*
  %lnagJ = load i64, i64* %lnagI, !tbaa !2
  %lnagF = load i64*, i64** %Sp_Var
  %lnagK = getelementptr inbounds i64, i64* %lnagF, i32 6
  store i64 %lnagJ, i64* %lnagK, !tbaa !2
  %lnagL = load i64*, i64** %Sp_Var
  %lnagM = getelementptr inbounds i64, i64* %lnagL, i32 5
  %lnagN = ptrtoint i64* %lnagM to i64
  %lnagO = inttoptr i64 %lnagN to i64*
  store i64* %lnagO, i64** %Sp_Var
  %lnagP = load i64, i64* %R1_Var
  %lnagQ = and i64 %lnagP, 7
  %lnagR = icmp ne i64 %lnagQ, 0
  br i1 %lnagR, label %u9ZC, label %c9Us
c9Us:
  %lnagT = load i64, i64* %R1_Var
  %lnagU = inttoptr i64 %lnagT to i64*
  %lnagV = load i64, i64* %lnagU, !tbaa !4
  %lnagW = inttoptr i64 %lnagV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnagX = load i64*, i64** %Sp_Var
  %lnagY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnagW( i64* %Base_Arg, i64* %lnagX, i64* %Hp_Arg, i64 %lnagY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9ZC:
  %lnagZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ur_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnah0 = load i64*, i64** %Sp_Var
  %lnah1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnagZ( i64* %Base_Arg, i64* %lnah0, i64* %Hp_Arg, i64 %lnah1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.599091 UTC

@c9Ur_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ur_info$def to i8*)
define internal ghccc void @c9Ur_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ur_info$def to i64)),i64 80), i64 65, i64 4294967326}>
{
c9Ur:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnah2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UD_info$def to i64
  %lnah3 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnah2, i64* %lnah3, !tbaa !2
  %lnah4 = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %lnah5 = add i64 %lnah4, 1
  store i64 %lnah5, i64* %R4_Var
  %lnah6 = add i64 %R1_Arg, 7
  %lnah7 = inttoptr i64 %lnah6 to i64*
  %lnah8 = load i64, i64* %lnah7, !tbaa !4
  store i64 %lnah8, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %lnah9 = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaha = load i64, i64* %R2_Var
  %lnahb = load i64, i64* %R3_Var
  %lnahc = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnah9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaha, i64 %lnahb, i64 %lnahc, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6050841 UTC

@c9UD_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UD_info$def to i8*)
define internal ghccc void @c9UD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9UD_info$def to i64)),i64 80), i64 65, i64 4294967326}>
{
c9UD:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls94Q = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnahd = load i64*, i64** %Hp_Var
  %lnahe = getelementptr inbounds i64, i64* %lnahd, i32 3
  %lnahf = ptrtoint i64* %lnahe to i64
  %lnahg = inttoptr i64 %lnahf to i64*
  store i64* %lnahg, i64** %Hp_Var
  %lnahh = load i64*, i64** %Hp_Var
  %lnahi = ptrtoint i64* %lnahh to i64
  %lnahj = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnahk = bitcast i64* %lnahj to i64*
  %lnahl = load i64, i64* %lnahk, !tbaa !5
  %lnahm = icmp ugt i64 %lnahi, %lnahl
  %lnahn = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnahm, i1 0 )
  br i1 %lnahn, label %c9UI, label %c9UH
c9UH:
  %lnahp = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %lnaho = load i64*, i64** %Hp_Var
  %lnahq = getelementptr inbounds i64, i64* %lnaho, i32 -2
  store i64 %lnahp, i64* %lnahq, !tbaa !3
  %lnahs = load i64, i64* %R1_Var
  %lnahr = load i64*, i64** %Hp_Var
  %lnaht = getelementptr inbounds i64, i64* %lnahr, i32 -1
  store i64 %lnahs, i64* %lnaht, !tbaa !3
  %lnahv = load i64, i64* %R2_Var
  %lnahu = load i64*, i64** %Hp_Var
  %lnahw = getelementptr inbounds i64, i64* %lnahu, i32 0
  store i64 %lnahv, i64* %lnahw, !tbaa !3
  %lnahx = load i64*, i64** %Sp_Var
  %lnahy = getelementptr inbounds i64, i64* %lnahx, i32 1
  %lnahz = bitcast i64* %lnahy to i64*
  %lnahA = load i64, i64* %lnahz, !tbaa !2
  store i64 %lnahA, i64* %ls94Q
  %lnahC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xt_info$def to i64
  %lnahB = load i64*, i64** %Sp_Var
  %lnahD = getelementptr inbounds i64, i64* %lnahB, i32 1
  store i64 %lnahC, i64* %lnahD, !tbaa !2
  %lnahE = load i64, i64* %ls94Q
  store i64 %lnahE, i64* %R3_Var
  %lnahG = load i64*, i64** %Hp_Var
  %lnahH = ptrtoint i64* %lnahG to i64
  %lnahI = add i64 %lnahH, -14
  store i64 %lnahI, i64* %R2_Var
  %lnahJ = load i64*, i64** %Sp_Var
  %lnahK = getelementptr inbounds i64, i64* %lnahJ, i32 1
  %lnahL = ptrtoint i64* %lnahK to i64
  %lnahM = inttoptr i64 %lnahL to i64*
  store i64* %lnahM, i64** %Sp_Var
  %lnahN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r92h_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnahO = load i64*, i64** %Sp_Var
  %lnahP = load i64*, i64** %Hp_Var
  %lnahQ = load i64, i64* %R1_Var
  %lnahR = load i64, i64* %R2_Var
  %lnahS = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnahN( i64* %Base_Arg, i64* %lnahO, i64* %lnahP, i64 %lnahQ, i64 %lnahR, i64 %lnahS, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9UI:
  %lnahT = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnahT, !tbaa !5
  %lnahU = load i64, i64* %R2_Var
  store i64 %lnahU, i64* %R2_Var
  %lnahV = load i64, i64* %R1_Var
  store i64 %lnahV, i64* %R1_Var
  %lnahW = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnahX = load i64*, i64** %Sp_Var
  %lnahY = load i64*, i64** %Hp_Var
  %lnahZ = load i64, i64* %R1_Var
  %lnai0 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnahW( i64* %Base_Arg, i64* %lnahX, i64* %lnahY, i64 %lnahZ, i64 %lnai0, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6110735 UTC

@_c9Wt = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9Wt$def to i8*)
define internal ghccc void @_c9Wt$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c9Wt:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnai2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xt_info$def to i64
  %lnai1 = load i64*, i64** %Sp_Var
  %lnai3 = getelementptr inbounds i64, i64* %lnai1, i32 -1
  store i64 %lnai2, i64* %lnai3, !tbaa !2
  %lnai4 = ptrtoint i8* @base_GHCziArr_hopelessIndexError_closure to i64
  store i64 %lnai4, i64* %R1_Var
  %lnai5 = load i64, i64* %R1_Var
  %lnai6 = and i64 %lnai5, 7
  %lnai7 = icmp ne i64 %lnai6, 0
  br i1 %lnai7, label %u9Z3, label %u9Zq
u9Zq:
  %lnai8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9Xv$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnai9 = load i64*, i64** %Sp_Var
  %lnaia = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnai8( i64* %Base_Arg, i64* %lnai9, i64* %Hp_Arg, i64 %lnaia, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9Z3:
  %lnaib = load i64*, i64** %Sp_Var
  %lnaic = getelementptr inbounds i64, i64* %lnaib, i32 -1
  %lnaid = ptrtoint i64* %lnaic to i64
  %lnaie = inttoptr i64 %lnaid to i64*
  store i64* %lnaie, i64** %Sp_Var
  %lnaif = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xt_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaig = load i64*, i64** %Sp_Var
  %lnaih = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaif( i64* %Base_Arg, i64* %lnaig, i64* %Hp_Arg, i64 %lnaih, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6150665 UTC

@_c9Xv = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9Xv$def to i8*)
define internal ghccc void @_c9Xv$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c9Xv:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaii = load i64*, i64** %Sp_Var
  %lnaij = getelementptr inbounds i64, i64* %lnaii, i32 -1
  %lnaik = ptrtoint i64* %lnaij to i64
  %lnail = inttoptr i64 %lnaik to i64*
  store i64* %lnail, i64** %Sp_Var
  %lnaim = inttoptr i64 %R1_Arg to i64*
  %lnain = load i64, i64* %lnaim, !tbaa !4
  %lnaio = inttoptr i64 %lnain to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaip = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaio( i64* %Base_Arg, i64* %lnaip, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6190603 UTC

@c9Xt_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Xt_info$def to i8*)
define internal ghccc void @c9Xt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 30}>
{
c9Xt:
  %lnaiq = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lnaiq, !tbaa !2
  %lnair = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9U5$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnair( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6240544 UTC

@c9Uh_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Uh_info$def to i8*)
define internal ghccc void @c9Uh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 11144, i64 30}>
{
c9Uh:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnais = load i64*, i64** %Hp_Var
  %lnait = getelementptr inbounds i64, i64* %lnais, i32 15
  %lnaiu = ptrtoint i64* %lnait to i64
  %lnaiv = inttoptr i64 %lnaiu to i64*
  store i64* %lnaiv, i64** %Hp_Var
  %lnaiw = load i64*, i64** %Hp_Var
  %lnaix = ptrtoint i64* %lnaiw to i64
  %lnaiy = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaiz = bitcast i64* %lnaiy to i64*
  %lnaiA = load i64, i64* %lnaiz, !tbaa !5
  %lnaiB = icmp ugt i64 %lnaix, %lnaiA
  %lnaiC = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaiB, i1 0 )
  br i1 %lnaiC, label %c9Ul, label %c9Uk
c9Uk:
  %lnaiE = ptrtoint i8* @base_GHCziInt_I8zh_con_info to i64
  %lnaiD = load i64*, i64** %Hp_Var
  %lnaiF = getelementptr inbounds i64, i64* %lnaiD, i32 -14
  store i64 %lnaiE, i64* %lnaiF, !tbaa !3
  %lnaiH = load i64*, i64** %Sp_Var
  %lnaiI = getelementptr inbounds i64, i64* %lnaiH, i32 6
  %lnaiJ = bitcast i64* %lnaiI to i64*
  %lnaiK = load i64, i64* %lnaiJ, !tbaa !2
  %lnaiG = load i64*, i64** %Hp_Var
  %lnaiL = getelementptr inbounds i64, i64* %lnaiG, i32 -13
  store i64 %lnaiK, i64* %lnaiL, !tbaa !3
  %lnaiN = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnaiM = load i64*, i64** %Hp_Var
  %lnaiO = getelementptr inbounds i64, i64* %lnaiM, i32 -12
  store i64 %lnaiN, i64* %lnaiO, !tbaa !3
  %lnaiR = load i64*, i64** %Hp_Var
  %lnaiS = ptrtoint i64* %lnaiR to i64
  %lnaiT = add i64 %lnaiS, -111
  %lnaiP = load i64*, i64** %Hp_Var
  %lnaiU = getelementptr inbounds i64, i64* %lnaiP, i32 -11
  store i64 %lnaiT, i64* %lnaiU, !tbaa !3
  %lnaiW = load i64*, i64** %Sp_Var
  %lnaiX = getelementptr inbounds i64, i64* %lnaiW, i32 7
  %lnaiY = bitcast i64* %lnaiX to i64*
  %lnaiZ = load i64, i64* %lnaiY, !tbaa !2
  %lnaiV = load i64*, i64** %Hp_Var
  %lnaj0 = getelementptr inbounds i64, i64* %lnaiV, i32 -10
  store i64 %lnaiZ, i64* %lnaj0, !tbaa !3
  %lnaj2 = ptrtoint i8* @base_GHCziInt_I8zh_con_info to i64
  %lnaj1 = load i64*, i64** %Hp_Var
  %lnaj3 = getelementptr inbounds i64, i64* %lnaj1, i32 -9
  store i64 %lnaj2, i64* %lnaj3, !tbaa !3
  %lnaj5 = load i64*, i64** %Sp_Var
  %lnaj6 = getelementptr inbounds i64, i64* %lnaj5, i32 4
  %lnaj7 = bitcast i64* %lnaj6 to i64*
  %lnaj8 = load i64, i64* %lnaj7, !tbaa !2
  %lnaj4 = load i64*, i64** %Hp_Var
  %lnaj9 = getelementptr inbounds i64, i64* %lnaj4, i32 -8
  store i64 %lnaj8, i64* %lnaj9, !tbaa !3
  %lnajb = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnaja = load i64*, i64** %Hp_Var
  %lnajc = getelementptr inbounds i64, i64* %lnaja, i32 -7
  store i64 %lnajb, i64* %lnajc, !tbaa !3
  %lnajf = load i64*, i64** %Hp_Var
  %lnajg = ptrtoint i64* %lnajf to i64
  %lnajh = add i64 %lnajg, -71
  %lnajd = load i64*, i64** %Hp_Var
  %lnaji = getelementptr inbounds i64, i64* %lnajd, i32 -6
  store i64 %lnajh, i64* %lnaji, !tbaa !3
  %lnajk = load i64*, i64** %Sp_Var
  %lnajl = getelementptr inbounds i64, i64* %lnajk, i32 5
  %lnajm = bitcast i64* %lnajl to i64*
  %lnajn = load i64, i64* %lnajm, !tbaa !2
  %lnajj = load i64*, i64** %Hp_Var
  %lnajo = getelementptr inbounds i64, i64* %lnajj, i32 -5
  store i64 %lnajn, i64* %lnajo, !tbaa !3
  %lnajq = ptrtoint i8* @arrayzm0zi5zi2zi0_DataziArrayziBase_UArray_con_info to i64
  %lnajp = load i64*, i64** %Hp_Var
  %lnajr = getelementptr inbounds i64, i64* %lnajp, i32 -4
  store i64 %lnajq, i64* %lnajr, !tbaa !3
  %lnaju = load i64*, i64** %Hp_Var
  %lnajv = ptrtoint i64* %lnaju to i64
  %lnajw = add i64 %lnajv, -55
  %lnajs = load i64*, i64** %Hp_Var
  %lnajx = getelementptr inbounds i64, i64* %lnajs, i32 -3
  store i64 %lnajw, i64* %lnajx, !tbaa !3
  %lnajA = load i64*, i64** %Hp_Var
  %lnajB = ptrtoint i64* %lnajA to i64
  %lnajC = add i64 %lnajB, -95
  %lnajy = load i64*, i64** %Hp_Var
  %lnajD = getelementptr inbounds i64, i64* %lnajy, i32 -2
  store i64 %lnajC, i64* %lnajD, !tbaa !3
  %lnajF = load i64*, i64** %Sp_Var
  %lnajG = getelementptr inbounds i64, i64* %lnajF, i32 1
  %lnajH = bitcast i64* %lnajG to i64*
  %lnajI = load i64, i64* %lnajH, !tbaa !2
  %lnajE = load i64*, i64** %Hp_Var
  %lnajJ = getelementptr inbounds i64, i64* %lnajE, i32 -1
  store i64 %lnajI, i64* %lnajJ, !tbaa !3
  %lnajL = load i64*, i64** %Sp_Var
  %lnajM = getelementptr inbounds i64, i64* %lnajL, i32 3
  %lnajN = bitcast i64* %lnajM to i64*
  %lnajO = load i64, i64* %lnajN, !tbaa !2
  %lnajK = load i64*, i64** %Hp_Var
  %lnajP = getelementptr inbounds i64, i64* %lnajK, i32 0
  store i64 %lnajO, i64* %lnajP, !tbaa !3
  %lnajS = load i64*, i64** %Hp_Var
  %lnajT = ptrtoint i64* %lnajS to i64
  %lnajU = add i64 %lnajT, -31
  %lnajQ = load i64*, i64** %Sp_Var
  %lnajV = getelementptr inbounds i64, i64* %lnajQ, i32 8
  store i64 %lnajU, i64* %lnajV, !tbaa !2
  %lnajW = load i64*, i64** %Sp_Var
  %lnajX = getelementptr inbounds i64, i64* %lnajW, i32 8
  %lnajY = ptrtoint i64* %lnajX to i64
  %lnajZ = inttoptr i64 %lnajY to i64*
  store i64* %lnajZ, i64** %Sp_Var
  %lnak0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9U5$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnak1 = load i64*, i64** %Sp_Var
  %lnak2 = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnak0( i64* %Base_Arg, i64* %lnak1, i64* %lnak2, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Ul:
  %lnak3 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 120, i64* %lnak3, !tbaa !5
  %lnak5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Uh_info$def to i64
  %lnak4 = load i64*, i64** %Sp_Var
  %lnak6 = getelementptr inbounds i64, i64* %lnak4, i32 0
  store i64 %lnak5, i64* %lnak6, !tbaa !2
  %lnak7 = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnak8 = load i64*, i64** %Sp_Var
  %lnak9 = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnak7( i64* %Base_Arg, i64* %lnak8, i64* %lnak9, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.631044 UTC

@_c9U5 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_c9U5$def to i8*)
define internal ghccc void @_c9U5$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c9U5:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaka = load i64*, i64** %Sp_Var
  %lnakb = getelementptr inbounds i64, i64* %lnaka, i32 0
  %lnakc = bitcast i64* %lnakb to i64*
  %lnakd = load i64, i64* %lnakc, !tbaa !2
  %lnake = and i64 %lnakd, -8
  store i64 %lnake, i64* %R1_Var
  %lnakf = load i64*, i64** %Sp_Var
  %lnakg = getelementptr inbounds i64, i64* %lnakf, i32 1
  %lnakh = ptrtoint i64* %lnakg to i64
  %lnaki = inttoptr i64 %lnakh to i64*
  store i64* %lnaki, i64** %Sp_Var
  %lnakk = load i64, i64* %R1_Var
  %lnakl = inttoptr i64 %lnakk to i64*
  %lnakm = load i64, i64* %lnakl, !tbaa !4
  %lnakn = inttoptr i64 %lnakm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnako = load i64*, i64** %Sp_Var
  %lnakp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnakn( i64* %Base_Arg, i64* %lnako, i64* %Hp_Arg, i64 %lnakp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6420268 UTC

%Main_zdwarrayByIndex_closure_struct = type <{i64, i64}>
@Main_zdwarrayByIndex_closure$def = internal global %Main_zdwarrayByIndex_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwarrayByIndex_info$def to i64), i64 0}>
@Main_zdwarrayByIndex_closure = alias i8, bitcast (%Main_zdwarrayByIndex_closure_struct* @Main_zdwarrayByIndex_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.6470196 UTC

@s96n_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96n_info$def to i8*)
define internal ghccc void @s96n_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96n_info$def to i64)),i64 88), i64 3, i64 4294967311}>
{
cakG:
  %ls96n = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls96h = alloca i64, i32 1
  %ls96i = alloca i64, i32 1
  %ls96j = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnamX = load i64, i64* %R1_Var
  store i64 %lnamX, i64* %ls96n
  %lnamY = load i64*, i64** %Sp_Var
  %lnamZ = getelementptr inbounds i64, i64* %lnamY, i32 -5
  %lnan0 = ptrtoint i64* %lnamZ to i64
  %lnan1 = icmp ult i64 %lnan0, %SpLim_Arg
  %lnan2 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnan1, i1 0 )
  br i1 %lnan2, label %cakH, label %cakI
cakI:
  %lnan3 = load i64*, i64** %Hp_Var
  %lnan4 = getelementptr inbounds i64, i64* %lnan3, i32 3
  %lnan5 = ptrtoint i64* %lnan4 to i64
  %lnan6 = inttoptr i64 %lnan5 to i64*
  store i64* %lnan6, i64** %Hp_Var
  %lnan7 = load i64*, i64** %Hp_Var
  %lnan8 = ptrtoint i64* %lnan7 to i64
  %lnan9 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnana = bitcast i64* %lnan9 to i64*
  %lnanb = load i64, i64* %lnana, !tbaa !5
  %lnanc = icmp ugt i64 %lnan8, %lnanb
  %lnand = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnanc, i1 0 )
  br i1 %lnand, label %cakK, label %cakJ
cakJ:
  %lnanf = ptrtoint i8* @stg_upd_frame_info to i64
  %lnane = load i64*, i64** %Sp_Var
  %lnang = getelementptr inbounds i64, i64* %lnane, i32 -2
  store i64 %lnanf, i64* %lnang, !tbaa !2
  %lnani = load i64, i64* %ls96n
  %lnanh = load i64*, i64** %Sp_Var
  %lnanj = getelementptr inbounds i64, i64* %lnanh, i32 -1
  store i64 %lnani, i64* %lnanj, !tbaa !2
  %lnank = load i64, i64* %ls96n
  %lnanl = add i64 %lnank, 16
  %lnanm = inttoptr i64 %lnanl to i64*
  %lnann = load i64, i64* %lnanm, !tbaa !1
  store i64 %lnann, i64* %ls96h
  %lnano = load i64, i64* %ls96n
  %lnanp = add i64 %lnano, 24
  %lnanq = inttoptr i64 %lnanp to i64*
  %lnanr = load i64, i64* %lnanq, !tbaa !1
  store i64 %lnanr, i64* %ls96i
  %lnans = load i64, i64* %ls96n
  %lnant = add i64 %lnans, 32
  %lnanu = inttoptr i64 %lnant to i64*
  %lnanv = load i64, i64* %lnanu, !tbaa !1
  store i64 %lnanv, i64* %ls96j
  %lnanx = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnanw = load i64*, i64** %Hp_Var
  %lnany = getelementptr inbounds i64, i64* %lnanw, i32 -2
  store i64 %lnanx, i64* %lnany, !tbaa !3
  %lnanA = load i64, i64* %ls96i
  %lnanz = load i64*, i64** %Hp_Var
  %lnanB = getelementptr inbounds i64, i64* %lnanz, i32 -1
  store i64 %lnanA, i64* %lnanB, !tbaa !3
  %lnanD = load i64, i64* %ls96j
  %lnanC = load i64*, i64** %Hp_Var
  %lnanE = getelementptr inbounds i64, i64* %lnanC, i32 0
  store i64 %lnanD, i64* %lnanE, !tbaa !3
  %lnanG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cakE_info$def to i64
  %lnanF = load i64*, i64** %Sp_Var
  %lnanH = getelementptr inbounds i64, i64* %lnanF, i32 -3
  store i64 %lnanG, i64* %lnanH, !tbaa !2
  %lnanI = load i64, i64* %ls96h
  store i64 %lnanI, i64* %R2_Var
  %lnanK = ptrtoint i8* @stg_ap_p_info to i64
  %lnanJ = load i64*, i64** %Sp_Var
  %lnanL = getelementptr inbounds i64, i64* %lnanJ, i32 -5
  store i64 %lnanK, i64* %lnanL, !tbaa !2
  %lnanO = load i64*, i64** %Hp_Var
  %lnanP = ptrtoint i64* %lnanO to i64
  %lnanQ = add i64 %lnanP, -15
  %lnanM = load i64*, i64** %Sp_Var
  %lnanR = getelementptr inbounds i64, i64* %lnanM, i32 -4
  store i64 %lnanQ, i64* %lnanR, !tbaa !2
  %lnanS = load i64*, i64** %Sp_Var
  %lnanT = getelementptr inbounds i64, i64* %lnanS, i32 -5
  %lnanU = ptrtoint i64* %lnanT to i64
  %lnanV = inttoptr i64 %lnanU to i64*
  store i64* %lnanV, i64** %Sp_Var
  %lnanW = bitcast i8* @base_GHCziArr_rangeSizze_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnanX = load i64*, i64** %Sp_Var
  %lnanY = load i64*, i64** %Hp_Var
  %lnanZ = load i64, i64* %R1_Var
  %lnao0 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnanW( i64* %Base_Arg, i64* %lnanX, i64* %lnanY, i64 %lnanZ, i64 %lnao0, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cakK:
  %lnao1 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnao1, !tbaa !5
  br label %cakH
cakH:
  %lnao2 = load i64, i64* %ls96n
  store i64 %lnao2, i64* %R1_Var
  %lnao3 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnao4 = bitcast i64* %lnao3 to i64*
  %lnao5 = load i64, i64* %lnao4, !tbaa !5
  %lnao6 = inttoptr i64 %lnao5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnao7 = load i64*, i64** %Sp_Var
  %lnao8 = load i64*, i64** %Hp_Var
  %lnao9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnao6( i64* %Base_Arg, i64* %lnao7, i64* %lnao8, i64 %lnao9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6530083 UTC

@cakE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cakE_info$def to i8*)
define internal ghccc void @cakE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cakE_info$def to i64)),i64 88), i64 0, i64 4294967326}>
{
cakE:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaoc = load i64, i64* %R1_Var
  %lnaod = add i64 %lnaoc, 7
  %lnaoe = inttoptr i64 %lnaod to i64*
  %lnaof = load i64, i64* %lnaoe, !tbaa !4
  %lnaog = icmp slt i64 %lnaof, 0
  %lnaoh = zext i1 %lnaog to i64
  switch i64 %lnaoh, label %cakR [i64 1, label %cakS]
cakR:
  %lnaoi = load i64, i64* %R1_Var
  %lnaoj = and i64 %lnaoi, -8
  store i64 %lnaoj, i64* %R1_Var
  %lnaok = load i64*, i64** %Sp_Var
  %lnaol = getelementptr inbounds i64, i64* %lnaok, i32 1
  %lnaom = ptrtoint i64* %lnaol to i64
  %lnaon = inttoptr i64 %lnaom to i64*
  store i64* %lnaon, i64** %Sp_Var
  %lnaop = load i64, i64* %R1_Var
  %lnaoq = inttoptr i64 %lnaop to i64*
  %lnaor = load i64, i64* %lnaoq, !tbaa !4
  %lnaos = inttoptr i64 %lnaor to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaot = load i64*, i64** %Sp_Var
  %lnaou = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaos( i64* %Base_Arg, i64* %lnaot, i64* %Hp_Arg, i64 %lnaou, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cakS:
  %lnaov = ptrtoint %Main_arrayByIndex19_closure_struct* @Main_arrayByIndex19_closure$def to i64
  store i64 %lnaov, i64* %R1_Var
  %lnaow = load i64*, i64** %Sp_Var
  %lnaox = getelementptr inbounds i64, i64* %lnaow, i32 1
  %lnaoy = ptrtoint i64* %lnaox to i64
  %lnaoz = inttoptr i64 %lnaoy to i64*
  store i64* %lnaoz, i64** %Sp_Var
  %lnaoB = load i64, i64* %R1_Var
  %lnaoC = inttoptr i64 %lnaoB to i64*
  %lnaoD = load i64, i64* %lnaoC, !tbaa !4
  %lnaoE = inttoptr i64 %lnaoD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaoF = load i64*, i64** %Sp_Var
  %lnaoG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaoE( i64* %Base_Arg, i64* %lnaoF, i64* %Hp_Arg, i64 %lnaoG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6609964 UTC

@s96y_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96y_info$def to i8*)
define internal ghccc void @s96y_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96y_info$def to i64)),i64 8), i64 1, i64 4294967312}>
{
cal4:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaoH = load i64*, i64** %Sp_Var
  %lnaoI = getelementptr inbounds i64, i64* %lnaoH, i32 -3
  %lnaoJ = ptrtoint i64* %lnaoI to i64
  %lnaoK = icmp ult i64 %lnaoJ, %SpLim_Arg
  %lnaoL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaoK, i1 0 )
  br i1 %lnaoL, label %cal8, label %cal9
cal9:
  %lnaoN = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaoM = load i64*, i64** %Sp_Var
  %lnaoO = getelementptr inbounds i64, i64* %lnaoM, i32 -2
  store i64 %lnaoN, i64* %lnaoO, !tbaa !2
  %lnaoQ = load i64, i64* %R1_Var
  %lnaoP = load i64*, i64** %Sp_Var
  %lnaoR = getelementptr inbounds i64, i64* %lnaoP, i32 -1
  store i64 %lnaoQ, i64* %lnaoR, !tbaa !2
  %lnaoT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cal1_info$def to i64
  %lnaoS = load i64*, i64** %Sp_Var
  %lnaoU = getelementptr inbounds i64, i64* %lnaoS, i32 -3
  store i64 %lnaoT, i64* %lnaoU, !tbaa !2
  %lnaoX = load i64, i64* %R1_Var
  %lnaoY = add i64 %lnaoX, 16
  %lnaoZ = inttoptr i64 %lnaoY to i64*
  %lnap0 = load i64, i64* %lnaoZ, !tbaa !4
  store i64 %lnap0, i64* %R1_Var
  %lnap1 = load i64*, i64** %Sp_Var
  %lnap2 = getelementptr inbounds i64, i64* %lnap1, i32 -3
  %lnap3 = ptrtoint i64* %lnap2 to i64
  %lnap4 = inttoptr i64 %lnap3 to i64*
  store i64* %lnap4, i64** %Sp_Var
  %lnap5 = load i64, i64* %R1_Var
  %lnap6 = and i64 %lnap5, 7
  %lnap7 = icmp ne i64 %lnap6, 0
  br i1 %lnap7, label %uald, label %cal2
cal2:
  %lnap9 = load i64, i64* %R1_Var
  %lnapa = inttoptr i64 %lnap9 to i64*
  %lnapb = load i64, i64* %lnapa, !tbaa !4
  %lnapc = inttoptr i64 %lnapb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnapd = load i64*, i64** %Sp_Var
  %lnape = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnapc( i64* %Base_Arg, i64* %lnapd, i64* %Hp_Arg, i64 %lnape, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uald:
  %lnapf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cal1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnapg = load i64*, i64** %Sp_Var
  %lnaph = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnapf( i64* %Base_Arg, i64* %lnapg, i64* %Hp_Arg, i64 %lnaph, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cal8:
  %lnapi = load i64, i64* %R1_Var
  store i64 %lnapi, i64* %R1_Var
  %lnapj = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnapk = bitcast i64* %lnapj to i64*
  %lnapl = load i64, i64* %lnapk, !tbaa !5
  %lnapm = inttoptr i64 %lnapl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnapn = load i64*, i64** %Sp_Var
  %lnapo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnapm( i64* %Base_Arg, i64* %lnapn, i64* %Hp_Arg, i64 %lnapo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6659853 UTC

@cal1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cal1_info$def to i8*)
define internal ghccc void @cal1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cal1_info$def to i64)),i64 8), i64 0, i64 4294967326}>
{
cal1:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnapp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cal7_info$def to i64
  %lnapq = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnapp, i64* %lnapq, !tbaa !2
  %lnapr = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %lnaps = add i64 %lnapr, 1
  store i64 %lnaps, i64* %R4_Var
  %lnapt = add i64 %R1_Arg, 7
  %lnapu = inttoptr i64 %lnapt to i64*
  %lnapv = load i64, i64* %lnapu, !tbaa !4
  store i64 %lnapv, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %lnapw = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnapx = load i64, i64* %R2_Var
  %lnapy = load i64, i64* %R3_Var
  %lnapz = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnapw( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnapx, i64 %lnapy, i64 %lnapz, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6699855 UTC

@cal7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cal7_info$def to i8*)
define internal ghccc void @cal7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cal7_info$def to i64)),i64 8), i64 0, i64 4294967326}>
{
cal7:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnapA = load i64, i64* %R2_Var
  store i64 %lnapA, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  %lnapB = ptrtoint %Main_arrayByIndex16_closure_struct* @Main_arrayByIndex16_closure$def to i64
  store i64 %lnapB, i64* %R2_Var
  %lnapC = load i64*, i64** %Sp_Var
  %lnapD = getelementptr inbounds i64, i64* %lnapC, i32 1
  %lnapE = ptrtoint i64* %lnapD to i64
  %lnapF = inttoptr i64 %lnapE to i64*
  store i64* %lnapF, i64** %Sp_Var
  %lnapG = bitcast i8* @base_GHCziBase_zpzpzuzdszpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnapH = load i64*, i64** %Sp_Var
  %lnapI = load i64, i64* %R2_Var
  %lnapJ = load i64, i64* %R3_Var
  %lnapK = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnapG( i64* %Base_Arg, i64* %lnapH, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnapI, i64 %lnapJ, i64 %lnapK, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6759748 UTC

@s96s_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96s_info$def to i8*)
define internal ghccc void @s96s_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96s_info$def to i64)),i64 8), i64 1, i64 4294967312}>
{
cale:
  %ls96s = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls96n = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnapL = load i64, i64* %R1_Var
  store i64 %lnapL, i64* %ls96s
  %lnapM = load i64*, i64** %Sp_Var
  %lnapN = getelementptr inbounds i64, i64* %lnapM, i32 -2
  %lnapO = ptrtoint i64* %lnapN to i64
  %lnapP = icmp ult i64 %lnapO, %SpLim_Arg
  %lnapQ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnapP, i1 0 )
  br i1 %lnapQ, label %calf, label %calg
calg:
  %lnapR = load i64*, i64** %Hp_Var
  %lnapS = getelementptr inbounds i64, i64* %lnapR, i32 3
  %lnapT = ptrtoint i64* %lnapS to i64
  %lnapU = inttoptr i64 %lnapT to i64*
  store i64* %lnapU, i64** %Hp_Var
  %lnapV = load i64*, i64** %Hp_Var
  %lnapW = ptrtoint i64* %lnapV to i64
  %lnapX = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnapY = bitcast i64* %lnapX to i64*
  %lnapZ = load i64, i64* %lnapY, !tbaa !5
  %lnaq0 = icmp ugt i64 %lnapW, %lnapZ
  %lnaq1 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaq0, i1 0 )
  br i1 %lnaq1, label %cali, label %calh
calh:
  %lnaq3 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaq2 = load i64*, i64** %Sp_Var
  %lnaq4 = getelementptr inbounds i64, i64* %lnaq2, i32 -2
  store i64 %lnaq3, i64* %lnaq4, !tbaa !2
  %lnaq6 = load i64, i64* %ls96s
  %lnaq5 = load i64*, i64** %Sp_Var
  %lnaq7 = getelementptr inbounds i64, i64* %lnaq5, i32 -1
  store i64 %lnaq6, i64* %lnaq7, !tbaa !2
  %lnaq8 = load i64, i64* %ls96s
  %lnaq9 = add i64 %lnaq8, 16
  %lnaqa = inttoptr i64 %lnaq9 to i64*
  %lnaqb = load i64, i64* %lnaqa, !tbaa !1
  store i64 %lnaqb, i64* %ls96n
  %lnaqd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96y_info$def to i64
  %lnaqc = load i64*, i64** %Hp_Var
  %lnaqe = getelementptr inbounds i64, i64* %lnaqc, i32 -2
  store i64 %lnaqd, i64* %lnaqe, !tbaa !3
  %lnaqg = load i64, i64* %ls96n
  %lnaqf = load i64*, i64** %Hp_Var
  %lnaqh = getelementptr inbounds i64, i64* %lnaqf, i32 0
  store i64 %lnaqg, i64* %lnaqh, !tbaa !3
  %lnaqi = load i64*, i64** %Hp_Var
  %lnaqj = getelementptr inbounds i64, i64* %lnaqi, i32 -2
  %lnaqk = ptrtoint i64* %lnaqj to i64
  store i64 %lnaqk, i64* %R3_Var
  %lnaql = ptrtoint %Main_arrayByIndex18_bytes_struct* @Main_arrayByIndex18_bytes$def to i64
  store i64 %lnaql, i64* %R2_Var
  %lnaqm = load i64*, i64** %Sp_Var
  %lnaqn = getelementptr inbounds i64, i64* %lnaqm, i32 -2
  %lnaqo = ptrtoint i64* %lnaqn to i64
  %lnaqp = inttoptr i64 %lnaqo to i64*
  store i64* %lnaqp, i64** %Sp_Var
  %lnaqq = bitcast i8* @ghczmprim_GHCziCString_unpackAppendCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaqr = load i64*, i64** %Sp_Var
  %lnaqs = load i64*, i64** %Hp_Var
  %lnaqt = load i64, i64* %R1_Var
  %lnaqu = load i64, i64* %R2_Var
  %lnaqv = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaqq( i64* %Base_Arg, i64* %lnaqr, i64* %lnaqs, i64 %lnaqt, i64 %lnaqu, i64 %lnaqv, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cali:
  %lnaqw = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnaqw, !tbaa !5
  br label %calf
calf:
  %lnaqx = load i64, i64* %ls96s
  store i64 %lnaqx, i64* %R1_Var
  %lnaqy = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaqz = bitcast i64* %lnaqy to i64*
  %lnaqA = load i64, i64* %lnaqz, !tbaa !5
  %lnaqB = inttoptr i64 %lnaqA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaqC = load i64*, i64** %Sp_Var
  %lnaqD = load i64*, i64** %Hp_Var
  %lnaqE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaqB( i64* %Base_Arg, i64* %lnaqC, i64* %lnaqD, i64 %lnaqE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6819647 UTC

@s96K_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96K_info$def to i8*)
define internal ghccc void @s96K_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 4294967297, i64 19}>
{
calP:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaqF = load i64*, i64** %Sp_Var
  %lnaqG = getelementptr inbounds i64, i64* %lnaqF, i32 -4
  %lnaqH = ptrtoint i64* %lnaqG to i64
  %lnaqI = icmp ult i64 %lnaqH, %SpLim_Arg
  %lnaqJ = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaqI, i1 0 )
  br i1 %lnaqJ, label %calQ, label %calR
calR:
  %lnaqL = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaqK = load i64*, i64** %Sp_Var
  %lnaqM = getelementptr inbounds i64, i64* %lnaqK, i32 -2
  store i64 %lnaqL, i64* %lnaqM, !tbaa !2
  %lnaqO = load i64, i64* %R1_Var
  %lnaqN = load i64*, i64** %Sp_Var
  %lnaqP = getelementptr inbounds i64, i64* %lnaqN, i32 -1
  store i64 %lnaqO, i64* %lnaqP, !tbaa !2
  %lnaqR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calN_info$def to i64
  %lnaqQ = load i64*, i64** %Sp_Var
  %lnaqS = getelementptr inbounds i64, i64* %lnaqQ, i32 -4
  store i64 %lnaqR, i64* %lnaqS, !tbaa !2
  %lnaqT = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %lnaqU = add i64 %lnaqT, 1
  store i64 %lnaqU, i64* %R4_Var
  %lnaqX = load i64, i64* %R1_Var
  %lnaqY = add i64 %lnaqX, 24
  %lnaqZ = inttoptr i64 %lnaqY to i64*
  %lnar0 = load i64, i64* %lnaqZ, !tbaa !4
  store i64 %lnar0, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %lnar4 = load i64, i64* %R1_Var
  %lnar5 = add i64 %lnar4, 16
  %lnar6 = inttoptr i64 %lnar5 to i64*
  %lnar7 = load i64, i64* %lnar6, !tbaa !4
  %lnar1 = load i64*, i64** %Sp_Var
  %lnar8 = getelementptr inbounds i64, i64* %lnar1, i32 -3
  store i64 %lnar7, i64* %lnar8, !tbaa !2
  %lnar9 = load i64*, i64** %Sp_Var
  %lnara = getelementptr inbounds i64, i64* %lnar9, i32 -4
  %lnarb = ptrtoint i64* %lnara to i64
  %lnarc = inttoptr i64 %lnarb to i64*
  store i64* %lnarc, i64** %Sp_Var
  %lnard = bitcast i8* @base_GHCziShow_zdwshowSignedInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnare = load i64*, i64** %Sp_Var
  %lnarf = load i64, i64* %R1_Var
  %lnarg = load i64, i64* %R2_Var
  %lnarh = load i64, i64* %R3_Var
  %lnari = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnard( i64* %Base_Arg, i64* %lnare, i64* %Hp_Arg, i64 %lnarf, i64 %lnarg, i64 %lnarh, i64 %lnari, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
calQ:
  %lnarj = load i64, i64* %R1_Var
  store i64 %lnarj, i64* %R1_Var
  %lnark = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnarl = bitcast i64* %lnark to i64*
  %lnarm = load i64, i64* %lnarl, !tbaa !5
  %lnarn = inttoptr i64 %lnarm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaro = load i64*, i64** %Sp_Var
  %lnarp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnarn( i64* %Base_Arg, i64* %lnaro, i64* %Hp_Arg, i64 %lnarp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6879547 UTC

@calN_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calN_info$def to i8*)
define internal ghccc void @calN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 30}>
{
calN:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnarq = load i64, i64* %R2_Var
  store i64 %lnarq, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  %lnarr = load i64*, i64** %Sp_Var
  %lnars = getelementptr inbounds i64, i64* %lnarr, i32 1
  %lnart = bitcast i64* %lnars to i64*
  %lnaru = load i64, i64* %lnart, !tbaa !2
  store i64 %lnaru, i64* %R2_Var
  %lnarv = load i64*, i64** %Sp_Var
  %lnarw = getelementptr inbounds i64, i64* %lnarv, i32 2
  %lnarx = ptrtoint i64* %lnarw to i64
  %lnary = inttoptr i64 %lnarx to i64*
  store i64* %lnary, i64** %Sp_Var
  %lnarz = bitcast i8* @base_GHCziBase_zpzpzuzdszpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnarA = load i64*, i64** %Sp_Var
  %lnarB = load i64, i64* %R2_Var
  %lnarC = load i64, i64* %R3_Var
  %lnarD = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnarz( i64* %Base_Arg, i64* %lnarA, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnarB, i64 %lnarC, i64 %lnarD, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.6929449 UTC

@s96Q_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96Q_info$def to i8*)
define internal ghccc void @s96Q_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96Q_info$def to i64)),i64 16), i64 5, i64 12884901903}>
{
calT:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnarE = load i64*, i64** %Sp_Var
  %lnarF = getelementptr inbounds i64, i64* %lnarE, i32 -8
  %lnarG = ptrtoint i64* %lnarF to i64
  %lnarH = icmp ult i64 %lnarG, %SpLim_Arg
  %lnarI = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnarH, i1 0 )
  br i1 %lnarI, label %calU, label %calV
calV:
  %lnarK = ptrtoint i8* @stg_upd_frame_info to i64
  %lnarJ = load i64*, i64** %Sp_Var
  %lnarL = getelementptr inbounds i64, i64* %lnarJ, i32 -2
  store i64 %lnarK, i64* %lnarL, !tbaa !2
  %lnarN = load i64, i64* %R1_Var
  %lnarM = load i64*, i64** %Sp_Var
  %lnarO = getelementptr inbounds i64, i64* %lnarM, i32 -1
  store i64 %lnarN, i64* %lnarO, !tbaa !2
  %lnarQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calA_info$def to i64
  %lnarP = load i64*, i64** %Sp_Var
  %lnarR = getelementptr inbounds i64, i64* %lnarP, i32 -5
  store i64 %lnarQ, i64* %lnarR, !tbaa !2
  %lnarU = load i64, i64* %R1_Var
  %lnarV = add i64 %lnarU, 16
  %lnarW = inttoptr i64 %lnarV to i64*
  %lnarX = load i64, i64* %lnarW, !tbaa !4
  store i64 %lnarX, i64* %R2_Var
  %lnarZ = ptrtoint i8* @stg_ap_pp_info to i64
  %lnarY = load i64*, i64** %Sp_Var
  %lnas0 = getelementptr inbounds i64, i64* %lnarY, i32 -8
  store i64 %lnarZ, i64* %lnas0, !tbaa !2
  %lnas4 = load i64, i64* %R1_Var
  %lnas5 = add i64 %lnas4, 24
  %lnas6 = inttoptr i64 %lnas5 to i64*
  %lnas7 = load i64, i64* %lnas6, !tbaa !4
  %lnas1 = load i64*, i64** %Sp_Var
  %lnas8 = getelementptr inbounds i64, i64* %lnas1, i32 -7
  store i64 %lnas7, i64* %lnas8, !tbaa !2
  %lnasc = load i64, i64* %R1_Var
  %lnasd = add i64 %lnasc, 48
  %lnase = inttoptr i64 %lnasd to i64*
  %lnasf = load i64, i64* %lnase, !tbaa !4
  %lnas9 = load i64*, i64** %Sp_Var
  %lnasg = getelementptr inbounds i64, i64* %lnas9, i32 -6
  store i64 %lnasf, i64* %lnasg, !tbaa !2
  %lnask = load i64, i64* %R1_Var
  %lnasl = add i64 %lnask, 32
  %lnasm = inttoptr i64 %lnasl to i64*
  %lnasn = load i64, i64* %lnasm, !tbaa !4
  %lnash = load i64*, i64** %Sp_Var
  %lnaso = getelementptr inbounds i64, i64* %lnash, i32 -4
  store i64 %lnasn, i64* %lnaso, !tbaa !2
  %lnass = load i64, i64* %R1_Var
  %lnast = add i64 %lnass, 40
  %lnasu = inttoptr i64 %lnast to i64*
  %lnasv = load i64, i64* %lnasu, !tbaa !4
  %lnasp = load i64*, i64** %Sp_Var
  %lnasw = getelementptr inbounds i64, i64* %lnasp, i32 -3
  store i64 %lnasv, i64* %lnasw, !tbaa !2
  %lnasx = load i64*, i64** %Sp_Var
  %lnasy = getelementptr inbounds i64, i64* %lnasx, i32 -8
  %lnasz = ptrtoint i64* %lnasy to i64
  %lnasA = inttoptr i64 %lnasz to i64*
  store i64* %lnasA, i64** %Sp_Var
  %lnasB = bitcast i8* @base_GHCziArr_index_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnasC = load i64*, i64** %Sp_Var
  %lnasD = load i64, i64* %R1_Var
  %lnasE = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnasB( i64* %Base_Arg, i64* %lnasC, i64* %Hp_Arg, i64 %lnasD, i64 %lnasE, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
calU:
  %lnasF = load i64, i64* %R1_Var
  store i64 %lnasF, i64* %R1_Var
  %lnasG = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnasH = bitcast i64* %lnasG to i64*
  %lnasI = load i64, i64* %lnasH, !tbaa !5
  %lnasJ = inttoptr i64 %lnasI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnasK = load i64*, i64** %Sp_Var
  %lnasL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnasJ( i64* %Base_Arg, i64* %lnasK, i64* %Hp_Arg, i64 %lnasL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.7009311 UTC

@calA_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calA_info$def to i8*)
define internal ghccc void @calA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calA_info$def to i64)),i64 16), i64 2, i64 12884901918}>
{
calA:
  %ls96F = alloca i64, i32 1
  %ls96E = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnasO = load i64, i64* %R1_Var
  %lnasP = add i64 %lnasO, 7
  %lnasQ = inttoptr i64 %lnasP to i64*
  %lnasR = load i64, i64* %lnasQ, !tbaa !4
  store i64 %lnasR, i64* %ls96F
  %lnasS = load i64, i64* %ls96F
  %lnasT = icmp sle i64 0, %lnasS
  %lnasU = zext i1 %lnasT to i64
  switch i64 %lnasU, label %uamn [i64 1, label %camc]
uamn:
  %lnasW = load i64, i64* %ls96F
  %lnasV = load i64*, i64** %Sp_Var
  %lnasX = getelementptr inbounds i64, i64* %lnasV, i32 1
  store i64 %lnasW, i64* %lnasX, !tbaa !2
  %lnasY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnasZ = load i64*, i64** %Sp_Var
  %lnat0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnasY( i64* %Base_Arg, i64* %lnasZ, i64* %Hp_Arg, i64 %lnat0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
camc:
  %lnat2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @camb_info$def to i64
  %lnat1 = load i64*, i64** %Sp_Var
  %lnat3 = getelementptr inbounds i64, i64* %lnat1, i32 -1
  store i64 %lnat2, i64* %lnat3, !tbaa !2
  %lnat4 = load i64, i64* %R1_Var
  store i64 %lnat4, i64* %ls96E
  %lnat5 = load i64*, i64** %Sp_Var
  %lnat6 = getelementptr inbounds i64, i64* %lnat5, i32 1
  %lnat7 = bitcast i64* %lnat6 to i64*
  %lnat8 = load i64, i64* %lnat7, !tbaa !2
  store i64 %lnat8, i64* %R1_Var
  %lnata = load i64, i64* %ls96F
  %lnat9 = load i64*, i64** %Sp_Var
  %lnatb = getelementptr inbounds i64, i64* %lnat9, i32 0
  store i64 %lnata, i64* %lnatb, !tbaa !2
  %lnatd = load i64, i64* %ls96E
  %lnatc = load i64*, i64** %Sp_Var
  %lnate = getelementptr inbounds i64, i64* %lnatc, i32 1
  store i64 %lnatd, i64* %lnate, !tbaa !2
  %lnatf = load i64*, i64** %Sp_Var
  %lnatg = getelementptr inbounds i64, i64* %lnatf, i32 -1
  %lnath = ptrtoint i64* %lnatg to i64
  %lnati = inttoptr i64 %lnath to i64*
  store i64* %lnati, i64** %Sp_Var
  %lnatj = load i64, i64* %R1_Var
  %lnatk = and i64 %lnatj, 7
  %lnatl = icmp ne i64 %lnatk, 0
  br i1 %lnatl, label %uamp, label %camd
camd:
  %lnatn = load i64, i64* %R1_Var
  %lnato = inttoptr i64 %lnatn to i64*
  %lnatp = load i64, i64* %lnato, !tbaa !4
  %lnatq = inttoptr i64 %lnatp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnatr = load i64*, i64** %Sp_Var
  %lnats = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnatq( i64* %Base_Arg, i64* %lnatr, i64* %Hp_Arg, i64 %lnats, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uamp:
  %lnatt = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @camb_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnatu = load i64*, i64** %Sp_Var
  %lnatv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnatt( i64* %Base_Arg, i64* %lnatu, i64* %Hp_Arg, i64 %lnatv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.7059233 UTC

@camb_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @camb_info$def to i8*)
define internal ghccc void @camb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @camb_info$def to i64)),i64 16), i64 67, i64 12884901918}>
{
camb:
  %ls96F = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnatw = load i64*, i64** %Sp_Var
  %lnatx = getelementptr inbounds i64, i64* %lnatw, i32 1
  %lnaty = bitcast i64* %lnatx to i64*
  %lnatz = load i64, i64* %lnaty, !tbaa !2
  store i64 %lnatz, i64* %ls96F
  %lnatA = load i64, i64* %ls96F
  %lnatD = load i64, i64* %R1_Var
  %lnatE = add i64 %lnatD, 7
  %lnatF = inttoptr i64 %lnatE to i64*
  %lnatG = load i64, i64* %lnatF, !tbaa !4
  %lnatH = icmp slt i64 %lnatA, %lnatG
  %lnatI = zext i1 %lnatH to i64
  switch i64 %lnatI, label %uamo [i64 1, label %camm]
uamo:
  %lnatK = load i64, i64* %ls96F
  %lnatJ = load i64*, i64** %Sp_Var
  %lnatL = getelementptr inbounds i64, i64* %lnatJ, i32 2
  store i64 %lnatK, i64* %lnatL, !tbaa !2
  %lnatM = load i64*, i64** %Sp_Var
  %lnatN = getelementptr inbounds i64, i64* %lnatM, i32 1
  %lnatO = ptrtoint i64* %lnatN to i64
  %lnatP = inttoptr i64 %lnatO to i64*
  store i64* %lnatP, i64** %Sp_Var
  %lnatQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnatR = load i64*, i64** %Sp_Var
  %lnatS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnatQ( i64* %Base_Arg, i64* %lnatR, i64* %Hp_Arg, i64 %lnatS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
camm:
  %lnatT = load i64*, i64** %Sp_Var
  %lnatU = getelementptr inbounds i64, i64* %lnatT, i32 2
  %lnatV = bitcast i64* %lnatU to i64*
  %lnatW = load i64, i64* %lnatV, !tbaa !2
  %lnatX = and i64 %lnatW, -8
  store i64 %lnatX, i64* %R1_Var
  %lnatY = load i64*, i64** %Sp_Var
  %lnatZ = getelementptr inbounds i64, i64* %lnatY, i32 4
  %lnau0 = ptrtoint i64* %lnatZ to i64
  %lnau1 = inttoptr i64 %lnau0 to i64*
  store i64* %lnau1, i64** %Sp_Var
  %lnau3 = load i64, i64* %R1_Var
  %lnau4 = inttoptr i64 %lnau3 to i64*
  %lnau5 = load i64, i64* %lnau4, !tbaa !4
  %lnau6 = inttoptr i64 %lnau5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnau7 = load i64*, i64** %Sp_Var
  %lnau8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnau6( i64* %Base_Arg, i64* %lnau7, i64* %Hp_Arg, i64 %lnau8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.7129149 UTC

@calH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calH_info$def to i8*)
define internal ghccc void @calH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calH_info$def to i64)),i64 16), i64 66, i64 12884901918}>
{
calH:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnau9 = load i64*, i64** %Hp_Var
  %lnaua = getelementptr inbounds i64, i64* %lnau9, i32 4
  %lnaub = ptrtoint i64* %lnaua to i64
  %lnauc = inttoptr i64 %lnaub to i64*
  store i64* %lnauc, i64** %Hp_Var
  %lnaud = load i64*, i64** %Hp_Var
  %lnaue = ptrtoint i64* %lnaud to i64
  %lnauf = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaug = bitcast i64* %lnauf to i64*
  %lnauh = load i64, i64* %lnaug, !tbaa !5
  %lnaui = icmp ugt i64 %lnaue, %lnauh
  %lnauj = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaui, i1 0 )
  br i1 %lnauj, label %cam0, label %calZ
calZ:
  %lnaul = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96K_info$def to i64
  %lnauk = load i64*, i64** %Hp_Var
  %lnaum = getelementptr inbounds i64, i64* %lnauk, i32 -3
  store i64 %lnaul, i64* %lnaum, !tbaa !3
  %lnauo = load i64*, i64** %Sp_Var
  %lnaup = getelementptr inbounds i64, i64* %lnauo, i32 2
  %lnauq = bitcast i64* %lnaup to i64*
  %lnaur = load i64, i64* %lnauq, !tbaa !2
  %lnaun = load i64*, i64** %Hp_Var
  %lnaus = getelementptr inbounds i64, i64* %lnaun, i32 -1
  store i64 %lnaur, i64* %lnaus, !tbaa !3
  %lnauu = load i64*, i64** %Sp_Var
  %lnauv = getelementptr inbounds i64, i64* %lnauu, i32 1
  %lnauw = bitcast i64* %lnauv to i64*
  %lnaux = load i64, i64* %lnauw, !tbaa !2
  %lnaut = load i64*, i64** %Hp_Var
  %lnauy = getelementptr inbounds i64, i64* %lnaut, i32 0
  store i64 %lnaux, i64* %lnauy, !tbaa !3
  %lnauA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calX_info$def to i64
  %lnauz = load i64*, i64** %Sp_Var
  %lnauB = getelementptr inbounds i64, i64* %lnauz, i32 2
  store i64 %lnauA, i64* %lnauB, !tbaa !2
  %lnauC = load i64*, i64** %Hp_Var
  %lnauD = getelementptr inbounds i64, i64* %lnauC, i32 -3
  %lnauE = ptrtoint i64* %lnauD to i64
  store i64 %lnauE, i64* %R3_Var
  %lnauF = ptrtoint %Main_arrayByIndex1_bytes_struct* @Main_arrayByIndex1_bytes$def to i64
  store i64 %lnauF, i64* %R2_Var
  %lnauG = load i64*, i64** %Sp_Var
  %lnauH = getelementptr inbounds i64, i64* %lnauG, i32 2
  %lnauI = ptrtoint i64* %lnauH to i64
  %lnauJ = inttoptr i64 %lnauI to i64*
  store i64* %lnauJ, i64** %Sp_Var
  %lnauK = bitcast i8* @ghczmprim_GHCziCString_unpackAppendCStringzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnauL = load i64*, i64** %Sp_Var
  %lnauM = load i64*, i64** %Hp_Var
  %lnauN = load i64, i64* %R2_Var
  %lnauO = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnauK( i64* %Base_Arg, i64* %lnauL, i64* %lnauM, i64 %R1_Arg, i64 %lnauN, i64 %lnauO, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cam0:
  %lnauP = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lnauP, !tbaa !5
  %lnauR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calH_info$def to i64
  %lnauQ = load i64*, i64** %Sp_Var
  %lnauS = getelementptr inbounds i64, i64* %lnauQ, i32 0
  store i64 %lnauR, i64* %lnauS, !tbaa !2
  %lnauT = bitcast i8* @stg_gc_noregs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnauU = load i64*, i64** %Sp_Var
  %lnauV = load i64*, i64** %Hp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnauT( i64* %Base_Arg, i64* %lnauU, i64* %lnauV, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.7179045 UTC

@calX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calX_info$def to i8*)
define internal ghccc void @calX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calX_info$def to i64)),i64 16), i64 0, i64 12884901918}>
{
calX:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R3_Var
  %lnauW = ptrtoint %Main_arrayByIndex2_closure_struct* @Main_arrayByIndex2_closure$def to i64
  %lnauX = add i64 %lnauW, 2
  store i64 %lnauX, i64* %R2_Var
  %lnauY = load i64*, i64** %Sp_Var
  %lnauZ = getelementptr inbounds i64, i64* %lnauY, i32 1
  %lnav0 = ptrtoint i64* %lnauZ to i64
  %lnav1 = inttoptr i64 %lnav0 to i64*
  store i64* %lnav1, i64** %Sp_Var
  %lnav2 = bitcast i8* @base_GHCziErr_error_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnav3 = load i64*, i64** %Sp_Var
  %lnav4 = load i64, i64* %R2_Var
  %lnav5 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnav2( i64* %Base_Arg, i64* %lnav3, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnav4, i64 %lnav5, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.7228979 UTC

@s96z_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96z_info$def to i8*)
define internal ghccc void @s96z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96z_info$def to i64)),i64 16), i64 4294967301, i64 5, i64 12884901896}>
{
camw:
  %ls96z = alloca i64, i32 1
  %ls96h = alloca i64, i32 1
  %ls96k = alloca i64, i32 1
  %ls96m = alloca i64, i32 1
  %ls96n = alloca i64, i32 1
  %ls96s = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnav6 = load i64*, i64** %Sp_Var
  %lnav7 = getelementptr inbounds i64, i64* %lnav6, i32 -7
  %lnav8 = ptrtoint i64* %lnav7 to i64
  %lnav9 = icmp ult i64 %lnav8, %SpLim_Arg
  %lnava = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnav9, i1 0 )
  br i1 %lnava, label %camx, label %camy
camy:
  %lnavc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calo_info$def to i64
  %lnavb = load i64*, i64** %Sp_Var
  %lnavd = getelementptr inbounds i64, i64* %lnavb, i32 -7
  store i64 %lnavc, i64* %lnavd, !tbaa !2
  %lnave = load i64, i64* %R1_Var
  store i64 %lnave, i64* %ls96z
  %lnavh = load i64, i64* %R1_Var
  %lnavi = add i64 %lnavh, 7
  %lnavj = inttoptr i64 %lnavi to i64*
  %lnavk = load i64, i64* %lnavj, !tbaa !4
  store i64 %lnavk, i64* %ls96h
  %lnavn = load i64, i64* %R1_Var
  %lnavo = add i64 %lnavn, 15
  %lnavp = inttoptr i64 %lnavo to i64*
  %lnavq = load i64, i64* %lnavp, !tbaa !4
  store i64 %lnavq, i64* %ls96k
  %lnavt = load i64, i64* %R1_Var
  %lnavu = add i64 %lnavt, 23
  %lnavv = inttoptr i64 %lnavu to i64*
  %lnavw = load i64, i64* %lnavv, !tbaa !4
  store i64 %lnavw, i64* %ls96m
  %lnavz = load i64, i64* %R1_Var
  %lnavA = add i64 %lnavz, 31
  %lnavB = inttoptr i64 %lnavA to i64*
  %lnavC = load i64, i64* %lnavB, !tbaa !4
  store i64 %lnavC, i64* %ls96n
  %lnavF = load i64, i64* %R1_Var
  %lnavG = add i64 %lnavF, 39
  %lnavH = inttoptr i64 %lnavG to i64*
  %lnavI = load i64, i64* %lnavH, !tbaa !4
  store i64 %lnavI, i64* %ls96s
  %lnavJ = load i64, i64* %R2_Var
  store i64 %lnavJ, i64* %R1_Var
  %lnavL = load i64, i64* %ls96h
  %lnavK = load i64*, i64** %Sp_Var
  %lnavM = getelementptr inbounds i64, i64* %lnavK, i32 -6
  store i64 %lnavL, i64* %lnavM, !tbaa !2
  %lnavO = load i64, i64* %ls96k
  %lnavN = load i64*, i64** %Sp_Var
  %lnavP = getelementptr inbounds i64, i64* %lnavN, i32 -5
  store i64 %lnavO, i64* %lnavP, !tbaa !2
  %lnavR = load i64, i64* %ls96m
  %lnavQ = load i64*, i64** %Sp_Var
  %lnavS = getelementptr inbounds i64, i64* %lnavQ, i32 -4
  store i64 %lnavR, i64* %lnavS, !tbaa !2
  %lnavU = load i64, i64* %ls96n
  %lnavT = load i64*, i64** %Sp_Var
  %lnavV = getelementptr inbounds i64, i64* %lnavT, i32 -3
  store i64 %lnavU, i64* %lnavV, !tbaa !2
  %lnavX = load i64, i64* %ls96s
  %lnavW = load i64*, i64** %Sp_Var
  %lnavY = getelementptr inbounds i64, i64* %lnavW, i32 -2
  store i64 %lnavX, i64* %lnavY, !tbaa !2
  %lnaw0 = load i64, i64* %ls96z
  %lnavZ = load i64*, i64** %Sp_Var
  %lnaw1 = getelementptr inbounds i64, i64* %lnavZ, i32 -1
  store i64 %lnaw0, i64* %lnaw1, !tbaa !2
  %lnaw2 = load i64*, i64** %Sp_Var
  %lnaw3 = getelementptr inbounds i64, i64* %lnaw2, i32 -7
  %lnaw4 = ptrtoint i64* %lnaw3 to i64
  %lnaw5 = inttoptr i64 %lnaw4 to i64*
  store i64* %lnaw5, i64** %Sp_Var
  %lnaw6 = load i64, i64* %R1_Var
  %lnaw7 = and i64 %lnaw6, 7
  %lnaw8 = icmp ne i64 %lnaw7, 0
  br i1 %lnaw8, label %uamG, label %calp
calp:
  %lnawa = load i64, i64* %R1_Var
  %lnawb = inttoptr i64 %lnawa to i64*
  %lnawc = load i64, i64* %lnawb, !tbaa !4
  %lnawd = inttoptr i64 %lnawc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnawe = load i64*, i64** %Sp_Var
  %lnawf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnawd( i64* %Base_Arg, i64* %lnawe, i64* %Hp_Arg, i64 %lnawf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uamG:
  %lnawg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calo_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnawh = load i64*, i64** %Sp_Var
  %lnawi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnawg( i64* %Base_Arg, i64* %lnawh, i64* %Hp_Arg, i64 %lnawi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
camx:
  %lnawj = load i64, i64* %R2_Var
  store i64 %lnawj, i64* %R2_Var
  %lnawk = load i64, i64* %R1_Var
  store i64 %lnawk, i64* %R1_Var
  %lnawl = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnawm = bitcast i64* %lnawl to i64*
  %lnawn = load i64, i64* %lnawm, !tbaa !5
  %lnawo = inttoptr i64 %lnawn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnawp = load i64*, i64** %Sp_Var
  %lnawq = load i64, i64* %R1_Var
  %lnawr = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnawo( i64* %Base_Arg, i64* %lnawp, i64* %Hp_Arg, i64 %lnawq, i64 %lnawr, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.7308834 UTC

@calo_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calo_info$def to i8*)
define internal ghccc void @calo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @calo_info$def to i64)),i64 16), i64 6, i64 12884901918}>
{
calo:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls96C = alloca i64, i32 1
  %ls96D = alloca i64, i32 1
  %lnaws = load i64, i64* %R1_Var
  %lnawt = and i64 %lnaws, 7
  switch i64 %lnawt, label %camt [i64 1, label %camt
                                  i64 2, label %camu]
camt:
  %lnawu = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %lnawv = add i64 %lnawu, 1
  store i64 %lnawv, i64* %R1_Var
  %lnaww = load i64*, i64** %Sp_Var
  %lnawx = getelementptr inbounds i64, i64* %lnaww, i32 7
  %lnawy = ptrtoint i64* %lnawx to i64
  %lnawz = inttoptr i64 %lnawy to i64*
  store i64* %lnawz, i64** %Sp_Var
  %lnawA = load i64*, i64** %Sp_Var
  %lnawB = getelementptr inbounds i64, i64* %lnawA, i32 0
  %lnawC = bitcast i64* %lnawB to i64*
  %lnawD = load i64, i64* %lnawC, !tbaa !2
  %lnawE = inttoptr i64 %lnawD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnawF = load i64*, i64** %Sp_Var
  %lnawG = load i64*, i64** %Hp_Var
  %lnawH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnawE( i64* %Base_Arg, i64* %lnawF, i64* %lnawG, i64 %lnawH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
camu:
  %lnawI = load i64*, i64** %Hp_Var
  %lnawJ = getelementptr inbounds i64, i64* %lnawI, i32 21
  %lnawK = ptrtoint i64* %lnawJ to i64
  %lnawL = inttoptr i64 %lnawK to i64*
  store i64* %lnawL, i64** %Hp_Var
  %lnawM = load i64*, i64** %Hp_Var
  %lnawN = ptrtoint i64* %lnawM to i64
  %lnawO = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnawP = bitcast i64* %lnawO to i64*
  %lnawQ = load i64, i64* %lnawP, !tbaa !5
  %lnawR = icmp ugt i64 %lnawN, %lnawQ
  %lnawS = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnawR, i1 0 )
  br i1 %lnawS, label %camF, label %camE
camE:
  %lnawV = load i64, i64* %R1_Var
  %lnawW = add i64 %lnawV, 6
  %lnawX = inttoptr i64 %lnawW to i64*
  %lnawY = load i64, i64* %lnawX, !tbaa !4
  store i64 %lnawY, i64* %ls96C
  %lnax1 = load i64, i64* %R1_Var
  %lnax2 = add i64 %lnax1, 14
  %lnax3 = inttoptr i64 %lnax2 to i64*
  %lnax4 = load i64, i64* %lnax3, !tbaa !4
  store i64 %lnax4, i64* %ls96D
  %lnax6 = ptrtoint i8* @stg_ap_2_upd_info to i64
  %lnax5 = load i64*, i64** %Hp_Var
  %lnax7 = getelementptr inbounds i64, i64* %lnax5, i32 -20
  store i64 %lnax6, i64* %lnax7, !tbaa !3
  %lnax9 = load i64*, i64** %Sp_Var
  %lnaxa = getelementptr inbounds i64, i64* %lnax9, i32 6
  %lnaxb = bitcast i64* %lnaxa to i64*
  %lnaxc = load i64, i64* %lnaxb, !tbaa !2
  %lnax8 = load i64*, i64** %Hp_Var
  %lnaxd = getelementptr inbounds i64, i64* %lnax8, i32 -18
  store i64 %lnaxc, i64* %lnaxd, !tbaa !3
  %lnaxf = load i64, i64* %ls96D
  %lnaxe = load i64*, i64** %Hp_Var
  %lnaxg = getelementptr inbounds i64, i64* %lnaxe, i32 -17
  store i64 %lnaxf, i64* %lnaxg, !tbaa !3
  %lnaxi = ptrtoint i8* @stg_ap_2_upd_info to i64
  %lnaxh = load i64*, i64** %Hp_Var
  %lnaxj = getelementptr inbounds i64, i64* %lnaxh, i32 -16
  store i64 %lnaxi, i64* %lnaxj, !tbaa !3
  %lnaxl = load i64*, i64** %Sp_Var
  %lnaxm = getelementptr inbounds i64, i64* %lnaxl, i32 2
  %lnaxn = bitcast i64* %lnaxm to i64*
  %lnaxo = load i64, i64* %lnaxn, !tbaa !2
  %lnaxk = load i64*, i64** %Hp_Var
  %lnaxp = getelementptr inbounds i64, i64* %lnaxk, i32 -14
  store i64 %lnaxo, i64* %lnaxp, !tbaa !3
  %lnaxr = load i64, i64* %ls96C
  %lnaxq = load i64*, i64** %Hp_Var
  %lnaxs = getelementptr inbounds i64, i64* %lnaxq, i32 -13
  store i64 %lnaxr, i64* %lnaxs, !tbaa !3
  %lnaxu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96Q_info$def to i64
  %lnaxt = load i64*, i64** %Hp_Var
  %lnaxv = getelementptr inbounds i64, i64* %lnaxt, i32 -12
  store i64 %lnaxu, i64* %lnaxv, !tbaa !3
  %lnaxx = load i64*, i64** %Sp_Var
  %lnaxy = getelementptr inbounds i64, i64* %lnaxx, i32 1
  %lnaxz = bitcast i64* %lnaxy to i64*
  %lnaxA = load i64, i64* %lnaxz, !tbaa !2
  %lnaxw = load i64*, i64** %Hp_Var
  %lnaxB = getelementptr inbounds i64, i64* %lnaxw, i32 -10
  store i64 %lnaxA, i64* %lnaxB, !tbaa !3
  %lnaxD = load i64*, i64** %Sp_Var
  %lnaxE = getelementptr inbounds i64, i64* %lnaxD, i32 3
  %lnaxF = bitcast i64* %lnaxE to i64*
  %lnaxG = load i64, i64* %lnaxF, !tbaa !2
  %lnaxC = load i64*, i64** %Hp_Var
  %lnaxH = getelementptr inbounds i64, i64* %lnaxC, i32 -9
  store i64 %lnaxG, i64* %lnaxH, !tbaa !3
  %lnaxJ = load i64*, i64** %Sp_Var
  %lnaxK = getelementptr inbounds i64, i64* %lnaxJ, i32 4
  %lnaxL = bitcast i64* %lnaxK to i64*
  %lnaxM = load i64, i64* %lnaxL, !tbaa !2
  %lnaxI = load i64*, i64** %Hp_Var
  %lnaxN = getelementptr inbounds i64, i64* %lnaxI, i32 -8
  store i64 %lnaxM, i64* %lnaxN, !tbaa !3
  %lnaxP = load i64*, i64** %Sp_Var
  %lnaxQ = getelementptr inbounds i64, i64* %lnaxP, i32 5
  %lnaxR = bitcast i64* %lnaxQ to i64*
  %lnaxS = load i64, i64* %lnaxR, !tbaa !2
  %lnaxO = load i64*, i64** %Hp_Var
  %lnaxT = getelementptr inbounds i64, i64* %lnaxO, i32 -7
  store i64 %lnaxS, i64* %lnaxT, !tbaa !3
  %lnaxV = load i64, i64* %ls96C
  %lnaxU = load i64*, i64** %Hp_Var
  %lnaxW = getelementptr inbounds i64, i64* %lnaxU, i32 -6
  store i64 %lnaxV, i64* %lnaxW, !tbaa !3
  %lnaxY = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnaxX = load i64*, i64** %Hp_Var
  %lnaxZ = getelementptr inbounds i64, i64* %lnaxX, i32 -5
  store i64 %lnaxY, i64* %lnaxZ, !tbaa !3
  %lnay1 = load i64*, i64** %Hp_Var
  %lnay2 = getelementptr inbounds i64, i64* %lnay1, i32 -12
  %lnay3 = ptrtoint i64* %lnay2 to i64
  %lnay0 = load i64*, i64** %Hp_Var
  %lnay4 = getelementptr inbounds i64, i64* %lnay0, i32 -4
  store i64 %lnay3, i64* %lnay4, !tbaa !3
  %lnay6 = load i64*, i64** %Hp_Var
  %lnay7 = getelementptr inbounds i64, i64* %lnay6, i32 -16
  %lnay8 = ptrtoint i64* %lnay7 to i64
  %lnay5 = load i64*, i64** %Hp_Var
  %lnay9 = getelementptr inbounds i64, i64* %lnay5, i32 -3
  store i64 %lnay8, i64* %lnay9, !tbaa !3
  %lnayb = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %lnaya = load i64*, i64** %Hp_Var
  %lnayc = getelementptr inbounds i64, i64* %lnaya, i32 -2
  store i64 %lnayb, i64* %lnayc, !tbaa !3
  %lnayf = load i64*, i64** %Hp_Var
  %lnayg = ptrtoint i64* %lnayf to i64
  %lnayh = add i64 %lnayg, -39
  %lnayd = load i64*, i64** %Hp_Var
  %lnayi = getelementptr inbounds i64, i64* %lnayd, i32 -1
  store i64 %lnayh, i64* %lnayi, !tbaa !3
  %lnayk = load i64*, i64** %Hp_Var
  %lnayl = getelementptr inbounds i64, i64* %lnayk, i32 -20
  %lnaym = ptrtoint i64* %lnayl to i64
  %lnayj = load i64*, i64** %Hp_Var
  %lnayn = getelementptr inbounds i64, i64* %lnayj, i32 0
  store i64 %lnaym, i64* %lnayn, !tbaa !3
  %lnayp = load i64*, i64** %Hp_Var
  %lnayq = ptrtoint i64* %lnayp to i64
  %lnayr = add i64 %lnayq, -14
  store i64 %lnayr, i64* %R1_Var
  %lnays = load i64*, i64** %Sp_Var
  %lnayt = getelementptr inbounds i64, i64* %lnays, i32 7
  %lnayu = ptrtoint i64* %lnayt to i64
  %lnayv = inttoptr i64 %lnayu to i64*
  store i64* %lnayv, i64** %Sp_Var
  %lnayw = load i64*, i64** %Sp_Var
  %lnayx = getelementptr inbounds i64, i64* %lnayw, i32 0
  %lnayy = bitcast i64* %lnayx to i64*
  %lnayz = load i64, i64* %lnayy, !tbaa !2
  %lnayA = inttoptr i64 %lnayz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnayB = load i64*, i64** %Sp_Var
  %lnayC = load i64*, i64** %Hp_Var
  %lnayD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnayA( i64* %Base_Arg, i64* %lnayB, i64* %lnayC, i64 %lnayD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
camF:
  %lnayE = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 168, i64* %lnayE, !tbaa !5
  %lnayF = load i64, i64* %R1_Var
  store i64 %lnayF, i64* %R1_Var
  %lnayG = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnayH = load i64*, i64** %Sp_Var
  %lnayI = load i64*, i64** %Hp_Var
  %lnayJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnayG( i64* %Base_Arg, i64* %lnayH, i64* %lnayI, i64 %lnayJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.7408684 UTC

@s96V_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96V_info$def to i8*)
define internal ghccc void @s96V_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96V_info$def to i64)),i64 8), i64 4, i64 4428111282191}>
{
camJ:
  %ls96V = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls96h = alloca i64, i32 1
  %ls96i = alloca i64, i32 1
  %ls96j = alloca i64, i32 1
  %ls96k = alloca i64, i32 1
  %lcakz = alloca i64, i32 1
  %lcaky = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnayK = load i64, i64* %R1_Var
  store i64 %lnayK, i64* %ls96V
  %lnayL = load i64*, i64** %Sp_Var
  %lnayM = getelementptr inbounds i64, i64* %lnayL, i32 -6
  %lnayN = ptrtoint i64* %lnayM to i64
  %lnayO = icmp ult i64 %lnayN, %SpLim_Arg
  %lnayP = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnayO, i1 0 )
  br i1 %lnayP, label %camK, label %camL
camL:
  %lnayQ = load i64*, i64** %Hp_Var
  %lnayR = getelementptr inbounds i64, i64* %lnayQ, i32 17
  %lnayS = ptrtoint i64* %lnayR to i64
  %lnayT = inttoptr i64 %lnayS to i64*
  store i64* %lnayT, i64** %Hp_Var
  %lnayU = load i64*, i64** %Hp_Var
  %lnayV = ptrtoint i64* %lnayU to i64
  %lnayW = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnayX = bitcast i64* %lnayW to i64*
  %lnayY = load i64, i64* %lnayX, !tbaa !5
  %lnayZ = icmp ugt i64 %lnayV, %lnayY
  %lnaz0 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnayZ, i1 0 )
  br i1 %lnaz0, label %camN, label %camM
camM:
  %lnaz2 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaz1 = load i64*, i64** %Sp_Var
  %lnaz3 = getelementptr inbounds i64, i64* %lnaz1, i32 -2
  store i64 %lnaz2, i64* %lnaz3, !tbaa !2
  %lnaz5 = load i64, i64* %ls96V
  %lnaz4 = load i64*, i64** %Sp_Var
  %lnaz6 = getelementptr inbounds i64, i64* %lnaz4, i32 -1
  store i64 %lnaz5, i64* %lnaz6, !tbaa !2
  %lnaz7 = load i64, i64* %ls96V
  %lnaz8 = add i64 %lnaz7, 16
  %lnaz9 = inttoptr i64 %lnaz8 to i64*
  %lnaza = load i64, i64* %lnaz9, !tbaa !1
  store i64 %lnaza, i64* %ls96h
  %lnazb = load i64, i64* %ls96V
  %lnazc = add i64 %lnazb, 24
  %lnazd = inttoptr i64 %lnazc to i64*
  %lnaze = load i64, i64* %lnazd, !tbaa !1
  store i64 %lnaze, i64* %ls96i
  %lnazf = load i64, i64* %ls96V
  %lnazg = add i64 %lnazf, 32
  %lnazh = inttoptr i64 %lnazg to i64*
  %lnazi = load i64, i64* %lnazh, !tbaa !1
  store i64 %lnazi, i64* %ls96j
  %lnazj = load i64, i64* %ls96V
  %lnazk = add i64 %lnazj, 40
  %lnazl = inttoptr i64 %lnazk to i64*
  %lnazm = load i64, i64* %lnazl, !tbaa !1
  store i64 %lnazm, i64* %ls96k
  %lnazo = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnazn = load i64*, i64** %Hp_Var
  %lnazp = getelementptr inbounds i64, i64* %lnazn, i32 -16
  store i64 %lnazo, i64* %lnazp, !tbaa !3
  %lnazr = load i64, i64* %ls96i
  %lnazq = load i64*, i64** %Hp_Var
  %lnazs = getelementptr inbounds i64, i64* %lnazq, i32 -15
  store i64 %lnazr, i64* %lnazs, !tbaa !3
  %lnazu = load i64, i64* %ls96j
  %lnazt = load i64*, i64** %Hp_Var
  %lnazv = getelementptr inbounds i64, i64* %lnazt, i32 -14
  store i64 %lnazu, i64* %lnazv, !tbaa !3
  %lnazx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96n_info$def to i64
  %lnazw = load i64*, i64** %Hp_Var
  %lnazy = getelementptr inbounds i64, i64* %lnazw, i32 -13
  store i64 %lnazx, i64* %lnazy, !tbaa !3
  %lnazA = load i64, i64* %ls96h
  %lnazz = load i64*, i64** %Hp_Var
  %lnazB = getelementptr inbounds i64, i64* %lnazz, i32 -11
  store i64 %lnazA, i64* %lnazB, !tbaa !3
  %lnazD = load i64, i64* %ls96i
  %lnazC = load i64*, i64** %Hp_Var
  %lnazE = getelementptr inbounds i64, i64* %lnazC, i32 -10
  store i64 %lnazD, i64* %lnazE, !tbaa !3
  %lnazG = load i64, i64* %ls96j
  %lnazF = load i64*, i64** %Hp_Var
  %lnazH = getelementptr inbounds i64, i64* %lnazF, i32 -9
  store i64 %lnazG, i64* %lnazH, !tbaa !3
  %lnazJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96s_info$def to i64
  %lnazI = load i64*, i64** %Hp_Var
  %lnazK = getelementptr inbounds i64, i64* %lnazI, i32 -8
  store i64 %lnazJ, i64* %lnazK, !tbaa !3
  %lnazL = load i64*, i64** %Hp_Var
  %lnazM = getelementptr inbounds i64, i64* %lnazL, i32 -13
  %lnazN = ptrtoint i64* %lnazM to i64
  store i64 %lnazN, i64* %lcakz
  %lnazP = load i64, i64* %lcakz
  %lnazO = load i64*, i64** %Hp_Var
  %lnazQ = getelementptr inbounds i64, i64* %lnazO, i32 -6
  store i64 %lnazP, i64* %lnazQ, !tbaa !3
  %lnazS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96z_info$def to i64
  %lnazR = load i64*, i64** %Hp_Var
  %lnazT = getelementptr inbounds i64, i64* %lnazR, i32 -5
  store i64 %lnazS, i64* %lnazT, !tbaa !3
  %lnazV = load i64, i64* %ls96h
  %lnazU = load i64*, i64** %Hp_Var
  %lnazW = getelementptr inbounds i64, i64* %lnazU, i32 -4
  store i64 %lnazV, i64* %lnazW, !tbaa !3
  %lnazY = load i64, i64* %ls96k
  %lnazX = load i64*, i64** %Hp_Var
  %lnazZ = getelementptr inbounds i64, i64* %lnazX, i32 -3
  store i64 %lnazY, i64* %lnazZ, !tbaa !3
  %lnaA1 = load i64*, i64** %Hp_Var
  %lnaA2 = ptrtoint i64* %lnaA1 to i64
  %lnaA3 = add i64 %lnaA2, -127
  store i64 %lnaA3, i64* %lcaky
  %lnaA5 = load i64, i64* %lcaky
  %lnaA4 = load i64*, i64** %Hp_Var
  %lnaA6 = getelementptr inbounds i64, i64* %lnaA4, i32 -2
  store i64 %lnaA5, i64* %lnaA6, !tbaa !3
  %lnaA8 = load i64, i64* %lcakz
  %lnaA7 = load i64*, i64** %Hp_Var
  %lnaA9 = getelementptr inbounds i64, i64* %lnaA7, i32 -1
  store i64 %lnaA8, i64* %lnaA9, !tbaa !3
  %lnaAb = load i64*, i64** %Hp_Var
  %lnaAc = getelementptr inbounds i64, i64* %lnaAb, i32 -8
  %lnaAd = ptrtoint i64* %lnaAc to i64
  %lnaAa = load i64*, i64** %Hp_Var
  %lnaAe = getelementptr inbounds i64, i64* %lnaAa, i32 0
  store i64 %lnaAd, i64* %lnaAe, !tbaa !3
  %lnaAg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @camH_info$def to i64
  %lnaAf = load i64*, i64** %Sp_Var
  %lnaAh = getelementptr inbounds i64, i64* %lnaAf, i32 -4
  store i64 %lnaAg, i64* %lnaAh, !tbaa !2
  %lnaAi = load i64, i64* %ls96h
  store i64 %lnaAi, i64* %R2_Var
  %lnaAk = ptrtoint i8* @stg_ap_p_info to i64
  %lnaAj = load i64*, i64** %Sp_Var
  %lnaAl = getelementptr inbounds i64, i64* %lnaAj, i32 -6
  store i64 %lnaAk, i64* %lnaAl, !tbaa !2
  %lnaAn = load i64, i64* %lcaky
  %lnaAm = load i64*, i64** %Sp_Var
  %lnaAo = getelementptr inbounds i64, i64* %lnaAm, i32 -5
  store i64 %lnaAn, i64* %lnaAo, !tbaa !2
  %lnaAr = load i64*, i64** %Hp_Var
  %lnaAs = ptrtoint i64* %lnaAr to i64
  %lnaAt = add i64 %lnaAs, -39
  %lnaAp = load i64*, i64** %Sp_Var
  %lnaAu = getelementptr inbounds i64, i64* %lnaAp, i32 -3
  store i64 %lnaAt, i64* %lnaAu, !tbaa !2
  %lnaAv = load i64*, i64** %Sp_Var
  %lnaAw = getelementptr inbounds i64, i64* %lnaAv, i32 -6
  %lnaAx = ptrtoint i64* %lnaAw to i64
  %lnaAy = inttoptr i64 %lnaAx to i64*
  store i64* %lnaAy, i64** %Sp_Var
  %lnaAz = bitcast i8* @base_GHCziArr_range_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaAA = load i64*, i64** %Sp_Var
  %lnaAB = load i64*, i64** %Hp_Var
  %lnaAC = load i64, i64* %R1_Var
  %lnaAD = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaAz( i64* %Base_Arg, i64* %lnaAA, i64* %lnaAB, i64 %lnaAC, i64 %lnaAD, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
camN:
  %lnaAE = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 136, i64* %lnaAE, !tbaa !5
  br label %camK
camK:
  %lnaAF = load i64, i64* %ls96V
  store i64 %lnaAF, i64* %R1_Var
  %lnaAG = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaAH = bitcast i64* %lnaAG to i64*
  %lnaAI = load i64, i64* %lnaAH, !tbaa !5
  %lnaAJ = inttoptr i64 %lnaAI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaAK = load i64*, i64** %Sp_Var
  %lnaAL = load i64*, i64** %Hp_Var
  %lnaAM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaAJ( i64* %Base_Arg, i64* %lnaAK, i64* %lnaAL, i64 %lnaAM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.7488559 UTC

@camH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @camH_info$def to i8*)
define internal ghccc void @camH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @camH_info$def to i64)),i64 16), i64 1, i64 12884901918}>
{
camH:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaAN = load i64, i64* %R1_Var
  store i64 %lnaAN, i64* %R2_Var
  %lnaAO = load i64*, i64** %Sp_Var
  %lnaAP = getelementptr inbounds i64, i64* %lnaAO, i32 1
  %lnaAQ = bitcast i64* %lnaAP to i64*
  %lnaAR = load i64, i64* %lnaAQ, !tbaa !2
  store i64 %lnaAR, i64* %R1_Var
  %lnaAS = load i64*, i64** %Sp_Var
  %lnaAT = getelementptr inbounds i64, i64* %lnaAS, i32 2
  %lnaAU = ptrtoint i64* %lnaAT to i64
  %lnaAV = inttoptr i64 %lnaAU to i64*
  store i64* %lnaAV, i64** %Sp_Var
  %lnaAW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96z_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaAX = load i64*, i64** %Sp_Var
  %lnaAY = load i64, i64* %R1_Var
  %lnaAZ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaAW( i64* %Base_Arg, i64* %lnaAX, i64* %Hp_Arg, i64 %lnaAY, i64 %lnaAZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.7548465 UTC

@Main_zdwarrayByIndex_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwarrayByIndex_info$def to i8*)
define ghccc void @Main_zdwarrayByIndex_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwarrayByIndex_info$def to i64)),i64 8), i64 21474836505, i64 0, i64 22020297326606}>
{
camS:
  %ls96k = alloca i64, i32 1
  %ls96j = alloca i64, i32 1
  %ls96i = alloca i64, i32 1
  %ls96h = alloca i64, i32 1
  %ls96g = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R6_Var = alloca i64, i32 1
  store i64 %R6_Arg, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaB0 = load i64, i64* %R6_Var
  store i64 %lnaB0, i64* %ls96k
  %lnaB1 = load i64, i64* %R5_Var
  store i64 %lnaB1, i64* %ls96j
  %lnaB2 = load i64, i64* %R4_Var
  store i64 %lnaB2, i64* %ls96i
  %lnaB3 = load i64, i64* %R3_Var
  store i64 %lnaB3, i64* %ls96h
  %lnaB4 = load i64, i64* %R2_Var
  store i64 %lnaB4, i64* %ls96g
  %lnaB5 = load i64*, i64** %Sp_Var
  %lnaB6 = getelementptr inbounds i64, i64* %lnaB5, i32 -4
  %lnaB7 = ptrtoint i64* %lnaB6 to i64
  %lnaB8 = icmp ult i64 %lnaB7, %SpLim_Arg
  %lnaB9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaB8, i1 0 )
  br i1 %lnaB9, label %camT, label %camU
camU:
  %lnaBa = load i64*, i64** %Hp_Var
  %lnaBb = getelementptr inbounds i64, i64* %lnaBa, i32 9
  %lnaBc = ptrtoint i64* %lnaBb to i64
  %lnaBd = inttoptr i64 %lnaBc to i64*
  store i64* %lnaBd, i64** %Hp_Var
  %lnaBe = load i64*, i64** %Hp_Var
  %lnaBf = ptrtoint i64* %lnaBe to i64
  %lnaBg = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaBh = bitcast i64* %lnaBg to i64*
  %lnaBi = load i64, i64* %lnaBh, !tbaa !5
  %lnaBj = icmp ugt i64 %lnaBf, %lnaBi
  %lnaBk = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaBj, i1 0 )
  br i1 %lnaBk, label %camW, label %camV
camV:
  %lnaBm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s96V_info$def to i64
  %lnaBl = load i64*, i64** %Hp_Var
  %lnaBn = getelementptr inbounds i64, i64* %lnaBl, i32 -8
  store i64 %lnaBm, i64* %lnaBn, !tbaa !3
  %lnaBp = load i64, i64* %ls96h
  %lnaBo = load i64*, i64** %Hp_Var
  %lnaBq = getelementptr inbounds i64, i64* %lnaBo, i32 -6
  store i64 %lnaBp, i64* %lnaBq, !tbaa !3
  %lnaBs = load i64, i64* %ls96i
  %lnaBr = load i64*, i64** %Hp_Var
  %lnaBt = getelementptr inbounds i64, i64* %lnaBr, i32 -5
  store i64 %lnaBs, i64* %lnaBt, !tbaa !3
  %lnaBv = load i64, i64* %ls96j
  %lnaBu = load i64*, i64** %Hp_Var
  %lnaBw = getelementptr inbounds i64, i64* %lnaBu, i32 -4
  store i64 %lnaBv, i64* %lnaBw, !tbaa !3
  %lnaBy = load i64, i64* %ls96k
  %lnaBx = load i64*, i64** %Hp_Var
  %lnaBz = getelementptr inbounds i64, i64* %lnaBx, i32 -3
  store i64 %lnaBy, i64* %lnaBz, !tbaa !3
  %lnaBB = ptrtoint i8* @ghczmprim_GHCziTuple_Z2T_con_info to i64
  %lnaBA = load i64*, i64** %Hp_Var
  %lnaBC = getelementptr inbounds i64, i64* %lnaBA, i32 -2
  store i64 %lnaBB, i64* %lnaBC, !tbaa !3
  %lnaBE = load i64, i64* %ls96i
  %lnaBD = load i64*, i64** %Hp_Var
  %lnaBF = getelementptr inbounds i64, i64* %lnaBD, i32 -1
  store i64 %lnaBE, i64* %lnaBF, !tbaa !3
  %lnaBH = load i64, i64* %ls96j
  %lnaBG = load i64*, i64** %Hp_Var
  %lnaBI = getelementptr inbounds i64, i64* %lnaBG, i32 0
  store i64 %lnaBH, i64* %lnaBI, !tbaa !3
  %lnaBJ = load i64, i64* %ls96g
  store i64 %lnaBJ, i64* %R2_Var
  %lnaBL = ptrtoint i8* @stg_ap_ppp_info to i64
  %lnaBK = load i64*, i64** %Sp_Var
  %lnaBM = getelementptr inbounds i64, i64* %lnaBK, i32 -4
  store i64 %lnaBL, i64* %lnaBM, !tbaa !2
  %lnaBO = load i64, i64* %ls96h
  %lnaBN = load i64*, i64** %Sp_Var
  %lnaBP = getelementptr inbounds i64, i64* %lnaBN, i32 -3
  store i64 %lnaBO, i64* %lnaBP, !tbaa !2
  %lnaBS = load i64*, i64** %Hp_Var
  %lnaBT = ptrtoint i64* %lnaBS to i64
  %lnaBU = add i64 %lnaBT, -15
  %lnaBQ = load i64*, i64** %Sp_Var
  %lnaBV = getelementptr inbounds i64, i64* %lnaBQ, i32 -2
  store i64 %lnaBU, i64* %lnaBV, !tbaa !2
  %lnaBX = load i64*, i64** %Hp_Var
  %lnaBY = getelementptr inbounds i64, i64* %lnaBX, i32 -8
  %lnaBZ = ptrtoint i64* %lnaBY to i64
  %lnaBW = load i64*, i64** %Sp_Var
  %lnaC0 = getelementptr inbounds i64, i64* %lnaBW, i32 -1
  store i64 %lnaBZ, i64* %lnaC0, !tbaa !2
  %lnaC1 = load i64*, i64** %Sp_Var
  %lnaC2 = getelementptr inbounds i64, i64* %lnaC1, i32 -4
  %lnaC3 = ptrtoint i64* %lnaC2 to i64
  %lnaC4 = inttoptr i64 %lnaC3 to i64*
  store i64* %lnaC4, i64** %Sp_Var
  %lnaC5 = bitcast i8* @arrayzm0zi5zi2zi0_DataziArrayziBase_unsafeArray_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaC6 = load i64*, i64** %Sp_Var
  %lnaC7 = load i64*, i64** %Hp_Var
  %lnaC8 = load i64, i64* %R1_Var
  %lnaC9 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaC5( i64* %Base_Arg, i64* %lnaC6, i64* %lnaC7, i64 %lnaC8, i64 %lnaC9, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
camW:
  %lnaCa = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 72, i64* %lnaCa, !tbaa !5
  br label %camT
camT:
  %lnaCb = load i64, i64* %ls96k
  store i64 %lnaCb, i64* %R6_Var
  %lnaCc = load i64, i64* %ls96j
  store i64 %lnaCc, i64* %R5_Var
  %lnaCd = load i64, i64* %ls96i
  store i64 %lnaCd, i64* %R4_Var
  %lnaCe = load i64, i64* %ls96h
  store i64 %lnaCe, i64* %R3_Var
  %lnaCf = load i64, i64* %ls96g
  store i64 %lnaCf, i64* %R2_Var
  %lnaCg = ptrtoint %Main_zdwarrayByIndex_closure_struct* @Main_zdwarrayByIndex_closure$def to i64
  store i64 %lnaCg, i64* %R1_Var
  %lnaCh = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaCi = bitcast i64* %lnaCh to i64*
  %lnaCj = load i64, i64* %lnaCi, !tbaa !5
  %lnaCk = inttoptr i64 %lnaCj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaCl = load i64*, i64** %Sp_Var
  %lnaCm = load i64*, i64** %Hp_Var
  %lnaCn = load i64, i64* %R1_Var
  %lnaCo = load i64, i64* %R2_Var
  %lnaCp = load i64, i64* %R3_Var
  %lnaCq = load i64, i64* %R4_Var
  %lnaCr = load i64, i64* %R5_Var
  %lnaCs = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaCk( i64* %Base_Arg, i64* %lnaCl, i64* %lnaCm, i64 %lnaCn, i64 %lnaCo, i64 %lnaCp, i64 %lnaCq, i64 %lnaCr, i64 %lnaCs, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.7618355 UTC

%Main_arrayByIndex_closure_struct = type <{i64, i64}>
@Main_arrayByIndex_closure$def = internal global %Main_arrayByIndex_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex_info$def to i64), i64 0}>
@Main_arrayByIndex_closure = alias i8, bitcast (%Main_arrayByIndex_closure_struct* @Main_arrayByIndex_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.7658286 UTC

@Main_arrayByIndex_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex_info$def to i8*)
define ghccc void @Main_arrayByIndex_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_arrayByIndex_info$def to i64)),i64 104), i64 17179869208, i64 0, i64 12884901902}>
{
caCA:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnaCH = load i64*, i64** %Sp_Var
  %lnaCI = getelementptr inbounds i64, i64* %lnaCH, i32 -4
  %lnaCJ = ptrtoint i64* %lnaCI to i64
  %lnaCK = icmp ult i64 %lnaCJ, %SpLim_Arg
  %lnaCL = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaCK, i1 0 )
  br i1 %lnaCL, label %caCB, label %caCC
caCC:
  %lnaCN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caCx_info$def to i64
  %lnaCM = load i64*, i64** %Sp_Var
  %lnaCO = getelementptr inbounds i64, i64* %lnaCM, i32 -4
  store i64 %lnaCN, i64* %lnaCO, !tbaa !2
  %lnaCP = load i64, i64* %R4_Var
  store i64 %lnaCP, i64* %R1_Var
  %lnaCR = load i64, i64* %R2_Var
  %lnaCQ = load i64*, i64** %Sp_Var
  %lnaCS = getelementptr inbounds i64, i64* %lnaCQ, i32 -3
  store i64 %lnaCR, i64* %lnaCS, !tbaa !2
  %lnaCU = load i64, i64* %R3_Var
  %lnaCT = load i64*, i64** %Sp_Var
  %lnaCV = getelementptr inbounds i64, i64* %lnaCT, i32 -2
  store i64 %lnaCU, i64* %lnaCV, !tbaa !2
  %lnaCX = load i64, i64* %R5_Var
  %lnaCW = load i64*, i64** %Sp_Var
  %lnaCY = getelementptr inbounds i64, i64* %lnaCW, i32 -1
  store i64 %lnaCX, i64* %lnaCY, !tbaa !2
  %lnaCZ = load i64*, i64** %Sp_Var
  %lnaD0 = getelementptr inbounds i64, i64* %lnaCZ, i32 -4
  %lnaD1 = ptrtoint i64* %lnaD0 to i64
  %lnaD2 = inttoptr i64 %lnaD1 to i64*
  store i64* %lnaD2, i64** %Sp_Var
  %lnaD3 = load i64, i64* %R1_Var
  %lnaD4 = and i64 %lnaD3, 7
  %lnaD5 = icmp ne i64 %lnaD4, 0
  br i1 %lnaD5, label %uaCG, label %caCy
caCy:
  %lnaD7 = load i64, i64* %R1_Var
  %lnaD8 = inttoptr i64 %lnaD7 to i64*
  %lnaD9 = load i64, i64* %lnaD8, !tbaa !4
  %lnaDa = inttoptr i64 %lnaD9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaDb = load i64*, i64** %Sp_Var
  %lnaDc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaDa( i64* %Base_Arg, i64* %lnaDb, i64* %Hp_Arg, i64 %lnaDc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaCG:
  %lnaDd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caCx_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaDe = load i64*, i64** %Sp_Var
  %lnaDf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaDd( i64* %Base_Arg, i64* %lnaDe, i64* %Hp_Arg, i64 %lnaDf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caCB:
  %lnaDg = load i64, i64* %R5_Var
  store i64 %lnaDg, i64* %R5_Var
  %lnaDh = load i64, i64* %R4_Var
  store i64 %lnaDh, i64* %R4_Var
  %lnaDi = load i64, i64* %R3_Var
  store i64 %lnaDi, i64* %R3_Var
  %lnaDj = load i64, i64* %R2_Var
  store i64 %lnaDj, i64* %R2_Var
  %lnaDk = ptrtoint %Main_arrayByIndex_closure_struct* @Main_arrayByIndex_closure$def to i64
  store i64 %lnaDk, i64* %R1_Var
  %lnaDl = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaDm = bitcast i64* %lnaDl to i64*
  %lnaDn = load i64, i64* %lnaDm, !tbaa !5
  %lnaDo = inttoptr i64 %lnaDn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaDp = load i64*, i64** %Sp_Var
  %lnaDq = load i64, i64* %R1_Var
  %lnaDr = load i64, i64* %R2_Var
  %lnaDs = load i64, i64* %R3_Var
  %lnaDt = load i64, i64* %R4_Var
  %lnaDu = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaDo( i64* %Base_Arg, i64* %lnaDp, i64* %Hp_Arg, i64 %lnaDq, i64 %lnaDr, i64 %lnaDs, i64 %lnaDt, i64 %lnaDu, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.7718237 UTC

@caCx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caCx_info$def to i8*)
define internal ghccc void @caCx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caCx_info$def to i64)),i64 104), i64 3, i64 4294967326}>
{
caCx:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaDv = load i64*, i64** %Sp_Var
  %lnaDw = getelementptr inbounds i64, i64* %lnaDv, i32 3
  %lnaDx = bitcast i64* %lnaDw to i64*
  %lnaDy = load i64, i64* %lnaDx, !tbaa !2
  store i64 %lnaDy, i64* %R6_Var
  %lnaDz = add i64 %R1_Arg, 15
  %lnaDA = inttoptr i64 %lnaDz to i64*
  %lnaDB = load i64, i64* %lnaDA, !tbaa !4
  store i64 %lnaDB, i64* %R5_Var
  %lnaDC = add i64 %R1_Arg, 7
  %lnaDD = inttoptr i64 %lnaDC to i64*
  %lnaDE = load i64, i64* %lnaDD, !tbaa !4
  store i64 %lnaDE, i64* %R4_Var
  %lnaDF = load i64*, i64** %Sp_Var
  %lnaDG = getelementptr inbounds i64, i64* %lnaDF, i32 2
  %lnaDH = bitcast i64* %lnaDG to i64*
  %lnaDI = load i64, i64* %lnaDH, !tbaa !2
  store i64 %lnaDI, i64* %R3_Var
  %lnaDJ = load i64*, i64** %Sp_Var
  %lnaDK = getelementptr inbounds i64, i64* %lnaDJ, i32 1
  %lnaDL = bitcast i64* %lnaDK to i64*
  %lnaDM = load i64, i64* %lnaDL, !tbaa !2
  store i64 %lnaDM, i64* %R2_Var
  %lnaDN = load i64*, i64** %Sp_Var
  %lnaDO = getelementptr inbounds i64, i64* %lnaDN, i32 4
  %lnaDP = ptrtoint i64* %lnaDO to i64
  %lnaDQ = inttoptr i64 %lnaDP to i64*
  store i64* %lnaDQ, i64** %Sp_Var
  %lnaDR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwarrayByIndex_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaDS = load i64*, i64** %Sp_Var
  %lnaDT = load i64, i64* %R2_Var
  %lnaDU = load i64, i64* %R3_Var
  %lnaDV = load i64, i64* %R4_Var
  %lnaDW = load i64, i64* %R5_Var
  %lnaDX = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaDR( i64* %Base_Arg, i64* %lnaDS, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaDT, i64 %lnaDU, i64 %lnaDV, i64 %lnaDW, i64 %lnaDX, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.7977784 UTC

%Main_updateGameState_closure_struct = type <{i64, i64}>
@Main_updateGameState_closure$def = internal global %Main_updateGameState_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_updateGameState_info$def to i64), i64 0}>
@Main_updateGameState_closure = alias i8, bitcast (%Main_updateGameState_closure_struct* @Main_updateGameState_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:26.8017722 UTC

@s974_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to i8*)
define internal ghccc void @s974_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to i64)),i64 32), i64 8589934604, i64 1, i64 12884901897}>
{
caEa:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnaS7 = load i64*, i64** %Sp_Var
  %lnaS8 = getelementptr inbounds i64, i64* %lnaS7, i32 -8
  %lnaS9 = ptrtoint i64* %lnaS8 to i64
  %lnaSa = icmp ult i64 %lnaS9, %SpLim_Arg
  %lnaSb = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaSa, i1 0 )
  br i1 %lnaSb, label %caEo, label %caEp
caEp:
  %lnaSd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caE7_info$def to i64
  %lnaSc = load i64*, i64** %Sp_Var
  %lnaSe = getelementptr inbounds i64, i64* %lnaSc, i32 -3
  store i64 %lnaSd, i64* %lnaSe, !tbaa !2
  %lnaSh = load i64, i64* %R1_Var
  %lnaSi = add i64 %lnaSh, 6
  %lnaSj = inttoptr i64 %lnaSi to i64*
  %lnaSk = load i64, i64* %lnaSj, !tbaa !4
  store i64 %lnaSk, i64* %R1_Var
  %lnaSm = load i64, i64* %R2_Var
  %lnaSl = load i64*, i64** %Sp_Var
  %lnaSn = getelementptr inbounds i64, i64* %lnaSl, i32 -2
  store i64 %lnaSm, i64* %lnaSn, !tbaa !2
  %lnaSp = load i64, i64* %R3_Var
  %lnaSo = load i64*, i64** %Sp_Var
  %lnaSq = getelementptr inbounds i64, i64* %lnaSo, i32 -1
  store i64 %lnaSp, i64* %lnaSq, !tbaa !2
  %lnaSr = load i64*, i64** %Sp_Var
  %lnaSs = getelementptr inbounds i64, i64* %lnaSr, i32 -3
  %lnaSt = ptrtoint i64* %lnaSs to i64
  %lnaSu = inttoptr i64 %lnaSt to i64*
  store i64* %lnaSu, i64** %Sp_Var
  %lnaSv = load i64, i64* %R1_Var
  %lnaSw = and i64 %lnaSv, 7
  %lnaSx = icmp ne i64 %lnaSw, 0
  br i1 %lnaSx, label %uaGE, label %caE8
caE8:
  %lnaSz = load i64, i64* %R1_Var
  %lnaSA = inttoptr i64 %lnaSz to i64*
  %lnaSB = load i64, i64* %lnaSA, !tbaa !4
  %lnaSC = inttoptr i64 %lnaSB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaSD = load i64*, i64** %Sp_Var
  %lnaSE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaSC( i64* %Base_Arg, i64* %lnaSD, i64* %Hp_Arg, i64 %lnaSE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaGE:
  %lnaSF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caE7_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaSG = load i64*, i64** %Sp_Var
  %lnaSH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaSF( i64* %Base_Arg, i64* %lnaSG, i64* %Hp_Arg, i64 %lnaSH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caEo:
  %lnaSI = load i64, i64* %R3_Var
  store i64 %lnaSI, i64* %R3_Var
  %lnaSJ = load i64, i64* %R2_Var
  store i64 %lnaSJ, i64* %R2_Var
  %lnaSK = load i64, i64* %R1_Var
  store i64 %lnaSK, i64* %R1_Var
  %lnaSL = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaSM = bitcast i64* %lnaSL to i64*
  %lnaSN = load i64, i64* %lnaSM, !tbaa !5
  %lnaSO = inttoptr i64 %lnaSN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaSP = load i64*, i64** %Sp_Var
  %lnaSQ = load i64, i64* %R1_Var
  %lnaSR = load i64, i64* %R2_Var
  %lnaSS = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaSO( i64* %Base_Arg, i64* %lnaSP, i64* %Hp_Arg, i64 %lnaSQ, i64 %lnaSR, i64 %lnaSS, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8077634 UTC

@caE7_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caE7_info$def to i8*)
define internal ghccc void @caE7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caE7_info$def to i64)),i64 32), i64 194, i64 12884901918}>
{
caE7:
  %ls979 = alloca i64, i32 1
  %ls97b = alloca i64, i32 1
  %ls97a = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaSU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEd_info$def to i64
  %lnaST = load i64*, i64** %Sp_Var
  %lnaSV = getelementptr inbounds i64, i64* %lnaST, i32 -3
  store i64 %lnaSU, i64* %lnaSV, !tbaa !2
  %lnaSY = load i64, i64* %R1_Var
  %lnaSZ = add i64 %lnaSY, 15
  %lnaT0 = inttoptr i64 %lnaSZ to i64*
  %lnaT1 = load i64, i64* %lnaT0, !tbaa !4
  store i64 %lnaT1, i64* %ls979
  %lnaT4 = load i64, i64* %R1_Var
  %lnaT5 = add i64 %lnaT4, 23
  %lnaT6 = inttoptr i64 %lnaT5 to i64*
  %lnaT7 = load i64, i64* %lnaT6, !tbaa !4
  store i64 %lnaT7, i64* %ls97b
  %lnaTa = load i64, i64* %R1_Var
  %lnaTb = add i64 %lnaTa, 31
  %lnaTc = inttoptr i64 %lnaTb to i64*
  %lnaTd = load i64, i64* %lnaTc, !tbaa !4
  store i64 %lnaTd, i64* %ls97a
  %lnaTg = load i64, i64* %R1_Var
  %lnaTh = add i64 %lnaTg, 7
  %lnaTi = inttoptr i64 %lnaTh to i64*
  %lnaTj = load i64, i64* %lnaTi, !tbaa !4
  store i64 %lnaTj, i64* %R1_Var
  %lnaTl = load i64, i64* %ls97a
  %lnaTk = load i64*, i64** %Sp_Var
  %lnaTm = getelementptr inbounds i64, i64* %lnaTk, i32 -2
  store i64 %lnaTl, i64* %lnaTm, !tbaa !2
  %lnaTo = load i64, i64* %ls97b
  %lnaTn = load i64*, i64** %Sp_Var
  %lnaTp = getelementptr inbounds i64, i64* %lnaTn, i32 -1
  store i64 %lnaTo, i64* %lnaTp, !tbaa !2
  %lnaTr = load i64, i64* %ls979
  %lnaTq = load i64*, i64** %Sp_Var
  %lnaTs = getelementptr inbounds i64, i64* %lnaTq, i32 0
  store i64 %lnaTr, i64* %lnaTs, !tbaa !2
  %lnaTt = load i64*, i64** %Sp_Var
  %lnaTu = getelementptr inbounds i64, i64* %lnaTt, i32 -3
  %lnaTv = ptrtoint i64* %lnaTu to i64
  %lnaTw = inttoptr i64 %lnaTv to i64*
  store i64* %lnaTw, i64** %Sp_Var
  %lnaTx = load i64, i64* %R1_Var
  %lnaTy = and i64 %lnaTx, 7
  %lnaTz = icmp ne i64 %lnaTy, 0
  br i1 %lnaTz, label %uaGD, label %caEe
caEe:
  %lnaTB = load i64, i64* %R1_Var
  %lnaTC = inttoptr i64 %lnaTB to i64*
  %lnaTD = load i64, i64* %lnaTC, !tbaa !4
  %lnaTE = inttoptr i64 %lnaTD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaTF = load i64*, i64** %Sp_Var
  %lnaTG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaTE( i64* %Base_Arg, i64* %lnaTF, i64* %Hp_Arg, i64 %lnaTG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaGD:
  %lnaTH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEd_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaTI = load i64*, i64** %Sp_Var
  %lnaTJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaTH( i64* %Base_Arg, i64* %lnaTI, i64* %Hp_Arg, i64 %lnaTJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.813754 UTC

@caEd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEd_info$def to i8*)
define internal ghccc void @caEd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEd_info$def to i64)),i64 32), i64 1605, i64 12884901918}>
{
caEd:
  %ls97d = alloca i64, i32 1
  %ls97e = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaTL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEi_info$def to i64
  %lnaTK = load i64*, i64** %Sp_Var
  %lnaTM = getelementptr inbounds i64, i64* %lnaTK, i32 -1
  store i64 %lnaTL, i64* %lnaTM, !tbaa !2
  %lnaTP = load i64, i64* %R1_Var
  %lnaTQ = add i64 %lnaTP, 7
  %lnaTR = inttoptr i64 %lnaTQ to i64*
  %lnaTS = load i64, i64* %lnaTR, !tbaa !4
  store i64 %lnaTS, i64* %ls97d
  %lnaTV = load i64, i64* %R1_Var
  %lnaTW = add i64 %lnaTV, 15
  %lnaTX = inttoptr i64 %lnaTW to i64*
  %lnaTY = load i64, i64* %lnaTX, !tbaa !4
  store i64 %lnaTY, i64* %ls97e
  %lnaTZ = load i64*, i64** %Sp_Var
  %lnaU0 = getelementptr inbounds i64, i64* %lnaTZ, i32 3
  %lnaU1 = bitcast i64* %lnaU0 to i64*
  %lnaU2 = load i64, i64* %lnaU1, !tbaa !2
  store i64 %lnaU2, i64* %R1_Var
  %lnaU4 = load i64, i64* %ls97e
  %lnaU3 = load i64*, i64** %Sp_Var
  %lnaU5 = getelementptr inbounds i64, i64* %lnaU3, i32 0
  store i64 %lnaU4, i64* %lnaU5, !tbaa !2
  %lnaU7 = load i64, i64* %ls97d
  %lnaU6 = load i64*, i64** %Sp_Var
  %lnaU8 = getelementptr inbounds i64, i64* %lnaU6, i32 3
  store i64 %lnaU7, i64* %lnaU8, !tbaa !2
  %lnaU9 = load i64*, i64** %Sp_Var
  %lnaUa = getelementptr inbounds i64, i64* %lnaU9, i32 -1
  %lnaUb = ptrtoint i64* %lnaUa to i64
  %lnaUc = inttoptr i64 %lnaUb to i64*
  store i64* %lnaUc, i64** %Sp_Var
  %lnaUd = load i64, i64* %R1_Var
  %lnaUe = and i64 %lnaUd, 7
  %lnaUf = icmp ne i64 %lnaUe, 0
  br i1 %lnaUf, label %uaGF, label %caEj
caEj:
  %lnaUh = load i64, i64* %R1_Var
  %lnaUi = inttoptr i64 %lnaUh to i64*
  %lnaUj = load i64, i64* %lnaUi, !tbaa !4
  %lnaUk = inttoptr i64 %lnaUj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaUl = load i64*, i64** %Sp_Var
  %lnaUm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaUk( i64* %Base_Arg, i64* %lnaUl, i64* %Hp_Arg, i64 %lnaUm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaGF:
  %lnaUn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEi_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaUo = load i64*, i64** %Sp_Var
  %lnaUp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaUn( i64* %Base_Arg, i64* %lnaUo, i64* %Hp_Arg, i64 %lnaUp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8187468 UTC

@caEi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEi_info$def to i8*)
define internal ghccc void @caEi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEi_info$def to i64)),i64 32), i64 3206, i64 12884901918}>
{
caEi:
  %ls97g = alloca i64, i32 1
  %ls97h = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaUr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEn_info$def to i64
  %lnaUq = load i64*, i64** %Sp_Var
  %lnaUs = getelementptr inbounds i64, i64* %lnaUq, i32 -1
  store i64 %lnaUr, i64* %lnaUs, !tbaa !2
  %lnaUv = load i64, i64* %R1_Var
  %lnaUw = add i64 %lnaUv, 7
  %lnaUx = inttoptr i64 %lnaUw to i64*
  %lnaUy = load i64, i64* %lnaUx, !tbaa !4
  store i64 %lnaUy, i64* %ls97g
  %lnaUB = load i64, i64* %R1_Var
  %lnaUC = add i64 %lnaUB, 15
  %lnaUD = inttoptr i64 %lnaUC to i64*
  %lnaUE = load i64, i64* %lnaUD, !tbaa !4
  store i64 %lnaUE, i64* %ls97h
  %lnaUF = load i64*, i64** %Sp_Var
  %lnaUG = getelementptr inbounds i64, i64* %lnaUF, i32 4
  %lnaUH = bitcast i64* %lnaUG to i64*
  %lnaUI = load i64, i64* %lnaUH, !tbaa !2
  store i64 %lnaUI, i64* %R1_Var
  %lnaUK = load i64, i64* %ls97h
  %lnaUJ = load i64*, i64** %Sp_Var
  %lnaUL = getelementptr inbounds i64, i64* %lnaUJ, i32 0
  store i64 %lnaUK, i64* %lnaUL, !tbaa !2
  %lnaUN = load i64, i64* %ls97g
  %lnaUM = load i64*, i64** %Sp_Var
  %lnaUO = getelementptr inbounds i64, i64* %lnaUM, i32 4
  store i64 %lnaUN, i64* %lnaUO, !tbaa !2
  %lnaUP = load i64*, i64** %Sp_Var
  %lnaUQ = getelementptr inbounds i64, i64* %lnaUP, i32 -1
  %lnaUR = ptrtoint i64* %lnaUQ to i64
  %lnaUS = inttoptr i64 %lnaUR to i64*
  store i64* %lnaUS, i64** %Sp_Var
  %lnaUT = load i64, i64* %R1_Var
  %lnaUU = and i64 %lnaUT, 7
  %lnaUV = icmp ne i64 %lnaUU, 0
  br i1 %lnaUV, label %uaGG, label %caEt
caEt:
  %lnaUX = load i64, i64* %R1_Var
  %lnaUY = inttoptr i64 %lnaUX to i64*
  %lnaUZ = load i64, i64* %lnaUY, !tbaa !4
  %lnaV0 = inttoptr i64 %lnaUZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaV1 = load i64*, i64** %Sp_Var
  %lnaV2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaV0( i64* %Base_Arg, i64* %lnaV1, i64* %Hp_Arg, i64 %lnaV2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaGG:
  %lnaV3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaV4 = load i64*, i64** %Sp_Var
  %lnaV5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaV3( i64* %Base_Arg, i64* %lnaV4, i64* %Hp_Arg, i64 %lnaV5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8247399 UTC

@caEn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEn_info$def to i8*)
define internal ghccc void @caEn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEn_info$def to i64)),i64 32), i64 6407, i64 12884901918}>
{
caEn:
  %ls97j = alloca i64, i32 1
  %ls97k = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaV8 = load i64, i64* %R1_Var
  %lnaV9 = add i64 %lnaV8, 7
  %lnaVa = inttoptr i64 %lnaV9 to i64*
  %lnaVb = load i64, i64* %lnaVa, !tbaa !4
  store i64 %lnaVb, i64* %ls97j
  %lnaVc = load i64*, i64** %Sp_Var
  %lnaVd = getelementptr inbounds i64, i64* %lnaVc, i32 6
  %lnaVe = bitcast i64* %lnaVd to i64*
  %lnaVf = load i64, i64* %lnaVe, !tbaa !2
  %lnaVg = and i64 %lnaVf, 15
  %lnaVh = trunc i64 %lnaVg to i8
  %lnaVi = sext i8 %lnaVh to i64
  store i64 %lnaVi, i64* %ls97k
  %lnaVj = load i64, i64* %ls97j
  %lnaVk = load i64, i64* %ls97k
  %lnaVl = icmp sle i64 %lnaVj, %lnaVk
  %lnaVm = zext i1 %lnaVl to i64
  switch i64 %lnaVm, label %uaGz [i64 1, label %caEL]
uaGz:
  %lnaVn = load i64*, i64** %Sp_Var
  %lnaVo = getelementptr inbounds i64, i64* %lnaVn, i32 8
  %lnaVp = ptrtoint i64* %lnaVo to i64
  %lnaVq = inttoptr i64 %lnaVp to i64*
  store i64* %lnaVq, i64** %Sp_Var
  %lnaVr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caFs$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaVs = load i64*, i64** %Sp_Var
  %lnaVt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaVr( i64* %Base_Arg, i64* %lnaVs, i64* %Hp_Arg, i64 %lnaVt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caEL:
  %lnaVv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEK_info$def to i64
  %lnaVu = load i64*, i64** %Sp_Var
  %lnaVw = getelementptr inbounds i64, i64* %lnaVu, i32 0
  store i64 %lnaVv, i64* %lnaVw, !tbaa !2
  %lnaVx = load i64*, i64** %Sp_Var
  %lnaVy = getelementptr inbounds i64, i64* %lnaVx, i32 5
  %lnaVz = bitcast i64* %lnaVy to i64*
  %lnaVA = load i64, i64* %lnaVz, !tbaa !2
  store i64 %lnaVA, i64* %R1_Var
  %lnaVC = load i64, i64* %ls97k
  %lnaVB = load i64*, i64** %Sp_Var
  %lnaVD = getelementptr inbounds i64, i64* %lnaVB, i32 5
  store i64 %lnaVC, i64* %lnaVD, !tbaa !2
  %lnaVF = load i64, i64* %ls97j
  %lnaVE = load i64*, i64** %Sp_Var
  %lnaVG = getelementptr inbounds i64, i64* %lnaVE, i32 6
  store i64 %lnaVF, i64* %lnaVG, !tbaa !2
  %lnaVH = load i64, i64* %R1_Var
  %lnaVI = and i64 %lnaVH, 7
  %lnaVJ = icmp ne i64 %lnaVI, 0
  br i1 %lnaVJ, label %uaGH, label %caEM
caEM:
  %lnaVL = load i64, i64* %R1_Var
  %lnaVM = inttoptr i64 %lnaVL to i64*
  %lnaVN = load i64, i64* %lnaVM, !tbaa !4
  %lnaVO = inttoptr i64 %lnaVN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaVP = load i64*, i64** %Sp_Var
  %lnaVQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaVO( i64* %Base_Arg, i64* %lnaVP, i64* %Hp_Arg, i64 %lnaVQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaGH:
  %lnaVR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEK_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaVS = load i64*, i64** %Sp_Var
  %lnaVT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaVR( i64* %Base_Arg, i64* %lnaVS, i64* %Hp_Arg, i64 %lnaVT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8307267 UTC

@caEK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEK_info$def to i8*)
define internal ghccc void @caEK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEK_info$def to i64)),i64 32), i64 7431, i64 12884901918}>
{
caEK:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaVU = load i64*, i64** %Sp_Var
  %lnaVV = getelementptr inbounds i64, i64* %lnaVU, i32 5
  %lnaVW = bitcast i64* %lnaVV to i64*
  %lnaVX = load i64, i64* %lnaVW, !tbaa !2
  %lnaW0 = load i64, i64* %R1_Var
  %lnaW1 = add i64 %lnaW0, 7
  %lnaW2 = inttoptr i64 %lnaW1 to i64*
  %lnaW3 = load i64, i64* %lnaW2, !tbaa !4
  %lnaW4 = icmp sle i64 %lnaVX, %lnaW3
  %lnaW5 = zext i1 %lnaW4 to i64
  switch i64 %lnaW5, label %uaGA [i64 1, label %caF3]
uaGA:
  %lnaW6 = load i64*, i64** %Sp_Var
  %lnaW7 = getelementptr inbounds i64, i64* %lnaW6, i32 8
  %lnaW8 = ptrtoint i64* %lnaW7 to i64
  %lnaW9 = inttoptr i64 %lnaW8 to i64*
  store i64* %lnaW9, i64** %Sp_Var
  %lnaWa = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caFs$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaWb = load i64*, i64** %Sp_Var
  %lnaWc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaWa( i64* %Base_Arg, i64* %lnaWb, i64* %Hp_Arg, i64 %lnaWc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caF3:
  %lnaWe = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEX_info$def to i64
  %lnaWd = load i64*, i64** %Sp_Var
  %lnaWf = getelementptr inbounds i64, i64* %lnaWd, i32 0
  store i64 %lnaWe, i64* %lnaWf, !tbaa !2
  %lnaWg = load i64*, i64** %Sp_Var
  %lnaWh = getelementptr inbounds i64, i64* %lnaWg, i32 2
  %lnaWi = bitcast i64* %lnaWh to i64*
  %lnaWj = load i64, i64* %lnaWi, !tbaa !2
  store i64 %lnaWj, i64* %R1_Var
  %lnaWk = load i64, i64* %R1_Var
  %lnaWl = and i64 %lnaWk, 7
  %lnaWm = icmp ne i64 %lnaWl, 0
  br i1 %lnaWm, label %uaGJ, label %caEY
caEY:
  %lnaWo = load i64, i64* %R1_Var
  %lnaWp = inttoptr i64 %lnaWo to i64*
  %lnaWq = load i64, i64* %lnaWp, !tbaa !4
  %lnaWr = inttoptr i64 %lnaWq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaWs = load i64*, i64** %Sp_Var
  %lnaWt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaWr( i64* %Base_Arg, i64* %lnaWs, i64* %Hp_Arg, i64 %lnaWt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaGJ:
  %lnaWu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaWv = load i64*, i64** %Sp_Var
  %lnaWw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaWu( i64* %Base_Arg, i64* %lnaWv, i64* %Hp_Arg, i64 %lnaWw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8357259 UTC

@caEX_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEX_info$def to i8*)
define internal ghccc void @caEX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caEX_info$def to i64)),i64 32), i64 7559, i64 12884901918}>
{
caEX:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnaWx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caF2_info$def to i64
  %lnaWy = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaWx, i64* %lnaWy, !tbaa !2
  store i64 17, i64* %R3_Var
  %lnaWz = getelementptr inbounds i64, i64* %Sp_Arg, i32 7
  %lnaWA = bitcast i64* %lnaWz to i64*
  %lnaWB = load i64, i64* %lnaWA, !tbaa !2
  store i64 %lnaWB, i64* %R2_Var
  %lnaWC = add i64 %R1_Arg, 7
  %lnaWD = inttoptr i64 %lnaWC to i64*
  %lnaWE = load i64, i64* %lnaWD, !tbaa !4
  %lnaWF = getelementptr inbounds i64, i64* %Sp_Arg, i32 7
  store i64 %lnaWE, i64* %lnaWF, !tbaa !2
  %lnaWG = bitcast i8* @ghczmprim_GHCziClasses_modIntzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaWH = load i64, i64* %R2_Var
  %lnaWI = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaWG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaWH, i64 %lnaWI, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8427105 UTC

@caF2_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caF2_info$def to i8*)
define internal ghccc void @caF2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caF2_info$def to i64)),i64 32), i64 7559, i64 12884901918}>
{
caF2:
  %ls97v = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls97h = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaWJ = load i64, i64* %R1_Var
  %lnaWK = trunc i64 %lnaWJ to i8
  %lnaWL = sext i8 %lnaWK to i64
  store i64 %lnaWL, i64* %ls97v
  %lnaWM = load i64*, i64** %Sp_Var
  %lnaWN = getelementptr inbounds i64, i64* %lnaWM, i32 7
  %lnaWO = bitcast i64* %lnaWN to i64*
  %lnaWP = load i64, i64* %lnaWO, !tbaa !2
  %lnaWQ = load i64, i64* %ls97v
  %lnaWR = icmp sle i64 %lnaWP, %lnaWQ
  %lnaWS = zext i1 %lnaWR to i64
  switch i64 %lnaWS, label %uaGB [i64 1, label %caFj]
uaGB:
  %lnaWT = load i64*, i64** %Sp_Var
  %lnaWU = getelementptr inbounds i64, i64* %lnaWT, i32 8
  %lnaWV = ptrtoint i64* %lnaWU to i64
  %lnaWW = inttoptr i64 %lnaWV to i64*
  store i64* %lnaWW, i64** %Sp_Var
  %lnaWX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caFs$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaWY = load i64*, i64** %Sp_Var
  %lnaWZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaWX( i64* %Base_Arg, i64* %lnaWY, i64* %Hp_Arg, i64 %lnaWZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caFj:
  %lnaX0 = load i64*, i64** %Sp_Var
  %lnaX1 = getelementptr inbounds i64, i64* %lnaX0, i32 1
  %lnaX2 = bitcast i64* %lnaX1 to i64*
  %lnaX3 = load i64, i64* %lnaX2, !tbaa !2
  store i64 %lnaX3, i64* %ls97h
  %lnaX5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caFi_info$def to i64
  %lnaX4 = load i64*, i64** %Sp_Var
  %lnaX6 = getelementptr inbounds i64, i64* %lnaX4, i32 1
  store i64 %lnaX5, i64* %lnaX6, !tbaa !2
  %lnaX7 = load i64, i64* %ls97h
  store i64 %lnaX7, i64* %R1_Var
  %lnaX9 = load i64, i64* %ls97v
  %lnaX8 = load i64*, i64** %Sp_Var
  %lnaXa = getelementptr inbounds i64, i64* %lnaX8, i32 2
  store i64 %lnaX9, i64* %lnaXa, !tbaa !2
  %lnaXb = load i64*, i64** %Sp_Var
  %lnaXc = getelementptr inbounds i64, i64* %lnaXb, i32 1
  %lnaXd = ptrtoint i64* %lnaXc to i64
  %lnaXe = inttoptr i64 %lnaXd to i64*
  store i64* %lnaXe, i64** %Sp_Var
  %lnaXf = load i64, i64* %R1_Var
  %lnaXg = and i64 %lnaXf, 7
  %lnaXh = icmp ne i64 %lnaXg, 0
  br i1 %lnaXh, label %uaGL, label %caFk
caFk:
  %lnaXj = load i64, i64* %R1_Var
  %lnaXk = inttoptr i64 %lnaXj to i64*
  %lnaXl = load i64, i64* %lnaXk, !tbaa !4
  %lnaXm = inttoptr i64 %lnaXl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaXn = load i64*, i64** %Sp_Var
  %lnaXo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaXm( i64* %Base_Arg, i64* %lnaXn, i64* %Hp_Arg, i64 %lnaXo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaGL:
  %lnaXp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caFi_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaXq = load i64*, i64** %Sp_Var
  %lnaXr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaXp( i64* %Base_Arg, i64* %lnaXq, i64* %Hp_Arg, i64 %lnaXr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8496988 UTC

@caFi_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caFi_info$def to i8*)
define internal ghccc void @caFi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caFi_info$def to i64)),i64 32), i64 3782, i64 12884901918}>
{
caFi:
  %ls97v = alloca i64, i32 1
  %ls97z = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls97a = alloca i64, i32 1
  %ls97t = alloca i64, i32 1
  %ls97C = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaXs = load i64*, i64** %Sp_Var
  %lnaXt = getelementptr inbounds i64, i64* %lnaXs, i32 1
  %lnaXu = bitcast i64* %lnaXt to i64*
  %lnaXv = load i64, i64* %lnaXu, !tbaa !2
  store i64 %lnaXv, i64* %ls97v
  %lnaXy = load i64, i64* %R1_Var
  %lnaXz = add i64 %lnaXy, 7
  %lnaXA = inttoptr i64 %lnaXz to i64*
  %lnaXB = load i64, i64* %lnaXA, !tbaa !4
  store i64 %lnaXB, i64* %ls97z
  %lnaXC = load i64, i64* %ls97v
  %lnaXD = load i64, i64* %ls97z
  %lnaXE = icmp sle i64 %lnaXC, %lnaXD
  %lnaXF = zext i1 %lnaXE to i64
  switch i64 %lnaXF, label %uaGC [i64 1, label %caGy]
uaGC:
  %lnaXG = load i64*, i64** %Sp_Var
  %lnaXH = getelementptr inbounds i64, i64* %lnaXG, i32 7
  %lnaXI = ptrtoint i64* %lnaXH to i64
  %lnaXJ = inttoptr i64 %lnaXI to i64*
  store i64* %lnaXJ, i64** %Sp_Var
  %lnaXK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caFs$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaXL = load i64*, i64** %Sp_Var
  %lnaXM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaXK( i64* %Base_Arg, i64* %lnaXL, i64* %Hp_Arg, i64 %lnaXM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caGy:
  %lnaXN = load i64*, i64** %Sp_Var
  %lnaXO = getelementptr inbounds i64, i64* %lnaXN, i32 2
  %lnaXP = bitcast i64* %lnaXO to i64*
  %lnaXQ = load i64, i64* %lnaXP, !tbaa !2
  store i64 %lnaXQ, i64* %ls97a
  %lnaXR = load i64*, i64** %Sp_Var
  %lnaXS = getelementptr inbounds i64, i64* %lnaXR, i32 6
  %lnaXT = bitcast i64* %lnaXS to i64*
  %lnaXU = load i64, i64* %lnaXT, !tbaa !2
  store i64 %lnaXU, i64* %ls97t
  %lnaXV = load i64*, i64** %Sp_Var
  %lnaXW = getelementptr inbounds i64, i64* %lnaXV, i32 4
  %lnaXX = bitcast i64* %lnaXW to i64*
  %lnaXY = load i64, i64* %lnaXX, !tbaa !2
  %lnaXZ = load i64*, i64** %Sp_Var
  %lnaY0 = getelementptr inbounds i64, i64* %lnaXZ, i32 5
  %lnaY1 = bitcast i64* %lnaY0 to i64*
  %lnaY2 = load i64, i64* %lnaY1, !tbaa !2
  %lnaY3 = sub i64 %lnaXY, %lnaY2
  %lnaY4 = load i64, i64* %ls97z
  %lnaY5 = load i64, i64* %ls97t
  %lnaY6 = sub i64 1, %lnaY5
  %lnaY7 = add i64 %lnaY4, %lnaY6
  %lnaY8 = mul i64 %lnaY3, %lnaY7
  %lnaY9 = load i64, i64* %ls97v
  %lnaYa = load i64, i64* %ls97t
  %lnaYb = sub i64 %lnaY9, %lnaYa
  %lnaYc = add i64 %lnaY8, %lnaYb
  store i64 %lnaYc, i64* %ls97C
  %lnaYd = load i64, i64* %ls97C
  %lnaYe = icmp sle i64 0, %lnaYd
  %lnaYf = zext i1 %lnaYe to i64
  switch i64 %lnaYf, label %caFW [i64 1, label %caGx]
caFW:
  %lnaYg = load i64, i64* %ls97C
  store i64 %lnaYg, i64* %R3_Var
  %lnaYh = load i64, i64* %ls97a
  store i64 %lnaYh, i64* %R2_Var
  %lnaYi = load i64*, i64** %Sp_Var
  %lnaYj = getelementptr inbounds i64, i64* %lnaYi, i32 7
  %lnaYk = ptrtoint i64* %lnaYj to i64
  %lnaYl = inttoptr i64 %lnaYk to i64*
  store i64* %lnaYl, i64** %Sp_Var
  %lnaYm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaYn = load i64*, i64** %Sp_Var
  %lnaYo = load i64, i64* %R1_Var
  %lnaYp = load i64, i64* %R2_Var
  %lnaYq = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaYm( i64* %Base_Arg, i64* %lnaYn, i64* %Hp_Arg, i64 %lnaYo, i64 %lnaYp, i64 %lnaYq, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caGx:
  %lnaYr = load i64, i64* %ls97C
  %lnaYs = load i64, i64* %ls97a
  %lnaYt = icmp slt i64 %lnaYr, %lnaYs
  %lnaYu = zext i1 %lnaYt to i64
  switch i64 %lnaYu, label %caFW [i64 1, label %caGw]
caGw:
  %lnaYv = load i64*, i64** %Sp_Var
  %lnaYw = getelementptr inbounds i64, i64* %lnaYv, i32 3
  %lnaYx = bitcast i64* %lnaYw to i64*
  %lnaYy = load i64, i64* %lnaYx, !tbaa !2
  %lnaYz = load i64, i64* %ls97C
  %lnaYA = ashr i64 %lnaYz, 6
  %lnaYB = shl i64 %lnaYA, 3
  %lnaYC = add i64 %lnaYB, 16
  %lnaYD = add i64 %lnaYy, %lnaYC
  %lnaYE = inttoptr i64 %lnaYD to i64*
  %lnaYF = load i64, i64* %lnaYE, !tbaa !1
  %lnaYG = load i64, i64* %ls97C
  %lnaYH = and i64 %lnaYG, 63
  %lnaYI = shl i64 1, %lnaYH
  %lnaYJ = and i64 %lnaYF, %lnaYI
  switch i64 %lnaYJ, label %caGm [i64 0, label %caGs]
caGm:
  %lnaYK = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %lnaYL = add i64 %lnaYK, 2
  store i64 %lnaYL, i64* %R1_Var
  %lnaYM = load i64*, i64** %Sp_Var
  %lnaYN = getelementptr inbounds i64, i64* %lnaYM, i32 7
  %lnaYO = ptrtoint i64* %lnaYN to i64
  %lnaYP = inttoptr i64 %lnaYO to i64*
  store i64* %lnaYP, i64** %Sp_Var
  %lnaYQ = load i64*, i64** %Sp_Var
  %lnaYR = getelementptr inbounds i64, i64* %lnaYQ, i32 0
  %lnaYS = bitcast i64* %lnaYR to i64*
  %lnaYT = load i64, i64* %lnaYS, !tbaa !2
  %lnaYU = inttoptr i64 %lnaYT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaYV = load i64*, i64** %Sp_Var
  %lnaYW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaYU( i64* %Base_Arg, i64* %lnaYV, i64* %Hp_Arg, i64 %lnaYW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caGs:
  %lnaYX = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %lnaYY = add i64 %lnaYX, 1
  store i64 %lnaYY, i64* %R1_Var
  %lnaYZ = load i64*, i64** %Sp_Var
  %lnaZ0 = getelementptr inbounds i64, i64* %lnaYZ, i32 7
  %lnaZ1 = ptrtoint i64* %lnaZ0 to i64
  %lnaZ2 = inttoptr i64 %lnaZ1 to i64*
  store i64* %lnaZ2, i64** %Sp_Var
  %lnaZ3 = load i64*, i64** %Sp_Var
  %lnaZ4 = getelementptr inbounds i64, i64* %lnaZ3, i32 0
  %lnaZ5 = bitcast i64* %lnaZ4 to i64*
  %lnaZ6 = load i64, i64* %lnaZ5, !tbaa !2
  %lnaZ7 = inttoptr i64 %lnaZ6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaZ8 = load i64*, i64** %Sp_Var
  %lnaZ9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaZ7( i64* %Base_Arg, i64* %lnaZ8, i64* %Hp_Arg, i64 %lnaZ9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8566898 UTC

@_caFs = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_caFs$def to i8*)
define internal ghccc void @_caFs$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
caFs:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaZa = ptrtoint i8* @base_GHCziArr_hopelessIndexError_closure to i64
  store i64 %lnaZa, i64* %R1_Var
  %lnaZc = load i64, i64* %R1_Var
  %lnaZd = inttoptr i64 %lnaZc to i64*
  %lnaZe = load i64, i64* %lnaZd, !tbaa !4
  %lnaZf = inttoptr i64 %lnaZe to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaZg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaZf( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaZg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8616781 UTC

@s9ap_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s9ap_info$def to i8*)
define internal ghccc void @s9ap_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s9ap_info$def to i64)),i64 32), i64 4294967301, i64 1, i64 12884901897}>
{
caGW:
  %ls974 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnaZh = load i64*, i64** %Sp_Var
  %lnaZi = getelementptr inbounds i64, i64* %lnaZh, i32 -5
  %lnaZj = ptrtoint i64* %lnaZi to i64
  %lnaZk = icmp ult i64 %lnaZj, %SpLim_Arg
  %lnaZl = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnaZk, i1 0 )
  br i1 %lnaZl, label %caH5, label %caH6
caH6:
  %lnaZn = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGT_info$def to i64
  %lnaZm = load i64*, i64** %Sp_Var
  %lnaZo = getelementptr inbounds i64, i64* %lnaZm, i32 -2
  store i64 %lnaZn, i64* %lnaZo, !tbaa !2
  %lnaZr = load i64, i64* %R1_Var
  %lnaZs = add i64 %lnaZr, 7
  %lnaZt = inttoptr i64 %lnaZs to i64*
  %lnaZu = load i64, i64* %lnaZt, !tbaa !4
  store i64 %lnaZu, i64* %ls974
  %lnaZv = load i64, i64* %R2_Var
  store i64 %lnaZv, i64* %R1_Var
  %lnaZx = load i64, i64* %ls974
  %lnaZw = load i64*, i64** %Sp_Var
  %lnaZy = getelementptr inbounds i64, i64* %lnaZw, i32 -1
  store i64 %lnaZx, i64* %lnaZy, !tbaa !2
  %lnaZz = load i64*, i64** %Sp_Var
  %lnaZA = getelementptr inbounds i64, i64* %lnaZz, i32 -2
  %lnaZB = ptrtoint i64* %lnaZA to i64
  %lnaZC = inttoptr i64 %lnaZB to i64*
  store i64* %lnaZC, i64** %Sp_Var
  %lnaZD = load i64, i64* %R1_Var
  %lnaZE = and i64 %lnaZD, 7
  %lnaZF = icmp ne i64 %lnaZE, 0
  br i1 %lnaZF, label %uaRC, label %caGU
caGU:
  %lnaZH = load i64, i64* %R1_Var
  %lnaZI = inttoptr i64 %lnaZH to i64*
  %lnaZJ = load i64, i64* %lnaZI, !tbaa !4
  %lnaZK = inttoptr i64 %lnaZJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaZL = load i64*, i64** %Sp_Var
  %lnaZM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaZK( i64* %Base_Arg, i64* %lnaZL, i64* %Hp_Arg, i64 %lnaZM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaRC:
  %lnaZN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaZO = load i64*, i64** %Sp_Var
  %lnaZP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaZN( i64* %Base_Arg, i64* %lnaZO, i64* %Hp_Arg, i64 %lnaZP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caH5:
  %lnaZQ = load i64, i64* %R2_Var
  store i64 %lnaZQ, i64* %R2_Var
  %lnaZR = load i64, i64* %R1_Var
  store i64 %lnaZR, i64* %R1_Var
  %lnaZS = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaZT = bitcast i64* %lnaZS to i64*
  %lnaZU = load i64, i64* %lnaZT, !tbaa !5
  %lnaZV = inttoptr i64 %lnaZU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaZW = load i64*, i64** %Sp_Var
  %lnaZX = load i64, i64* %R1_Var
  %lnaZY = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaZV( i64* %Base_Arg, i64* %lnaZW, i64* %Hp_Arg, i64 %lnaZX, i64 %lnaZY, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8676694 UTC

@caGT_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGT_info$def to i8*)
define internal ghccc void @caGT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGT_info$def to i64)),i64 32), i64 1, i64 12884901918}>
{
caGT:
  %ls97V = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb00 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGZ_info$def to i64
  %lnaZZ = load i64*, i64** %Sp_Var
  %lnb01 = getelementptr inbounds i64, i64* %lnaZZ, i32 -1
  store i64 %lnb00, i64* %lnb01, !tbaa !2
  %lnb04 = load i64, i64* %R1_Var
  %lnb05 = add i64 %lnb04, 7
  %lnb06 = inttoptr i64 %lnb05 to i64*
  %lnb07 = load i64, i64* %lnb06, !tbaa !4
  store i64 %lnb07, i64* %ls97V
  %lnb0a = load i64, i64* %R1_Var
  %lnb0b = add i64 %lnb0a, 15
  %lnb0c = inttoptr i64 %lnb0b to i64*
  %lnb0d = load i64, i64* %lnb0c, !tbaa !4
  store i64 %lnb0d, i64* %R1_Var
  %lnb0f = load i64, i64* %ls97V
  %lnb0e = load i64*, i64** %Sp_Var
  %lnb0g = getelementptr inbounds i64, i64* %lnb0e, i32 0
  store i64 %lnb0f, i64* %lnb0g, !tbaa !2
  %lnb0h = load i64*, i64** %Sp_Var
  %lnb0i = getelementptr inbounds i64, i64* %lnb0h, i32 -1
  %lnb0j = ptrtoint i64* %lnb0i to i64
  %lnb0k = inttoptr i64 %lnb0j to i64*
  store i64* %lnb0k, i64** %Sp_Var
  %lnb0l = load i64, i64* %R1_Var
  %lnb0m = and i64 %lnb0l, 7
  %lnb0n = icmp ne i64 %lnb0m, 0
  br i1 %lnb0n, label %uaRB, label %caH0
caH0:
  %lnb0p = load i64, i64* %R1_Var
  %lnb0q = inttoptr i64 %lnb0p to i64*
  %lnb0r = load i64, i64* %lnb0q, !tbaa !4
  %lnb0s = inttoptr i64 %lnb0r to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb0t = load i64*, i64** %Sp_Var
  %lnb0u = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb0s( i64* %Base_Arg, i64* %lnb0t, i64* %Hp_Arg, i64 %lnb0u, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaRB:
  %lnb0v = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGZ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb0w = load i64*, i64** %Sp_Var
  %lnb0x = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb0v( i64* %Base_Arg, i64* %lnb0w, i64* %Hp_Arg, i64 %lnb0x, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8736612 UTC

@caGZ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGZ_info$def to i8*)
define internal ghccc void @caGZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caGZ_info$def to i64)),i64 32), i64 2, i64 12884901918}>
{
caGZ:
  %ls97Y = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnb0y = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caH4_info$def to i64
  %lnb0z = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb0y, i64* %lnb0z, !tbaa !2
  %lnb0C = load i64, i64* %R1_Var
  %lnb0D = add i64 %lnb0C, 7
  %lnb0E = inttoptr i64 %lnb0D to i64*
  %lnb0F = load i64, i64* %lnb0E, !tbaa !4
  store i64 %lnb0F, i64* %ls97Y
  %lnb0G = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnb0H = bitcast i64* %lnb0G to i64*
  %lnb0I = load i64, i64* %lnb0H, !tbaa !2
  store i64 %lnb0I, i64* %R1_Var
  %lnb0J = load i64, i64* %ls97Y
  %lnb0K = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %lnb0J, i64* %lnb0K, !tbaa !2
  %lnb0L = load i64, i64* %R1_Var
  %lnb0M = and i64 %lnb0L, 7
  %lnb0N = icmp ne i64 %lnb0M, 0
  br i1 %lnb0N, label %uaRD, label %caH9
caH9:
  %lnb0P = load i64, i64* %R1_Var
  %lnb0Q = inttoptr i64 %lnb0P to i64*
  %lnb0R = load i64, i64* %lnb0Q, !tbaa !4
  %lnb0S = inttoptr i64 %lnb0R to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb0T = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb0S( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb0T, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaRD:
  %lnb0U = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caH4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb0V = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb0U( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb0V, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8796531 UTC

@caH4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caH4_info$def to i8*)
define internal ghccc void @caH4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caH4_info$def to i64)),i64 32), i64 66, i64 12884901918}>
{
caH4:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %ls980 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb0X = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caHs_info$def to i64
  %lnb0W = load i64*, i64** %Sp_Var
  %lnb0Y = getelementptr inbounds i64, i64* %lnb0W, i32 -1
  store i64 %lnb0X, i64* %lnb0Y, !tbaa !2
  %lnb0Z = load i64*, i64** %Sp_Var
  %lnb10 = getelementptr inbounds i64, i64* %lnb0Z, i32 1
  %lnb11 = bitcast i64* %lnb10 to i64*
  %lnb12 = load i64, i64* %lnb11, !tbaa !2
  %lnb13 = add i64 %lnb12, -1
  %lnb14 = trunc i64 %lnb13 to i8
  %lnb15 = sext i8 %lnb14 to i64
  store i64 %lnb15, i64* %R3_Var
  %lnb18 = load i64, i64* %R1_Var
  %lnb19 = add i64 %lnb18, 7
  %lnb1a = inttoptr i64 %lnb19 to i64*
  %lnb1b = load i64, i64* %lnb1a, !tbaa !4
  store i64 %lnb1b, i64* %ls980
  %lnb1c = load i64, i64* %ls980
  %lnb1d = add i64 %lnb1c, -1
  %lnb1e = trunc i64 %lnb1d to i8
  %lnb1f = sext i8 %lnb1e to i64
  store i64 %lnb1f, i64* %R2_Var
  %lnb1g = load i64*, i64** %Sp_Var
  %lnb1h = getelementptr inbounds i64, i64* %lnb1g, i32 2
  %lnb1i = bitcast i64* %lnb1h to i64*
  %lnb1j = load i64, i64* %lnb1i, !tbaa !2
  store i64 %lnb1j, i64* %R1_Var
  %lnb1l = load i64, i64* %ls980
  %lnb1k = load i64*, i64** %Sp_Var
  %lnb1m = getelementptr inbounds i64, i64* %lnb1k, i32 0
  store i64 %lnb1l, i64* %lnb1m, !tbaa !2
  %lnb1n = load i64*, i64** %Sp_Var
  %lnb1o = getelementptr inbounds i64, i64* %lnb1n, i32 -1
  %lnb1p = ptrtoint i64* %lnb1o to i64
  %lnb1q = inttoptr i64 %lnb1p to i64*
  store i64* %lnb1q, i64** %Sp_Var
  %lnb1r = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb1s = load i64*, i64** %Sp_Var
  %lnb1t = load i64, i64* %R1_Var
  %lnb1u = load i64, i64* %R2_Var
  %lnb1v = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb1r( i64* %Base_Arg, i64* %lnb1s, i64* %Hp_Arg, i64 %lnb1t, i64 %lnb1u, i64 %lnb1v, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8856405 UTC

@caHs_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caHs_info$def to i8*)
define internal ghccc void @caHs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caHs_info$def to i64)),i64 32), i64 195, i64 12884901918}>
{
caHs:
  %ls974 = alloca i64, i32 1
  %ls97Y = alloca i64, i32 1
  %ls980 = alloca i64, i32 1
  %ls982 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb1w = load i64*, i64** %Sp_Var
  %lnb1x = getelementptr inbounds i64, i64* %lnb1w, i32 3
  %lnb1y = bitcast i64* %lnb1x to i64*
  %lnb1z = load i64, i64* %lnb1y, !tbaa !2
  store i64 %lnb1z, i64* %ls974
  %lnb1A = load i64*, i64** %Sp_Var
  %lnb1B = getelementptr inbounds i64, i64* %lnb1A, i32 2
  %lnb1C = bitcast i64* %lnb1B to i64*
  %lnb1D = load i64, i64* %lnb1C, !tbaa !2
  store i64 %lnb1D, i64* %ls97Y
  %lnb1E = load i64*, i64** %Sp_Var
  %lnb1F = getelementptr inbounds i64, i64* %lnb1E, i32 1
  %lnb1G = bitcast i64* %lnb1F to i64*
  %lnb1H = load i64, i64* %lnb1G, !tbaa !2
  store i64 %lnb1H, i64* %ls980
  %lnb1I = load i64, i64* %R1_Var
  %lnb1J = and i64 %lnb1I, 7
  switch i64 %lnb1J, label %caPk [i64 1, label %caPk
                                  i64 2, label %caPo]
caPk:
  store i64 0, i64* %ls982
  br label %s981
s981:
  %lnb1L = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caHF_info$def to i64
  %lnb1K = load i64*, i64** %Sp_Var
  %lnb1M = getelementptr inbounds i64, i64* %lnb1K, i32 -1
  store i64 %lnb1L, i64* %lnb1M, !tbaa !2
  %lnb1N = load i64, i64* %ls97Y
  store i64 %lnb1N, i64* %R3_Var
  %lnb1O = load i64, i64* %ls980
  %lnb1P = add i64 %lnb1O, -1
  %lnb1Q = trunc i64 %lnb1P to i8
  %lnb1R = sext i8 %lnb1Q to i64
  store i64 %lnb1R, i64* %R2_Var
  %lnb1S = load i64, i64* %ls974
  store i64 %lnb1S, i64* %R1_Var
  %lnb1U = load i64, i64* %ls982
  %lnb1T = load i64*, i64** %Sp_Var
  %lnb1V = getelementptr inbounds i64, i64* %lnb1T, i32 0
  store i64 %lnb1U, i64* %lnb1V, !tbaa !2
  %lnb1W = load i64*, i64** %Sp_Var
  %lnb1X = getelementptr inbounds i64, i64* %lnb1W, i32 -1
  %lnb1Y = ptrtoint i64* %lnb1X to i64
  %lnb1Z = inttoptr i64 %lnb1Y to i64*
  store i64* %lnb1Z, i64** %Sp_Var
  %lnb20 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb21 = load i64*, i64** %Sp_Var
  %lnb22 = load i64, i64* %R1_Var
  %lnb23 = load i64, i64* %R2_Var
  %lnb24 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb20( i64* %Base_Arg, i64* %lnb21, i64* %Hp_Arg, i64 %lnb22, i64 %lnb23, i64 %lnb24, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caPo:
  store i64 1, i64* %ls982
  br label %s981
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8916343 UTC

@caHF_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caHF_info$def to i8*)
define internal ghccc void @caHF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caHF_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caHF:
  %ls974 = alloca i64, i32 1
  %ls97Y = alloca i64, i32 1
  %ls980 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnb25 = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnb26 = bitcast i64* %lnb25 to i64*
  %lnb27 = load i64, i64* %lnb26, !tbaa !2
  store i64 %lnb27, i64* %ls974
  %lnb28 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb29 = bitcast i64* %lnb28 to i64*
  %lnb2a = load i64, i64* %lnb29, !tbaa !2
  store i64 %lnb2a, i64* %ls97Y
  %lnb2b = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb2c = bitcast i64* %lnb2b to i64*
  %lnb2d = load i64, i64* %lnb2c, !tbaa !2
  store i64 %lnb2d, i64* %ls980
  %lnb2e = load i64, i64* %R1_Var
  %lnb2f = and i64 %lnb2e, 7
  switch i64 %lnb2f, label %caNx [i64 1, label %caNx
                                  i64 2, label %caOw]
caNx:
  %lnb2g = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNv_info$def to i64
  %lnb2h = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb2g, i64* %lnb2h, !tbaa !2
  %lnb2i = load i64, i64* %ls97Y
  %lnb2j = add i64 %lnb2i, 1
  %lnb2k = trunc i64 %lnb2j to i8
  %lnb2l = sext i8 %lnb2k to i64
  store i64 %lnb2l, i64* %R3_Var
  %lnb2m = load i64, i64* %ls980
  %lnb2n = add i64 %lnb2m, -1
  %lnb2o = trunc i64 %lnb2n to i8
  %lnb2p = sext i8 %lnb2o to i64
  store i64 %lnb2p, i64* %R2_Var
  %lnb2q = load i64, i64* %ls974
  store i64 %lnb2q, i64* %R1_Var
  %lnb2r = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb2s = load i64, i64* %R1_Var
  %lnb2t = load i64, i64* %R2_Var
  %lnb2u = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb2r( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb2s, i64 %lnb2t, i64 %lnb2u, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caOw:
  %lnb2v = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOv_info$def to i64
  %lnb2w = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb2v, i64* %lnb2w, !tbaa !2
  %lnb2x = load i64, i64* %ls97Y
  %lnb2y = add i64 %lnb2x, 1
  %lnb2z = trunc i64 %lnb2y to i8
  %lnb2A = sext i8 %lnb2z to i64
  store i64 %lnb2A, i64* %R3_Var
  %lnb2B = load i64, i64* %ls980
  %lnb2C = add i64 %lnb2B, -1
  %lnb2D = trunc i64 %lnb2C to i8
  %lnb2E = sext i8 %lnb2D to i64
  store i64 %lnb2E, i64* %R2_Var
  %lnb2F = load i64, i64* %ls974
  store i64 %lnb2F, i64* %R1_Var
  %lnb2G = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb2H = load i64, i64* %R1_Var
  %lnb2I = load i64, i64* %R2_Var
  %lnb2J = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb2G( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb2H, i64 %lnb2I, i64 %lnb2J, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.8986214 UTC

@caOv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOv_info$def to i8*)
define internal ghccc void @caOv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOv_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caOv:
  %ls974 = alloca i64, i32 1
  %ls97Y = alloca i64, i32 1
  %ls980 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnb2K = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnb2L = bitcast i64* %lnb2K to i64*
  %lnb2M = load i64, i64* %lnb2L, !tbaa !2
  store i64 %lnb2M, i64* %ls974
  %lnb2N = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb2O = bitcast i64* %lnb2N to i64*
  %lnb2P = load i64, i64* %lnb2O, !tbaa !2
  store i64 %lnb2P, i64* %ls97Y
  %lnb2Q = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb2R = bitcast i64* %lnb2Q to i64*
  %lnb2S = load i64, i64* %lnb2R, !tbaa !2
  store i64 %lnb2S, i64* %ls980
  %lnb2T = load i64, i64* %R1_Var
  %lnb2U = and i64 %lnb2T, 7
  switch i64 %lnb2U, label %caOJ [i64 1, label %caOJ
                                  i64 2, label %caP4]
caOJ:
  %lnb2V = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOH_info$def to i64
  %lnb2W = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb2V, i64* %lnb2W, !tbaa !2
  %lnb2X = load i64, i64* %ls97Y
  %lnb2Y = add i64 %lnb2X, -1
  %lnb2Z = trunc i64 %lnb2Y to i8
  %lnb30 = sext i8 %lnb2Z to i64
  store i64 %lnb30, i64* %R3_Var
  %lnb31 = load i64, i64* %ls980
  store i64 %lnb31, i64* %R2_Var
  %lnb32 = load i64, i64* %ls974
  store i64 %lnb32, i64* %R1_Var
  %lnb33 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb34 = load i64, i64* %R1_Var
  %lnb35 = load i64, i64* %R2_Var
  %lnb36 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb33( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb34, i64 %lnb35, i64 %lnb36, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caP4:
  %lnb37 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caP3_info$def to i64
  %lnb38 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb37, i64* %lnb38, !tbaa !2
  %lnb39 = load i64, i64* %ls97Y
  %lnb3a = add i64 %lnb39, -1
  %lnb3b = trunc i64 %lnb3a to i8
  %lnb3c = sext i8 %lnb3b to i64
  store i64 %lnb3c, i64* %R3_Var
  %lnb3d = load i64, i64* %ls980
  store i64 %lnb3d, i64* %R2_Var
  %lnb3e = load i64, i64* %ls974
  store i64 %lnb3e, i64* %R1_Var
  %lnb3f = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3g = load i64, i64* %R1_Var
  %lnb3h = load i64, i64* %R2_Var
  %lnb3i = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3f( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb3g, i64 %lnb3h, i64 %lnb3i, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.9056123 UTC

@caP3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caP3_info$def to i8*)
define internal ghccc void @caP3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caP3_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caP3:
  %ls982 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb3j = load i64*, i64** %Sp_Var
  %lnb3k = getelementptr inbounds i64, i64* %lnb3j, i32 1
  %lnb3l = bitcast i64* %lnb3k to i64*
  %lnb3m = load i64, i64* %lnb3l, !tbaa !2
  store i64 %lnb3m, i64* %ls982
  %lnb3n = and i64 %R1_Arg, 7
  switch i64 %lnb3n, label %caPa [i64 1, label %caPa
                                  i64 2, label %caPe]
caPa:
  %lnb3p = load i64, i64* %ls982
  %lnb3q = add i64 %lnb3p, 2
  %lnb3o = load i64*, i64** %Sp_Var
  %lnb3r = getelementptr inbounds i64, i64* %lnb3o, i32 1
  store i64 %lnb3q, i64* %lnb3r, !tbaa !2
  %lnb3s = load i64*, i64** %Sp_Var
  %lnb3t = getelementptr inbounds i64, i64* %lnb3s, i32 1
  %lnb3u = ptrtoint i64* %lnb3t to i64
  %lnb3v = inttoptr i64 %lnb3u to i64*
  store i64* %lnb3v, i64** %Sp_Var
  br label %uaS1
uaS1:
  %lnb3w = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s983$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3x = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3w( i64* %Base_Arg, i64* %lnb3x, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caPe:
  %lnb3z = load i64, i64* %ls982
  %lnb3A = add i64 %lnb3z, 3
  %lnb3y = load i64*, i64** %Sp_Var
  %lnb3B = getelementptr inbounds i64, i64* %lnb3y, i32 1
  store i64 %lnb3A, i64* %lnb3B, !tbaa !2
  %lnb3C = load i64*, i64** %Sp_Var
  %lnb3D = getelementptr inbounds i64, i64* %lnb3C, i32 1
  %lnb3E = ptrtoint i64* %lnb3D to i64
  %lnb3F = inttoptr i64 %lnb3E to i64*
  store i64* %lnb3F, i64** %Sp_Var
  br label %uaS1
}


==================== LLVM Code ====================
2018-12-28 09:14:26.915598 UTC

@caOH_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOH_info$def to i8*)
define internal ghccc void @caOH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caOH_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caOH:
  %ls982 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb3G = load i64*, i64** %Sp_Var
  %lnb3H = getelementptr inbounds i64, i64* %lnb3G, i32 1
  %lnb3I = bitcast i64* %lnb3H to i64*
  %lnb3J = load i64, i64* %lnb3I, !tbaa !2
  store i64 %lnb3J, i64* %ls982
  %lnb3K = and i64 %R1_Arg, 7
  switch i64 %lnb3K, label %caOP [i64 1, label %caOP
                                  i64 2, label %caOT]
caOP:
  %lnb3M = load i64, i64* %ls982
  %lnb3N = add i64 %lnb3M, 1
  %lnb3L = load i64*, i64** %Sp_Var
  %lnb3O = getelementptr inbounds i64, i64* %lnb3L, i32 1
  store i64 %lnb3N, i64* %lnb3O, !tbaa !2
  %lnb3P = load i64*, i64** %Sp_Var
  %lnb3Q = getelementptr inbounds i64, i64* %lnb3P, i32 1
  %lnb3R = ptrtoint i64* %lnb3Q to i64
  %lnb3S = inttoptr i64 %lnb3R to i64*
  store i64* %lnb3S, i64** %Sp_Var
  br label %uaRZ
uaRZ:
  %lnb3T = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s983$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3U = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3T( i64* %Base_Arg, i64* %lnb3U, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caOT:
  %lnb3W = load i64, i64* %ls982
  %lnb3X = add i64 %lnb3W, 2
  %lnb3V = load i64*, i64** %Sp_Var
  %lnb3Y = getelementptr inbounds i64, i64* %lnb3V, i32 1
  store i64 %lnb3X, i64* %lnb3Y, !tbaa !2
  %lnb3Z = load i64*, i64** %Sp_Var
  %lnb40 = getelementptr inbounds i64, i64* %lnb3Z, i32 1
  %lnb41 = ptrtoint i64* %lnb40 to i64
  %lnb42 = inttoptr i64 %lnb41 to i64*
  store i64* %lnb42, i64** %Sp_Var
  br label %uaRZ
}


==================== LLVM Code ====================
2018-12-28 09:14:26.9215873 UTC

@caNv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNv_info$def to i8*)
define internal ghccc void @caNv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNv_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caNv:
  %ls974 = alloca i64, i32 1
  %ls97Y = alloca i64, i32 1
  %ls980 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnb43 = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnb44 = bitcast i64* %lnb43 to i64*
  %lnb45 = load i64, i64* %lnb44, !tbaa !2
  store i64 %lnb45, i64* %ls974
  %lnb46 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb47 = bitcast i64* %lnb46 to i64*
  %lnb48 = load i64, i64* %lnb47, !tbaa !2
  store i64 %lnb48, i64* %ls97Y
  %lnb49 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb4a = bitcast i64* %lnb49 to i64*
  %lnb4b = load i64, i64* %lnb4a, !tbaa !2
  store i64 %lnb4b, i64* %ls980
  %lnb4c = load i64, i64* %R1_Var
  %lnb4d = and i64 %lnb4c, 7
  switch i64 %lnb4d, label %caNK [i64 1, label %caNK
                                  i64 2, label %caO5]
caNK:
  %lnb4e = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNI_info$def to i64
  %lnb4f = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb4e, i64* %lnb4f, !tbaa !2
  %lnb4g = load i64, i64* %ls97Y
  %lnb4h = add i64 %lnb4g, -1
  %lnb4i = trunc i64 %lnb4h to i8
  %lnb4j = sext i8 %lnb4i to i64
  store i64 %lnb4j, i64* %R3_Var
  %lnb4k = load i64, i64* %ls980
  store i64 %lnb4k, i64* %R2_Var
  %lnb4l = load i64, i64* %ls974
  store i64 %lnb4l, i64* %R1_Var
  %lnb4m = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb4n = load i64, i64* %R1_Var
  %lnb4o = load i64, i64* %R2_Var
  %lnb4p = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb4m( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb4n, i64 %lnb4o, i64 %lnb4p, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caO5:
  %lnb4q = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caO4_info$def to i64
  %lnb4r = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb4q, i64* %lnb4r, !tbaa !2
  %lnb4s = load i64, i64* %ls97Y
  %lnb4t = add i64 %lnb4s, -1
  %lnb4u = trunc i64 %lnb4t to i8
  %lnb4v = sext i8 %lnb4u to i64
  store i64 %lnb4v, i64* %R3_Var
  %lnb4w = load i64, i64* %ls980
  store i64 %lnb4w, i64* %R2_Var
  %lnb4x = load i64, i64* %ls974
  store i64 %lnb4x, i64* %R1_Var
  %lnb4y = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb4z = load i64, i64* %R1_Var
  %lnb4A = load i64, i64* %R2_Var
  %lnb4B = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb4y( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb4z, i64 %lnb4A, i64 %lnb4B, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.9285737 UTC

@caO4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caO4_info$def to i8*)
define internal ghccc void @caO4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caO4_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caO4:
  %ls982 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb4C = load i64*, i64** %Sp_Var
  %lnb4D = getelementptr inbounds i64, i64* %lnb4C, i32 1
  %lnb4E = bitcast i64* %lnb4D to i64*
  %lnb4F = load i64, i64* %lnb4E, !tbaa !2
  store i64 %lnb4F, i64* %ls982
  %lnb4G = and i64 %R1_Arg, 7
  switch i64 %lnb4G, label %caOb [i64 1, label %caOb
                                  i64 2, label %caOf]
caOb:
  %lnb4I = load i64, i64* %ls982
  %lnb4J = add i64 %lnb4I, 1
  %lnb4H = load i64*, i64** %Sp_Var
  %lnb4K = getelementptr inbounds i64, i64* %lnb4H, i32 1
  store i64 %lnb4J, i64* %lnb4K, !tbaa !2
  %lnb4L = load i64*, i64** %Sp_Var
  %lnb4M = getelementptr inbounds i64, i64* %lnb4L, i32 1
  %lnb4N = ptrtoint i64* %lnb4M to i64
  %lnb4O = inttoptr i64 %lnb4N to i64*
  store i64* %lnb4O, i64** %Sp_Var
  br label %uaRX
uaRX:
  %lnb4P = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s983$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb4Q = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb4P( i64* %Base_Arg, i64* %lnb4Q, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caOf:
  %lnb4S = load i64, i64* %ls982
  %lnb4T = add i64 %lnb4S, 2
  %lnb4R = load i64*, i64** %Sp_Var
  %lnb4U = getelementptr inbounds i64, i64* %lnb4R, i32 1
  store i64 %lnb4T, i64* %lnb4U, !tbaa !2
  %lnb4V = load i64*, i64** %Sp_Var
  %lnb4W = getelementptr inbounds i64, i64* %lnb4V, i32 1
  %lnb4X = ptrtoint i64* %lnb4W to i64
  %lnb4Y = inttoptr i64 %lnb4X to i64*
  store i64* %lnb4Y, i64** %Sp_Var
  br label %uaRX
}


==================== LLVM Code ====================
2018-12-28 09:14:26.9345675 UTC

@caNI_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNI_info$def to i8*)
define internal ghccc void @caNI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNI_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caNI:
  %ls982 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb4Z = load i64*, i64** %Sp_Var
  %lnb50 = getelementptr inbounds i64, i64* %lnb4Z, i32 1
  %lnb51 = bitcast i64* %lnb50 to i64*
  %lnb52 = load i64, i64* %lnb51, !tbaa !2
  store i64 %lnb52, i64* %ls982
  %lnb53 = and i64 %R1_Arg, 7
  switch i64 %lnb53, label %caNQ [i64 1, label %caNQ
                                  i64 2, label %caNU]
caNQ:
  %lnb55 = load i64, i64* %ls982
  %lnb54 = load i64*, i64** %Sp_Var
  %lnb56 = getelementptr inbounds i64, i64* %lnb54, i32 1
  store i64 %lnb55, i64* %lnb56, !tbaa !2
  %lnb57 = load i64*, i64** %Sp_Var
  %lnb58 = getelementptr inbounds i64, i64* %lnb57, i32 1
  %lnb59 = ptrtoint i64* %lnb58 to i64
  %lnb5a = inttoptr i64 %lnb59 to i64*
  store i64* %lnb5a, i64** %Sp_Var
  br label %uaRV
uaRV:
  %lnb5b = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s983$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb5c = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb5b( i64* %Base_Arg, i64* %lnb5c, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caNU:
  %lnb5e = load i64, i64* %ls982
  %lnb5f = add i64 %lnb5e, 1
  %lnb5d = load i64*, i64** %Sp_Var
  %lnb5g = getelementptr inbounds i64, i64* %lnb5d, i32 1
  store i64 %lnb5f, i64* %lnb5g, !tbaa !2
  %lnb5h = load i64*, i64** %Sp_Var
  %lnb5i = getelementptr inbounds i64, i64* %lnb5h, i32 1
  %lnb5j = ptrtoint i64* %lnb5i to i64
  %lnb5k = inttoptr i64 %lnb5j to i64*
  store i64* %lnb5k, i64** %Sp_Var
  br label %uaRV
}


==================== LLVM Code ====================
2018-12-28 09:14:26.9405613 UTC

@_s983 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s983$def to i8*)
define internal ghccc void @_s983$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
s983:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb5m = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caHS_info$def to i64
  %lnb5l = load i64*, i64** %Sp_Var
  %lnb5n = getelementptr inbounds i64, i64* %lnb5l, i32 -1
  store i64 %lnb5m, i64* %lnb5n, !tbaa !2
  %lnb5o = load i64*, i64** %Sp_Var
  %lnb5p = getelementptr inbounds i64, i64* %lnb5o, i32 2
  %lnb5q = bitcast i64* %lnb5p to i64*
  %lnb5r = load i64, i64* %lnb5q, !tbaa !2
  %lnb5s = add i64 %lnb5r, 1
  %lnb5t = trunc i64 %lnb5s to i8
  %lnb5u = sext i8 %lnb5t to i64
  store i64 %lnb5u, i64* %R3_Var
  %lnb5v = load i64*, i64** %Sp_Var
  %lnb5w = getelementptr inbounds i64, i64* %lnb5v, i32 1
  %lnb5x = bitcast i64* %lnb5w to i64*
  %lnb5y = load i64, i64* %lnb5x, !tbaa !2
  store i64 %lnb5y, i64* %R2_Var
  %lnb5z = load i64*, i64** %Sp_Var
  %lnb5A = getelementptr inbounds i64, i64* %lnb5z, i32 3
  %lnb5B = bitcast i64* %lnb5A to i64*
  %lnb5C = load i64, i64* %lnb5B, !tbaa !2
  store i64 %lnb5C, i64* %R1_Var
  %lnb5D = load i64*, i64** %Sp_Var
  %lnb5E = getelementptr inbounds i64, i64* %lnb5D, i32 -1
  %lnb5F = ptrtoint i64* %lnb5E to i64
  %lnb5G = inttoptr i64 %lnb5F to i64*
  store i64* %lnb5G, i64** %Sp_Var
  %lnb5H = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb5I = load i64*, i64** %Sp_Var
  %lnb5J = load i64, i64* %R1_Var
  %lnb5K = load i64, i64* %R2_Var
  %lnb5L = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb5H( i64* %Base_Arg, i64* %lnb5I, i64* %Hp_Arg, i64 %lnb5J, i64 %lnb5K, i64 %lnb5L, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.951546 UTC

@caHS_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caHS_info$def to i8*)
define internal ghccc void @caHS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caHS_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caHS:
  %ls974 = alloca i64, i32 1
  %ls97Y = alloca i64, i32 1
  %ls980 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnb5M = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnb5N = bitcast i64* %lnb5M to i64*
  %lnb5O = load i64, i64* %lnb5N, !tbaa !2
  store i64 %lnb5O, i64* %ls974
  %lnb5P = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb5Q = bitcast i64* %lnb5P to i64*
  %lnb5R = load i64, i64* %lnb5Q, !tbaa !2
  store i64 %lnb5R, i64* %ls97Y
  %lnb5S = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb5T = bitcast i64* %lnb5S to i64*
  %lnb5U = load i64, i64* %lnb5T, !tbaa !2
  store i64 %lnb5U, i64* %ls980
  %lnb5V = load i64, i64* %R1_Var
  %lnb5W = and i64 %lnb5V, 7
  switch i64 %lnb5W, label %caIz [i64 1, label %caIz
                                  i64 2, label %caL2]
caIz:
  %lnb5X = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caIx_info$def to i64
  %lnb5Y = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb5X, i64* %lnb5Y, !tbaa !2
  %lnb5Z = load i64, i64* %ls97Y
  %lnb60 = add i64 %lnb5Z, -1
  %lnb61 = trunc i64 %lnb60 to i8
  %lnb62 = sext i8 %lnb61 to i64
  store i64 %lnb62, i64* %R3_Var
  %lnb63 = load i64, i64* %ls980
  %lnb64 = add i64 %lnb63, 1
  %lnb65 = trunc i64 %lnb64 to i8
  %lnb66 = sext i8 %lnb65 to i64
  store i64 %lnb66, i64* %R2_Var
  %lnb67 = load i64, i64* %ls974
  store i64 %lnb67, i64* %R1_Var
  %lnb68 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb69 = load i64, i64* %R1_Var
  %lnb6a = load i64, i64* %R2_Var
  %lnb6b = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb68( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb69, i64 %lnb6a, i64 %lnb6b, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caL2:
  %lnb6c = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caL1_info$def to i64
  %lnb6d = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb6c, i64* %lnb6d, !tbaa !2
  %lnb6e = load i64, i64* %ls97Y
  %lnb6f = add i64 %lnb6e, -1
  %lnb6g = trunc i64 %lnb6f to i8
  %lnb6h = sext i8 %lnb6g to i64
  store i64 %lnb6h, i64* %R3_Var
  %lnb6i = load i64, i64* %ls980
  %lnb6j = add i64 %lnb6i, 1
  %lnb6k = trunc i64 %lnb6j to i8
  %lnb6l = sext i8 %lnb6k to i64
  store i64 %lnb6l, i64* %R2_Var
  %lnb6m = load i64, i64* %ls974
  store i64 %lnb6m, i64* %R1_Var
  %lnb6n = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb6o = load i64, i64* %R1_Var
  %lnb6p = load i64, i64* %R2_Var
  %lnb6q = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb6n( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb6o, i64 %lnb6p, i64 %lnb6q, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.9585286 UTC

@caL1_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caL1_info$def to i8*)
define internal ghccc void @caL1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caL1_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caL1:
  %ls974 = alloca i64, i32 1
  %ls97Y = alloca i64, i32 1
  %ls980 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnb6r = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnb6s = bitcast i64* %lnb6r to i64*
  %lnb6t = load i64, i64* %lnb6s, !tbaa !2
  store i64 %lnb6t, i64* %ls974
  %lnb6u = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb6v = bitcast i64* %lnb6u to i64*
  %lnb6w = load i64, i64* %lnb6v, !tbaa !2
  store i64 %lnb6w, i64* %ls97Y
  %lnb6x = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb6y = bitcast i64* %lnb6x to i64*
  %lnb6z = load i64, i64* %lnb6y, !tbaa !2
  store i64 %lnb6z, i64* %ls980
  %lnb6A = load i64, i64* %R1_Var
  %lnb6B = and i64 %lnb6A, 7
  switch i64 %lnb6B, label %caLf [i64 1, label %caLf
                                  i64 2, label %caMk]
caLf:
  %lnb6C = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLd_info$def to i64
  %lnb6D = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb6C, i64* %lnb6D, !tbaa !2
  %lnb6E = load i64, i64* %ls97Y
  store i64 %lnb6E, i64* %R3_Var
  %lnb6F = load i64, i64* %ls980
  %lnb6G = add i64 %lnb6F, 1
  %lnb6H = trunc i64 %lnb6G to i8
  %lnb6I = sext i8 %lnb6H to i64
  store i64 %lnb6I, i64* %R2_Var
  %lnb6J = load i64, i64* %ls974
  store i64 %lnb6J, i64* %R1_Var
  %lnb6K = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb6L = load i64, i64* %R1_Var
  %lnb6M = load i64, i64* %R2_Var
  %lnb6N = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb6K( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb6L, i64 %lnb6M, i64 %lnb6N, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caMk:
  %lnb6O = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMj_info$def to i64
  %lnb6P = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb6O, i64* %lnb6P, !tbaa !2
  %lnb6Q = load i64, i64* %ls97Y
  store i64 %lnb6Q, i64* %R3_Var
  %lnb6R = load i64, i64* %ls980
  %lnb6S = add i64 %lnb6R, 1
  %lnb6T = trunc i64 %lnb6S to i8
  %lnb6U = sext i8 %lnb6T to i64
  store i64 %lnb6U, i64* %R2_Var
  %lnb6V = load i64, i64* %ls974
  store i64 %lnb6V, i64* %R1_Var
  %lnb6W = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb6X = load i64, i64* %R1_Var
  %lnb6Y = load i64, i64* %R2_Var
  %lnb6Z = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb6W( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb6X, i64 %lnb6Y, i64 %lnb6Z, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.9665187 UTC

@caMj_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMj_info$def to i8*)
define internal ghccc void @caMj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMj_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caMj:
  %ls974 = alloca i64, i32 1
  %ls97Y = alloca i64, i32 1
  %ls980 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnb70 = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnb71 = bitcast i64* %lnb70 to i64*
  %lnb72 = load i64, i64* %lnb71, !tbaa !2
  store i64 %lnb72, i64* %ls974
  %lnb73 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb74 = bitcast i64* %lnb73 to i64*
  %lnb75 = load i64, i64* %lnb74, !tbaa !2
  store i64 %lnb75, i64* %ls97Y
  %lnb76 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb77 = bitcast i64* %lnb76 to i64*
  %lnb78 = load i64, i64* %lnb77, !tbaa !2
  store i64 %lnb78, i64* %ls980
  %lnb79 = load i64, i64* %R1_Var
  %lnb7a = and i64 %lnb79, 7
  switch i64 %lnb7a, label %caMD [i64 1, label %caMD
                                  i64 2, label %caN4]
caMD:
  %lnb7b = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMB_info$def to i64
  %lnb7c = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb7b, i64* %lnb7c, !tbaa !2
  %lnb7d = load i64, i64* %ls97Y
  %lnb7e = add i64 %lnb7d, 1
  %lnb7f = trunc i64 %lnb7e to i8
  %lnb7g = sext i8 %lnb7f to i64
  store i64 %lnb7g, i64* %R3_Var
  %lnb7h = load i64, i64* %ls980
  %lnb7i = add i64 %lnb7h, 1
  %lnb7j = trunc i64 %lnb7i to i8
  %lnb7k = sext i8 %lnb7j to i64
  store i64 %lnb7k, i64* %R2_Var
  %lnb7l = load i64, i64* %ls974
  store i64 %lnb7l, i64* %R1_Var
  %lnb7m = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb7n = load i64, i64* %R1_Var
  %lnb7o = load i64, i64* %R2_Var
  %lnb7p = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb7m( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb7n, i64 %lnb7o, i64 %lnb7p, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caN4:
  %lnb7q = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caN3_info$def to i64
  %lnb7r = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb7q, i64* %lnb7r, !tbaa !2
  %lnb7s = load i64, i64* %ls97Y
  %lnb7t = add i64 %lnb7s, 1
  %lnb7u = trunc i64 %lnb7t to i8
  %lnb7v = sext i8 %lnb7u to i64
  store i64 %lnb7v, i64* %R3_Var
  %lnb7w = load i64, i64* %ls980
  %lnb7x = add i64 %lnb7w, 1
  %lnb7y = trunc i64 %lnb7x to i8
  %lnb7z = sext i8 %lnb7y to i64
  store i64 %lnb7z, i64* %R2_Var
  %lnb7A = load i64, i64* %ls974
  store i64 %lnb7A, i64* %R1_Var
  %lnb7B = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb7C = load i64, i64* %R1_Var
  %lnb7D = load i64, i64* %R2_Var
  %lnb7E = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb7B( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb7C, i64 %lnb7D, i64 %lnb7E, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.9725105 UTC

@caN3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caN3_info$def to i8*)
define internal ghccc void @caN3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caN3_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caN3:
  %ls984 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb7F = load i64*, i64** %Sp_Var
  %lnb7G = getelementptr inbounds i64, i64* %lnb7F, i32 1
  %lnb7H = bitcast i64* %lnb7G to i64*
  %lnb7I = load i64, i64* %lnb7H, !tbaa !2
  store i64 %lnb7I, i64* %ls984
  %lnb7J = and i64 %R1_Arg, 7
  switch i64 %lnb7J, label %caNa [i64 1, label %caNa
                                  i64 2, label %caNe]
caNa:
  %lnb7L = load i64, i64* %ls984
  %lnb7M = add i64 %lnb7L, 3
  %lnb7K = load i64*, i64** %Sp_Var
  %lnb7N = getelementptr inbounds i64, i64* %lnb7K, i32 1
  store i64 %lnb7M, i64* %lnb7N, !tbaa !2
  %lnb7O = load i64*, i64** %Sp_Var
  %lnb7P = getelementptr inbounds i64, i64* %lnb7O, i32 1
  %lnb7Q = ptrtoint i64* %lnb7P to i64
  %lnb7R = inttoptr i64 %lnb7Q to i64*
  store i64* %lnb7R, i64** %Sp_Var
  br label %uaRT
uaRT:
  %lnb7S = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s985$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb7T = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb7S( i64* %Base_Arg, i64* %lnb7T, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caNe:
  %lnb7V = load i64, i64* %ls984
  %lnb7W = add i64 %lnb7V, 4
  %lnb7U = load i64*, i64** %Sp_Var
  %lnb7X = getelementptr inbounds i64, i64* %lnb7U, i32 1
  store i64 %lnb7W, i64* %lnb7X, !tbaa !2
  %lnb7Y = load i64*, i64** %Sp_Var
  %lnb7Z = getelementptr inbounds i64, i64* %lnb7Y, i32 1
  %lnb80 = ptrtoint i64* %lnb7Z to i64
  %lnb81 = inttoptr i64 %lnb80 to i64*
  store i64* %lnb81, i64** %Sp_Var
  br label %uaRT
}


==================== LLVM Code ====================
2018-12-28 09:14:26.9774995 UTC

@caMB_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMB_info$def to i8*)
define internal ghccc void @caMB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caMB_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caMB:
  %ls984 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb82 = load i64*, i64** %Sp_Var
  %lnb83 = getelementptr inbounds i64, i64* %lnb82, i32 1
  %lnb84 = bitcast i64* %lnb83 to i64*
  %lnb85 = load i64, i64* %lnb84, !tbaa !2
  store i64 %lnb85, i64* %ls984
  %lnb86 = and i64 %R1_Arg, 7
  switch i64 %lnb86, label %caMJ [i64 1, label %caMJ
                                  i64 2, label %caMN]
caMJ:
  %lnb88 = load i64, i64* %ls984
  %lnb89 = add i64 %lnb88, 2
  %lnb87 = load i64*, i64** %Sp_Var
  %lnb8a = getelementptr inbounds i64, i64* %lnb87, i32 1
  store i64 %lnb89, i64* %lnb8a, !tbaa !2
  %lnb8b = load i64*, i64** %Sp_Var
  %lnb8c = getelementptr inbounds i64, i64* %lnb8b, i32 1
  %lnb8d = ptrtoint i64* %lnb8c to i64
  %lnb8e = inttoptr i64 %lnb8d to i64*
  store i64* %lnb8e, i64** %Sp_Var
  br label %uaRR
uaRR:
  %lnb8f = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s985$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb8g = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb8f( i64* %Base_Arg, i64* %lnb8g, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caMN:
  %lnb8i = load i64, i64* %ls984
  %lnb8j = add i64 %lnb8i, 3
  %lnb8h = load i64*, i64** %Sp_Var
  %lnb8k = getelementptr inbounds i64, i64* %lnb8h, i32 1
  store i64 %lnb8j, i64* %lnb8k, !tbaa !2
  %lnb8l = load i64*, i64** %Sp_Var
  %lnb8m = getelementptr inbounds i64, i64* %lnb8l, i32 1
  %lnb8n = ptrtoint i64* %lnb8m to i64
  %lnb8o = inttoptr i64 %lnb8n to i64*
  store i64* %lnb8o, i64** %Sp_Var
  br label %uaRR
}


==================== LLVM Code ====================
2018-12-28 09:14:26.9834869 UTC

@caLd_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLd_info$def to i8*)
define internal ghccc void @caLd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLd_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caLd:
  %ls974 = alloca i64, i32 1
  %ls97Y = alloca i64, i32 1
  %ls980 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnb8p = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnb8q = bitcast i64* %lnb8p to i64*
  %lnb8r = load i64, i64* %lnb8q, !tbaa !2
  store i64 %lnb8r, i64* %ls974
  %lnb8s = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb8t = bitcast i64* %lnb8s to i64*
  %lnb8u = load i64, i64* %lnb8t, !tbaa !2
  store i64 %lnb8u, i64* %ls97Y
  %lnb8v = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb8w = bitcast i64* %lnb8v to i64*
  %lnb8x = load i64, i64* %lnb8w, !tbaa !2
  store i64 %lnb8x, i64* %ls980
  %lnb8y = load i64, i64* %R1_Var
  %lnb8z = and i64 %lnb8y, 7
  switch i64 %lnb8z, label %caLy [i64 1, label %caLy
                                  i64 2, label %caLZ]
caLy:
  %lnb8A = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLw_info$def to i64
  %lnb8B = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb8A, i64* %lnb8B, !tbaa !2
  %lnb8C = load i64, i64* %ls97Y
  %lnb8D = add i64 %lnb8C, 1
  %lnb8E = trunc i64 %lnb8D to i8
  %lnb8F = sext i8 %lnb8E to i64
  store i64 %lnb8F, i64* %R3_Var
  %lnb8G = load i64, i64* %ls980
  %lnb8H = add i64 %lnb8G, 1
  %lnb8I = trunc i64 %lnb8H to i8
  %lnb8J = sext i8 %lnb8I to i64
  store i64 %lnb8J, i64* %R2_Var
  %lnb8K = load i64, i64* %ls974
  store i64 %lnb8K, i64* %R1_Var
  %lnb8L = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb8M = load i64, i64* %R1_Var
  %lnb8N = load i64, i64* %R2_Var
  %lnb8O = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb8L( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb8M, i64 %lnb8N, i64 %lnb8O, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caLZ:
  %lnb8P = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLY_info$def to i64
  %lnb8Q = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb8P, i64* %lnb8Q, !tbaa !2
  %lnb8R = load i64, i64* %ls97Y
  %lnb8S = add i64 %lnb8R, 1
  %lnb8T = trunc i64 %lnb8S to i8
  %lnb8U = sext i8 %lnb8T to i64
  store i64 %lnb8U, i64* %R3_Var
  %lnb8V = load i64, i64* %ls980
  %lnb8W = add i64 %lnb8V, 1
  %lnb8X = trunc i64 %lnb8W to i8
  %lnb8Y = sext i8 %lnb8X to i64
  store i64 %lnb8Y, i64* %R2_Var
  %lnb8Z = load i64, i64* %ls974
  store i64 %lnb8Z, i64* %R1_Var
  %lnb90 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb91 = load i64, i64* %R1_Var
  %lnb92 = load i64, i64* %R2_Var
  %lnb93 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb90( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb91, i64 %lnb92, i64 %lnb93, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:26.988481 UTC

@caLY_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLY_info$def to i8*)
define internal ghccc void @caLY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLY_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caLY:
  %ls984 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb94 = load i64*, i64** %Sp_Var
  %lnb95 = getelementptr inbounds i64, i64* %lnb94, i32 1
  %lnb96 = bitcast i64* %lnb95 to i64*
  %lnb97 = load i64, i64* %lnb96, !tbaa !2
  store i64 %lnb97, i64* %ls984
  %lnb98 = and i64 %R1_Arg, 7
  switch i64 %lnb98, label %caM5 [i64 1, label %caM5
                                  i64 2, label %caM9]
caM5:
  %lnb9a = load i64, i64* %ls984
  %lnb9b = add i64 %lnb9a, 2
  %lnb99 = load i64*, i64** %Sp_Var
  %lnb9c = getelementptr inbounds i64, i64* %lnb99, i32 1
  store i64 %lnb9b, i64* %lnb9c, !tbaa !2
  %lnb9d = load i64*, i64** %Sp_Var
  %lnb9e = getelementptr inbounds i64, i64* %lnb9d, i32 1
  %lnb9f = ptrtoint i64* %lnb9e to i64
  %lnb9g = inttoptr i64 %lnb9f to i64*
  store i64* %lnb9g, i64** %Sp_Var
  br label %uaRP
uaRP:
  %lnb9h = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s985$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb9i = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb9h( i64* %Base_Arg, i64* %lnb9i, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caM9:
  %lnb9k = load i64, i64* %ls984
  %lnb9l = add i64 %lnb9k, 3
  %lnb9j = load i64*, i64** %Sp_Var
  %lnb9m = getelementptr inbounds i64, i64* %lnb9j, i32 1
  store i64 %lnb9l, i64* %lnb9m, !tbaa !2
  %lnb9n = load i64*, i64** %Sp_Var
  %lnb9o = getelementptr inbounds i64, i64* %lnb9n, i32 1
  %lnb9p = ptrtoint i64* %lnb9o to i64
  %lnb9q = inttoptr i64 %lnb9p to i64*
  store i64* %lnb9q, i64** %Sp_Var
  br label %uaRP
}


==================== LLVM Code ====================
2018-12-28 09:14:26.9934725 UTC

@caLw_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLw_info$def to i8*)
define internal ghccc void @caLw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caLw_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caLw:
  %ls984 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb9r = load i64*, i64** %Sp_Var
  %lnb9s = getelementptr inbounds i64, i64* %lnb9r, i32 1
  %lnb9t = bitcast i64* %lnb9s to i64*
  %lnb9u = load i64, i64* %lnb9t, !tbaa !2
  store i64 %lnb9u, i64* %ls984
  %lnb9v = and i64 %R1_Arg, 7
  switch i64 %lnb9v, label %caLE [i64 1, label %caLE
                                  i64 2, label %caLI]
caLE:
  %lnb9x = load i64, i64* %ls984
  %lnb9y = add i64 %lnb9x, 1
  %lnb9w = load i64*, i64** %Sp_Var
  %lnb9z = getelementptr inbounds i64, i64* %lnb9w, i32 1
  store i64 %lnb9y, i64* %lnb9z, !tbaa !2
  %lnb9A = load i64*, i64** %Sp_Var
  %lnb9B = getelementptr inbounds i64, i64* %lnb9A, i32 1
  %lnb9C = ptrtoint i64* %lnb9B to i64
  %lnb9D = inttoptr i64 %lnb9C to i64*
  store i64* %lnb9D, i64** %Sp_Var
  br label %uaRN
uaRN:
  %lnb9E = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s985$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb9F = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb9E( i64* %Base_Arg, i64* %lnb9F, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caLI:
  %lnb9H = load i64, i64* %ls984
  %lnb9I = add i64 %lnb9H, 2
  %lnb9G = load i64*, i64** %Sp_Var
  %lnb9J = getelementptr inbounds i64, i64* %lnb9G, i32 1
  store i64 %lnb9I, i64* %lnb9J, !tbaa !2
  %lnb9K = load i64*, i64** %Sp_Var
  %lnb9L = getelementptr inbounds i64, i64* %lnb9K, i32 1
  %lnb9M = ptrtoint i64* %lnb9L to i64
  %lnb9N = inttoptr i64 %lnb9M to i64*
  store i64* %lnb9N, i64** %Sp_Var
  br label %uaRN
}


==================== LLVM Code ====================
2018-12-28 09:14:26.9984634 UTC

@caIx_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caIx_info$def to i8*)
define internal ghccc void @caIx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caIx_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caIx:
  %ls974 = alloca i64, i32 1
  %ls97Y = alloca i64, i32 1
  %ls980 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnb9O = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnb9P = bitcast i64* %lnb9O to i64*
  %lnb9Q = load i64, i64* %lnb9P, !tbaa !2
  store i64 %lnb9Q, i64* %ls974
  %lnb9R = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb9S = bitcast i64* %lnb9R to i64*
  %lnb9T = load i64, i64* %lnb9S, !tbaa !2
  store i64 %lnb9T, i64* %ls97Y
  %lnb9U = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb9V = bitcast i64* %lnb9U to i64*
  %lnb9W = load i64, i64* %lnb9V, !tbaa !2
  store i64 %lnb9W, i64* %ls980
  %lnb9X = load i64, i64* %R1_Var
  %lnb9Y = and i64 %lnb9X, 7
  switch i64 %lnb9Y, label %caIM [i64 1, label %caIM
                                  i64 2, label %caJR]
caIM:
  %lnb9Z = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caIK_info$def to i64
  %lnba0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb9Z, i64* %lnba0, !tbaa !2
  %lnba1 = load i64, i64* %ls97Y
  store i64 %lnba1, i64* %R3_Var
  %lnba2 = load i64, i64* %ls980
  %lnba3 = add i64 %lnba2, 1
  %lnba4 = trunc i64 %lnba3 to i8
  %lnba5 = sext i8 %lnba4 to i64
  store i64 %lnba5, i64* %R2_Var
  %lnba6 = load i64, i64* %ls974
  store i64 %lnba6, i64* %R1_Var
  %lnba7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnba8 = load i64, i64* %R1_Var
  %lnba9 = load i64, i64* %R2_Var
  %lnbaa = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnba7( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnba8, i64 %lnba9, i64 %lnbaa, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caJR:
  %lnbab = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJQ_info$def to i64
  %lnbac = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbab, i64* %lnbac, !tbaa !2
  %lnbad = load i64, i64* %ls97Y
  store i64 %lnbad, i64* %R3_Var
  %lnbae = load i64, i64* %ls980
  %lnbaf = add i64 %lnbae, 1
  %lnbag = trunc i64 %lnbaf to i8
  %lnbah = sext i8 %lnbag to i64
  store i64 %lnbah, i64* %R2_Var
  %lnbai = load i64, i64* %ls974
  store i64 %lnbai, i64* %R1_Var
  %lnbaj = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbak = load i64, i64* %R1_Var
  %lnbal = load i64, i64* %R2_Var
  %lnbam = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbaj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbak, i64 %lnbal, i64 %lnbam, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0044578 UTC

@caJQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJQ_info$def to i8*)
define internal ghccc void @caJQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJQ_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caJQ:
  %ls974 = alloca i64, i32 1
  %ls97Y = alloca i64, i32 1
  %ls980 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnban = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnbao = bitcast i64* %lnban to i64*
  %lnbap = load i64, i64* %lnbao, !tbaa !2
  store i64 %lnbap, i64* %ls974
  %lnbaq = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnbar = bitcast i64* %lnbaq to i64*
  %lnbas = load i64, i64* %lnbar, !tbaa !2
  store i64 %lnbas, i64* %ls97Y
  %lnbat = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnbau = bitcast i64* %lnbat to i64*
  %lnbav = load i64, i64* %lnbau, !tbaa !2
  store i64 %lnbav, i64* %ls980
  %lnbaw = load i64, i64* %R1_Var
  %lnbax = and i64 %lnbaw, 7
  switch i64 %lnbax, label %caKa [i64 1, label %caKa
                                  i64 2, label %caKB]
caKa:
  %lnbay = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caK8_info$def to i64
  %lnbaz = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbay, i64* %lnbaz, !tbaa !2
  %lnbaA = load i64, i64* %ls97Y
  %lnbaB = add i64 %lnbaA, 1
  %lnbaC = trunc i64 %lnbaB to i8
  %lnbaD = sext i8 %lnbaC to i64
  store i64 %lnbaD, i64* %R3_Var
  %lnbaE = load i64, i64* %ls980
  %lnbaF = add i64 %lnbaE, 1
  %lnbaG = trunc i64 %lnbaF to i8
  %lnbaH = sext i8 %lnbaG to i64
  store i64 %lnbaH, i64* %R2_Var
  %lnbaI = load i64, i64* %ls974
  store i64 %lnbaI, i64* %R1_Var
  %lnbaJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbaK = load i64, i64* %R1_Var
  %lnbaL = load i64, i64* %R2_Var
  %lnbaM = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbaJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbaK, i64 %lnbaL, i64 %lnbaM, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caKB:
  %lnbaN = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKA_info$def to i64
  %lnbaO = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbaN, i64* %lnbaO, !tbaa !2
  %lnbaP = load i64, i64* %ls97Y
  %lnbaQ = add i64 %lnbaP, 1
  %lnbaR = trunc i64 %lnbaQ to i8
  %lnbaS = sext i8 %lnbaR to i64
  store i64 %lnbaS, i64* %R3_Var
  %lnbaT = load i64, i64* %ls980
  %lnbaU = add i64 %lnbaT, 1
  %lnbaV = trunc i64 %lnbaU to i8
  %lnbaW = sext i8 %lnbaV to i64
  store i64 %lnbaW, i64* %R2_Var
  %lnbaX = load i64, i64* %ls974
  store i64 %lnbaX, i64* %R1_Var
  %lnbaY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbaZ = load i64, i64* %R1_Var
  %lnbb0 = load i64, i64* %R2_Var
  %lnbb1 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbaY( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbaZ, i64 %lnbb0, i64 %lnbb1, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0104459 UTC

@caKA_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKA_info$def to i8*)
define internal ghccc void @caKA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caKA_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caKA:
  %ls984 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbb2 = load i64*, i64** %Sp_Var
  %lnbb3 = getelementptr inbounds i64, i64* %lnbb2, i32 1
  %lnbb4 = bitcast i64* %lnbb3 to i64*
  %lnbb5 = load i64, i64* %lnbb4, !tbaa !2
  store i64 %lnbb5, i64* %ls984
  %lnbb6 = and i64 %R1_Arg, 7
  switch i64 %lnbb6, label %caKH [i64 1, label %caKH
                                  i64 2, label %caKL]
caKH:
  %lnbb8 = load i64, i64* %ls984
  %lnbb9 = add i64 %lnbb8, 2
  %lnbb7 = load i64*, i64** %Sp_Var
  %lnbba = getelementptr inbounds i64, i64* %lnbb7, i32 1
  store i64 %lnbb9, i64* %lnbba, !tbaa !2
  %lnbbb = load i64*, i64** %Sp_Var
  %lnbbc = getelementptr inbounds i64, i64* %lnbbb, i32 1
  %lnbbd = ptrtoint i64* %lnbbc to i64
  %lnbbe = inttoptr i64 %lnbbd to i64*
  store i64* %lnbbe, i64** %Sp_Var
  br label %uaRL
uaRL:
  %lnbbf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s985$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbbg = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbbf( i64* %Base_Arg, i64* %lnbbg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caKL:
  %lnbbi = load i64, i64* %ls984
  %lnbbj = add i64 %lnbbi, 3
  %lnbbh = load i64*, i64** %Sp_Var
  %lnbbk = getelementptr inbounds i64, i64* %lnbbh, i32 1
  store i64 %lnbbj, i64* %lnbbk, !tbaa !2
  %lnbbl = load i64*, i64** %Sp_Var
  %lnbbm = getelementptr inbounds i64, i64* %lnbbl, i32 1
  %lnbbn = ptrtoint i64* %lnbbm to i64
  %lnbbo = inttoptr i64 %lnbbn to i64*
  store i64* %lnbbo, i64** %Sp_Var
  br label %uaRL
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0154406 UTC

@caK8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caK8_info$def to i8*)
define internal ghccc void @caK8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caK8_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caK8:
  %ls984 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbbp = load i64*, i64** %Sp_Var
  %lnbbq = getelementptr inbounds i64, i64* %lnbbp, i32 1
  %lnbbr = bitcast i64* %lnbbq to i64*
  %lnbbs = load i64, i64* %lnbbr, !tbaa !2
  store i64 %lnbbs, i64* %ls984
  %lnbbt = and i64 %R1_Arg, 7
  switch i64 %lnbbt, label %caKg [i64 1, label %caKg
                                  i64 2, label %caKk]
caKg:
  %lnbbv = load i64, i64* %ls984
  %lnbbw = add i64 %lnbbv, 1
  %lnbbu = load i64*, i64** %Sp_Var
  %lnbbx = getelementptr inbounds i64, i64* %lnbbu, i32 1
  store i64 %lnbbw, i64* %lnbbx, !tbaa !2
  %lnbby = load i64*, i64** %Sp_Var
  %lnbbz = getelementptr inbounds i64, i64* %lnbby, i32 1
  %lnbbA = ptrtoint i64* %lnbbz to i64
  %lnbbB = inttoptr i64 %lnbbA to i64*
  store i64* %lnbbB, i64** %Sp_Var
  br label %uaRJ
uaRJ:
  %lnbbC = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s985$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbbD = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbbC( i64* %Base_Arg, i64* %lnbbD, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caKk:
  %lnbbF = load i64, i64* %ls984
  %lnbbG = add i64 %lnbbF, 2
  %lnbbE = load i64*, i64** %Sp_Var
  %lnbbH = getelementptr inbounds i64, i64* %lnbbE, i32 1
  store i64 %lnbbG, i64* %lnbbH, !tbaa !2
  %lnbbI = load i64*, i64** %Sp_Var
  %lnbbJ = getelementptr inbounds i64, i64* %lnbbI, i32 1
  %lnbbK = ptrtoint i64* %lnbbJ to i64
  %lnbbL = inttoptr i64 %lnbbK to i64*
  store i64* %lnbbL, i64** %Sp_Var
  br label %uaRJ
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0204321 UTC

@caIK_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caIK_info$def to i8*)
define internal ghccc void @caIK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caIK_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caIK:
  %ls974 = alloca i64, i32 1
  %ls97Y = alloca i64, i32 1
  %ls980 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbbM = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnbbN = bitcast i64* %lnbbM to i64*
  %lnbbO = load i64, i64* %lnbbN, !tbaa !2
  store i64 %lnbbO, i64* %ls974
  %lnbbP = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnbbQ = bitcast i64* %lnbbP to i64*
  %lnbbR = load i64, i64* %lnbbQ, !tbaa !2
  store i64 %lnbbR, i64* %ls97Y
  %lnbbS = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnbbT = bitcast i64* %lnbbS to i64*
  %lnbbU = load i64, i64* %lnbbT, !tbaa !2
  store i64 %lnbbU, i64* %ls980
  %lnbbV = load i64, i64* %R1_Var
  %lnbbW = and i64 %lnbbV, 7
  switch i64 %lnbbW, label %caJ5 [i64 1, label %caJ5
                                  i64 2, label %caJw]
caJ5:
  %lnbbX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJ3_info$def to i64
  %lnbbY = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbbX, i64* %lnbbY, !tbaa !2
  %lnbbZ = load i64, i64* %ls97Y
  %lnbc0 = add i64 %lnbbZ, 1
  %lnbc1 = trunc i64 %lnbc0 to i8
  %lnbc2 = sext i8 %lnbc1 to i64
  store i64 %lnbc2, i64* %R3_Var
  %lnbc3 = load i64, i64* %ls980
  %lnbc4 = add i64 %lnbc3, 1
  %lnbc5 = trunc i64 %lnbc4 to i8
  %lnbc6 = sext i8 %lnbc5 to i64
  store i64 %lnbc6, i64* %R2_Var
  %lnbc7 = load i64, i64* %ls974
  store i64 %lnbc7, i64* %R1_Var
  %lnbc8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbc9 = load i64, i64* %R1_Var
  %lnbca = load i64, i64* %R2_Var
  %lnbcb = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbc8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbc9, i64 %lnbca, i64 %lnbcb, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caJw:
  %lnbcc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJv_info$def to i64
  %lnbcd = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbcc, i64* %lnbcd, !tbaa !2
  %lnbce = load i64, i64* %ls97Y
  %lnbcf = add i64 %lnbce, 1
  %lnbcg = trunc i64 %lnbcf to i8
  %lnbch = sext i8 %lnbcg to i64
  store i64 %lnbch, i64* %R3_Var
  %lnbci = load i64, i64* %ls980
  %lnbcj = add i64 %lnbci, 1
  %lnbck = trunc i64 %lnbcj to i8
  %lnbcl = sext i8 %lnbck to i64
  store i64 %lnbcl, i64* %R2_Var
  %lnbcm = load i64, i64* %ls974
  store i64 %lnbcm, i64* %R1_Var
  %lnbcn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbco = load i64, i64* %R1_Var
  %lnbcp = load i64, i64* %R2_Var
  %lnbcq = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbcn( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbco, i64 %lnbcp, i64 %lnbcq, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0264214 UTC

@caJv_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJv_info$def to i8*)
define internal ghccc void @caJv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJv_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caJv:
  %ls984 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbcr = load i64*, i64** %Sp_Var
  %lnbcs = getelementptr inbounds i64, i64* %lnbcr, i32 1
  %lnbct = bitcast i64* %lnbcs to i64*
  %lnbcu = load i64, i64* %lnbct, !tbaa !2
  store i64 %lnbcu, i64* %ls984
  %lnbcv = and i64 %R1_Arg, 7
  switch i64 %lnbcv, label %caJC [i64 1, label %caJC
                                  i64 2, label %caJG]
caJC:
  %lnbcx = load i64, i64* %ls984
  %lnbcy = add i64 %lnbcx, 1
  %lnbcw = load i64*, i64** %Sp_Var
  %lnbcz = getelementptr inbounds i64, i64* %lnbcw, i32 1
  store i64 %lnbcy, i64* %lnbcz, !tbaa !2
  %lnbcA = load i64*, i64** %Sp_Var
  %lnbcB = getelementptr inbounds i64, i64* %lnbcA, i32 1
  %lnbcC = ptrtoint i64* %lnbcB to i64
  %lnbcD = inttoptr i64 %lnbcC to i64*
  store i64* %lnbcD, i64** %Sp_Var
  br label %uaRH
uaRH:
  %lnbcE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s985$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbcF = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbcE( i64* %Base_Arg, i64* %lnbcF, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caJG:
  %lnbcH = load i64, i64* %ls984
  %lnbcI = add i64 %lnbcH, 2
  %lnbcG = load i64*, i64** %Sp_Var
  %lnbcJ = getelementptr inbounds i64, i64* %lnbcG, i32 1
  store i64 %lnbcI, i64* %lnbcJ, !tbaa !2
  %lnbcK = load i64*, i64** %Sp_Var
  %lnbcL = getelementptr inbounds i64, i64* %lnbcK, i32 1
  %lnbcM = ptrtoint i64* %lnbcL to i64
  %lnbcN = inttoptr i64 %lnbcM to i64*
  store i64* %lnbcN, i64** %Sp_Var
  br label %uaRH
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0314117 UTC

@caJ3_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJ3_info$def to i8*)
define internal ghccc void @caJ3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caJ3_info$def to i64)),i64 32), i64 452, i64 12884901918}>
{
caJ3:
  %ls984 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbcO = load i64*, i64** %Sp_Var
  %lnbcP = getelementptr inbounds i64, i64* %lnbcO, i32 1
  %lnbcQ = bitcast i64* %lnbcP to i64*
  %lnbcR = load i64, i64* %lnbcQ, !tbaa !2
  store i64 %lnbcR, i64* %ls984
  %lnbcS = and i64 %R1_Arg, 7
  switch i64 %lnbcS, label %caJb [i64 1, label %caJb
                                  i64 2, label %caJf]
caJb:
  %lnbcU = load i64, i64* %ls984
  %lnbcT = load i64*, i64** %Sp_Var
  %lnbcV = getelementptr inbounds i64, i64* %lnbcT, i32 1
  store i64 %lnbcU, i64* %lnbcV, !tbaa !2
  %lnbcW = load i64*, i64** %Sp_Var
  %lnbcX = getelementptr inbounds i64, i64* %lnbcW, i32 1
  %lnbcY = ptrtoint i64* %lnbcX to i64
  %lnbcZ = inttoptr i64 %lnbcY to i64*
  store i64* %lnbcZ, i64** %Sp_Var
  br label %uaRF
uaRF:
  %lnbd0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s985$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbd1 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbd0( i64* %Base_Arg, i64* %lnbd1, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caJf:
  %lnbd3 = load i64, i64* %ls984
  %lnbd4 = add i64 %lnbd3, 1
  %lnbd2 = load i64*, i64** %Sp_Var
  %lnbd5 = getelementptr inbounds i64, i64* %lnbd2, i32 1
  store i64 %lnbd4, i64* %lnbd5, !tbaa !2
  %lnbd6 = load i64*, i64** %Sp_Var
  %lnbd7 = getelementptr inbounds i64, i64* %lnbd6, i32 1
  %lnbd8 = ptrtoint i64* %lnbd7 to i64
  %lnbd9 = inttoptr i64 %lnbd8 to i64*
  store i64* %lnbd9, i64** %Sp_Var
  br label %uaRF
}


==================== LLVM Code ====================
2018-12-28 09:14:27.035406 UTC

@_s985 = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s985$def to i8*)
define internal ghccc void @_s985$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
s985:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbdb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caHW_info$def to i64
  %lnbda = load i64*, i64** %Sp_Var
  %lnbdc = getelementptr inbounds i64, i64* %lnbda, i32 -1
  store i64 %lnbdb, i64* %lnbdc, !tbaa !2
  %lnbdd = load i64*, i64** %Sp_Var
  %lnbde = getelementptr inbounds i64, i64* %lnbdd, i32 2
  %lnbdf = bitcast i64* %lnbde to i64*
  %lnbdg = load i64, i64* %lnbdf, !tbaa !2
  store i64 %lnbdg, i64* %R3_Var
  %lnbdh = load i64*, i64** %Sp_Var
  %lnbdi = getelementptr inbounds i64, i64* %lnbdh, i32 1
  %lnbdj = bitcast i64* %lnbdi to i64*
  %lnbdk = load i64, i64* %lnbdj, !tbaa !2
  store i64 %lnbdk, i64* %R2_Var
  %lnbdl = load i64*, i64** %Sp_Var
  %lnbdm = getelementptr inbounds i64, i64* %lnbdl, i32 3
  %lnbdn = bitcast i64* %lnbdm to i64*
  %lnbdo = load i64, i64* %lnbdn, !tbaa !2
  store i64 %lnbdo, i64* %R1_Var
  %lnbdp = load i64*, i64** %Sp_Var
  %lnbdq = getelementptr inbounds i64, i64* %lnbdp, i32 -1
  %lnbdr = ptrtoint i64* %lnbdq to i64
  %lnbds = inttoptr i64 %lnbdr to i64*
  store i64* %lnbds, i64** %Sp_Var
  %lnbdt = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbdu = load i64*, i64** %Sp_Var
  %lnbdv = load i64, i64* %R1_Var
  %lnbdw = load i64, i64* %R2_Var
  %lnbdx = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbdt( i64* %Base_Arg, i64* %lnbdu, i64* %Hp_Arg, i64 %lnbdv, i64 %lnbdw, i64 %lnbdx, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0403982 UTC

@caHW_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caHW_info$def to i8*)
define internal ghccc void @caHW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 964, i64 30}>
{
caHW:
  %ls986 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbdy = load i64*, i64** %Sp_Var
  %lnbdz = getelementptr inbounds i64, i64* %lnbdy, i32 1
  %lnbdA = bitcast i64* %lnbdz to i64*
  %lnbdB = load i64, i64* %lnbdA, !tbaa !2
  store i64 %lnbdB, i64* %ls986
  %lnbdC = load i64, i64* %R1_Var
  %lnbdD = and i64 %lnbdC, 7
  switch i64 %lnbdD, label %caI7 [i64 1, label %caI7
                                  i64 2, label %caIg]
caI7:
  %lnbdE = load i64, i64* %ls986
  switch i64 %lnbdE, label %caId [i64 3, label %caIf]
caId:
  %lnbdF = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %lnbdG = add i64 %lnbdF, 1
  store i64 %lnbdG, i64* %R1_Var
  %lnbdH = load i64*, i64** %Sp_Var
  %lnbdI = getelementptr inbounds i64, i64* %lnbdH, i32 5
  %lnbdJ = ptrtoint i64* %lnbdI to i64
  %lnbdK = inttoptr i64 %lnbdJ to i64*
  store i64* %lnbdK, i64** %Sp_Var
  %lnbdL = load i64*, i64** %Sp_Var
  %lnbdM = getelementptr inbounds i64, i64* %lnbdL, i32 0
  %lnbdN = bitcast i64* %lnbdM to i64*
  %lnbdO = load i64, i64* %lnbdN, !tbaa !2
  %lnbdP = inttoptr i64 %lnbdO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbdQ = load i64*, i64** %Sp_Var
  %lnbdR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbdP( i64* %Base_Arg, i64* %lnbdQ, i64* %Hp_Arg, i64 %lnbdR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caIf:
  %lnbdS = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %lnbdT = add i64 %lnbdS, 2
  store i64 %lnbdT, i64* %R1_Var
  %lnbdU = load i64*, i64** %Sp_Var
  %lnbdV = getelementptr inbounds i64, i64* %lnbdU, i32 5
  %lnbdW = ptrtoint i64* %lnbdV to i64
  %lnbdX = inttoptr i64 %lnbdW to i64*
  store i64* %lnbdX, i64** %Sp_Var
  %lnbdY = load i64*, i64** %Sp_Var
  %lnbdZ = getelementptr inbounds i64, i64* %lnbdY, i32 0
  %lnbe0 = bitcast i64* %lnbdZ to i64*
  %lnbe1 = load i64, i64* %lnbe0, !tbaa !2
  %lnbe2 = inttoptr i64 %lnbe1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbe3 = load i64*, i64** %Sp_Var
  %lnbe4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbe2( i64* %Base_Arg, i64* %lnbe3, i64* %Hp_Arg, i64 %lnbe4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caIg:
  %lnbe5 = load i64, i64* %ls986
  switch i64 %lnbe5, label %caId [i64 2, label %caIf
                                  i64 3, label %caIf]
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0463913 UTC

@Main_updateGameState_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_updateGameState_info$def to i8*)
define ghccc void @Main_updateGameState_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_updateGameState_info$def to i64)),i64 32), i64 4294967301, i64 0, i64 9908489551886}>
{
caS2:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbe6 = load i64*, i64** %Hp_Var
  %lnbe7 = getelementptr inbounds i64, i64* %lnbe6, i32 4
  %lnbe8 = ptrtoint i64* %lnbe7 to i64
  %lnbe9 = inttoptr i64 %lnbe8 to i64*
  store i64* %lnbe9, i64** %Hp_Var
  %lnbea = load i64*, i64** %Hp_Var
  %lnbeb = ptrtoint i64* %lnbea to i64
  %lnbec = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbed = bitcast i64* %lnbec to i64*
  %lnbee = load i64, i64* %lnbed, !tbaa !5
  %lnbef = icmp ugt i64 %lnbeb, %lnbee
  %lnbeg = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbef, i1 0 )
  br i1 %lnbeg, label %caS6, label %caS5
caS5:
  %lnbei = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s974_info$def to i64
  %lnbeh = load i64*, i64** %Hp_Var
  %lnbej = getelementptr inbounds i64, i64* %lnbeh, i32 -3
  store i64 %lnbei, i64* %lnbej, !tbaa !3
  %lnbel = load i64, i64* %R2_Var
  %lnbek = load i64*, i64** %Hp_Var
  %lnbem = getelementptr inbounds i64, i64* %lnbek, i32 -2
  store i64 %lnbel, i64* %lnbem, !tbaa !3
  %lnbeo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s9ap_info$def to i64
  %lnben = load i64*, i64** %Hp_Var
  %lnbep = getelementptr inbounds i64, i64* %lnben, i32 -1
  store i64 %lnbeo, i64* %lnbep, !tbaa !3
  %lnbes = load i64*, i64** %Hp_Var
  %lnbet = ptrtoint i64* %lnbes to i64
  %lnbeu = add i64 %lnbet, -22
  %lnbeq = load i64*, i64** %Hp_Var
  %lnbev = getelementptr inbounds i64, i64* %lnbeq, i32 0
  store i64 %lnbeu, i64* %lnbev, !tbaa !3
  %lnbex = load i64*, i64** %Hp_Var
  %lnbey = ptrtoint i64* %lnbex to i64
  %lnbez = add i64 %lnbey, -7
  store i64 %lnbez, i64* %R6_Var
  %lnbeA = ptrtoint %Main_xWidth_closure_struct* @Main_xWidth_closure$def to i64
  %lnbeB = add i64 %lnbeA, 1
  store i64 %lnbeB, i64* %R5_Var
  store i64 15, i64* %R4_Var
  %lnbeC = ptrtoint %Main_fieldSizze4_closure_struct* @Main_fieldSizze4_closure$def to i64
  %lnbeD = add i64 %lnbeC, 1
  store i64 %lnbeD, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %lnbeE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwzdsarrayByIndex_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbeF = load i64*, i64** %Hp_Var
  %lnbeG = load i64, i64* %R1_Var
  %lnbeH = load i64, i64* %R2_Var
  %lnbeI = load i64, i64* %R3_Var
  %lnbeJ = load i64, i64* %R4_Var
  %lnbeK = load i64, i64* %R5_Var
  %lnbeL = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbeE( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnbeF, i64 %lnbeG, i64 %lnbeH, i64 %lnbeI, i64 %lnbeJ, i64 %lnbeK, i64 %lnbeL, i64 %SpLim_Arg ) nounwind
  ret void
caS6:
  %lnbeM = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lnbeM, !tbaa !5
  %lnbeN = load i64, i64* %R2_Var
  store i64 %lnbeN, i64* %R2_Var
  %lnbeO = ptrtoint %Main_updateGameState_closure_struct* @Main_updateGameState_closure$def to i64
  store i64 %lnbeO, i64* %R1_Var
  %lnbeP = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbeQ = bitcast i64* %lnbeP to i64*
  %lnbeR = load i64, i64* %lnbeQ, !tbaa !5
  %lnbeS = inttoptr i64 %lnbeR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbeT = load i64*, i64** %Hp_Var
  %lnbeU = load i64, i64* %R1_Var
  %lnbeV = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbeS( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnbeT, i64 %lnbeU, i64 %lnbeV, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0533778 UTC

%Main_zdwloop_closure_struct = type <{i64, i64}>
@Main_zdwloop_closure$def = internal global %Main_zdwloop_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to i64), i64 0}>
@Main_zdwloop_closure = alias i8, bitcast (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:27.0563731 UTC

@s9au_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s9au_info$def to i8*)
define internal ghccc void @s9au_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s9au_info$def to i64)),i64 56), i64 1, i64 4294967312}>
{
cbfc:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbfD = add i64 %R1_Arg, 16
  %lnbfE = inttoptr i64 %lnbfD to i64*
  %lnbfF = load i64, i64* %lnbfE, !tbaa !4
  store i64 %lnbfF, i64* %R2_Var
  %lnbfG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_viewGameState_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbfH = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbfG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbfH, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0613646 UTC

@s9ay_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s9ay_info$def to i8*)
define internal ghccc void @s9ay_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s9ay_info$def to i64)),i64 120), i64 1, i64 4294967312}>
{
cbfi:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbfI = load i64*, i64** %Sp_Var
  %lnbfJ = getelementptr inbounds i64, i64* %lnbfI, i32 -2
  %lnbfK = ptrtoint i64* %lnbfJ to i64
  %lnbfL = icmp ult i64 %lnbfK, %SpLim_Arg
  %lnbfM = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbfL, i1 0 )
  br i1 %lnbfM, label %cbfj, label %cbfk
cbfk:
  %lnbfO = ptrtoint i8* @stg_upd_frame_info to i64
  %lnbfN = load i64*, i64** %Sp_Var
  %lnbfP = getelementptr inbounds i64, i64* %lnbfN, i32 -2
  store i64 %lnbfO, i64* %lnbfP, !tbaa !2
  %lnbfR = load i64, i64* %R1_Var
  %lnbfQ = load i64*, i64** %Sp_Var
  %lnbfS = getelementptr inbounds i64, i64* %lnbfQ, i32 -1
  store i64 %lnbfR, i64* %lnbfS, !tbaa !2
  %lnbfV = load i64, i64* %R1_Var
  %lnbfW = add i64 %lnbfV, 16
  %lnbfX = inttoptr i64 %lnbfW to i64*
  %lnbfY = load i64, i64* %lnbfX, !tbaa !4
  store i64 %lnbfY, i64* %R2_Var
  %lnbfZ = load i64*, i64** %Sp_Var
  %lnbg0 = getelementptr inbounds i64, i64* %lnbfZ, i32 -2
  %lnbg1 = ptrtoint i64* %lnbg0 to i64
  %lnbg2 = inttoptr i64 %lnbg1 to i64*
  store i64* %lnbg2, i64** %Sp_Var
  %lnbg3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_updateGameState_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbg4 = load i64*, i64** %Sp_Var
  %lnbg5 = load i64, i64* %R1_Var
  %lnbg6 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbg3( i64* %Base_Arg, i64* %lnbg4, i64* %Hp_Arg, i64 %lnbg5, i64 %lnbg6, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbfj:
  %lnbg7 = load i64, i64* %R1_Var
  store i64 %lnbg7, i64* %R1_Var
  %lnbg8 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbg9 = bitcast i64* %lnbg8 to i64*
  %lnbga = load i64, i64* %lnbg9, !tbaa !5
  %lnbgb = inttoptr i64 %lnbga to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbgc = load i64*, i64** %Sp_Var
  %lnbgd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbgb( i64* %Base_Arg, i64* %lnbgc, i64* %Hp_Arg, i64 %lnbgd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0663574 UTC

@Main_zdwloop_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to i8*)
define ghccc void @Main_zdwloop_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to i64)),i64 56), i64 12884901902, i64 0, i64 16496969383950}>
{
cbfo:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbge = load i64*, i64** %Sp_Var
  %lnbgf = getelementptr inbounds i64, i64* %lnbge, i32 -3
  %lnbgg = ptrtoint i64* %lnbgf to i64
  %lnbgh = icmp ult i64 %lnbgg, %SpLim_Arg
  %lnbgi = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbgh, i1 0 )
  br i1 %lnbgi, label %ubfx, label %ubfw
ubfw:
  %lnbgj = load i64*, i64** %Sp_Var
  %lnbgk = getelementptr inbounds i64, i64* %lnbgj, i32 -2
  store i64 %R2_Arg, i64* %lnbgk, !tbaa !2
  %lnbgl = load i64*, i64** %Sp_Var
  %lnbgm = getelementptr inbounds i64, i64* %lnbgl, i32 -1
  store i64 %R3_Arg, i64* %lnbgm, !tbaa !2
  %lnbgn = load i64*, i64** %Sp_Var
  %lnbgo = getelementptr inbounds i64, i64* %lnbgn, i32 -2
  %lnbgp = ptrtoint i64* %lnbgo to i64
  %lnbgq = inttoptr i64 %lnbgp to i64*
  store i64* %lnbgq, i64** %Sp_Var
  %lnbgr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbeX$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbgs = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbgr( i64* %Base_Arg, i64* %lnbgs, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubfx:
  %lnbgt = load i64*, i64** %Sp_Var
  %lnbgu = getelementptr inbounds i64, i64* %lnbgt, i32 -2
  store i64 %R2_Arg, i64* %lnbgu, !tbaa !2
  %lnbgv = load i64*, i64** %Sp_Var
  %lnbgw = getelementptr inbounds i64, i64* %lnbgv, i32 -1
  store i64 %R3_Arg, i64* %lnbgw, !tbaa !2
  %lnbgx = load i64*, i64** %Sp_Var
  %lnbgy = getelementptr inbounds i64, i64* %lnbgx, i32 -2
  %lnbgz = ptrtoint i64* %lnbgy to i64
  %lnbgA = inttoptr i64 %lnbgz to i64*
  store i64* %lnbgA, i64** %Sp_Var
  %lnbgB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbfp$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbgC = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbgB( i64* %Base_Arg, i64* %lnbgC, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0753472 UTC

@_cbeX = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbeX$def to i8*)
define internal ghccc void @_cbeX$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cbeX:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls9at = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbgD = load i64*, i64** %Hp_Var
  %lnbgE = getelementptr inbounds i64, i64* %lnbgD, i32 3
  %lnbgF = ptrtoint i64* %lnbgE to i64
  %lnbgG = inttoptr i64 %lnbgF to i64*
  store i64* %lnbgG, i64** %Hp_Var
  %lnbgH = load i64*, i64** %Hp_Var
  %lnbgI = ptrtoint i64* %lnbgH to i64
  %lnbgJ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbgK = bitcast i64* %lnbgJ to i64*
  %lnbgL = load i64, i64* %lnbgK, !tbaa !5
  %lnbgM = icmp ugt i64 %lnbgI, %lnbgL
  %lnbgN = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbgM, i1 0 )
  br i1 %lnbgN, label %cbfs, label %cbfr
cbfr:
  %lnbgO = load i64*, i64** %Sp_Var
  %lnbgP = getelementptr inbounds i64, i64* %lnbgO, i32 1
  %lnbgQ = bitcast i64* %lnbgP to i64*
  %lnbgR = load i64, i64* %lnbgQ, !tbaa !2
  store i64 %lnbgR, i64* %ls9at
  %lnbgS = load i64, i64* %ls9at
  switch i64 %lnbgS, label %cbfm [i64 0, label %cbfn]
cbfm:
  %lnbgU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s9au_info$def to i64
  %lnbgT = load i64*, i64** %Hp_Var
  %lnbgV = getelementptr inbounds i64, i64* %lnbgT, i32 -2
  store i64 %lnbgU, i64* %lnbgV, !tbaa !3
  %lnbgX = load i64*, i64** %Sp_Var
  %lnbgY = getelementptr inbounds i64, i64* %lnbgX, i32 0
  %lnbgZ = bitcast i64* %lnbgY to i64*
  %lnbh0 = load i64, i64* %lnbgZ, !tbaa !2
  %lnbgW = load i64*, i64** %Hp_Var
  %lnbh1 = getelementptr inbounds i64, i64* %lnbgW, i32 0
  store i64 %lnbh0, i64* %lnbh1, !tbaa !3
  %lnbh3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbf4_info$def to i64
  %lnbh2 = load i64*, i64** %Sp_Var
  %lnbh4 = getelementptr inbounds i64, i64* %lnbh2, i32 -1
  store i64 %lnbh3, i64* %lnbh4, !tbaa !2
  %lnbh5 = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %lnbh6 = add i64 %lnbh5, 2
  store i64 %lnbh6, i64* %R4_Var
  %lnbh7 = load i64*, i64** %Hp_Var
  %lnbh8 = getelementptr inbounds i64, i64* %lnbh7, i32 -2
  %lnbh9 = ptrtoint i64* %lnbh8 to i64
  store i64 %lnbh9, i64* %R3_Var
  %lnbha = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %lnbha, i64* %R2_Var
  %lnbhc = load i64, i64* %ls9at
  %lnbhb = load i64*, i64** %Sp_Var
  %lnbhd = getelementptr inbounds i64, i64* %lnbhb, i32 1
  store i64 %lnbhc, i64* %lnbhd, !tbaa !2
  %lnbhe = load i64*, i64** %Sp_Var
  %lnbhf = getelementptr inbounds i64, i64* %lnbhe, i32 -1
  %lnbhg = ptrtoint i64* %lnbhf to i64
  %lnbhh = inttoptr i64 %lnbhg to i64*
  store i64* %lnbhh, i64** %Sp_Var
  %lnbhi = bitcast i8* @base_GHCziIOziHandleziText_hPutStr2_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbhj = load i64*, i64** %Sp_Var
  %lnbhk = load i64*, i64** %Hp_Var
  %lnbhl = load i64, i64* %R1_Var
  %lnbhm = load i64, i64* %R2_Var
  %lnbhn = load i64, i64* %R3_Var
  %lnbho = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbhi( i64* %Base_Arg, i64* %lnbhj, i64* %lnbhk, i64 %lnbhl, i64 %lnbhm, i64 %lnbhn, i64 %lnbho, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbfn:
  %lnbhp = load i64*, i64** %Hp_Var
  %lnbhq = getelementptr inbounds i64, i64* %lnbhp, i32 -3
  %lnbhr = ptrtoint i64* %lnbhq to i64
  %lnbhs = inttoptr i64 %lnbhr to i64*
  store i64* %lnbhs, i64** %Hp_Var
  %lnbht = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %lnbhu = add i64 %lnbht, 1
  store i64 %lnbhu, i64* %R1_Var
  %lnbhv = load i64*, i64** %Sp_Var
  %lnbhw = getelementptr inbounds i64, i64* %lnbhv, i32 2
  %lnbhx = ptrtoint i64* %lnbhw to i64
  %lnbhy = inttoptr i64 %lnbhx to i64*
  store i64* %lnbhy, i64** %Sp_Var
  %lnbhz = load i64*, i64** %Sp_Var
  %lnbhA = getelementptr inbounds i64, i64* %lnbhz, i32 0
  %lnbhB = bitcast i64* %lnbhA to i64*
  %lnbhC = load i64, i64* %lnbhB, !tbaa !2
  %lnbhD = inttoptr i64 %lnbhC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbhE = load i64*, i64** %Sp_Var
  %lnbhF = load i64*, i64** %Hp_Var
  %lnbhG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbhD( i64* %Base_Arg, i64* %lnbhE, i64* %lnbhF, i64 %lnbhG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbfs:
  %lnbhH = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnbhH, !tbaa !5
  %lnbhI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbfp$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbhJ = load i64*, i64** %Sp_Var
  %lnbhK = load i64*, i64** %Hp_Var
  %lnbhL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbhI( i64* %Base_Arg, i64* %lnbhJ, i64* %lnbhK, i64 %lnbhL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0823343 UTC

@_cbfp = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbfp$def to i8*)
define internal ghccc void @_cbfp$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cbfp:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbhM = load i64*, i64** %Sp_Var
  %lnbhN = getelementptr inbounds i64, i64* %lnbhM, i32 1
  %lnbhO = bitcast i64* %lnbhN to i64*
  %lnbhP = load i64, i64* %lnbhO, !tbaa !2
  store i64 %lnbhP, i64* %R3_Var
  %lnbhQ = load i64*, i64** %Sp_Var
  %lnbhR = getelementptr inbounds i64, i64* %lnbhQ, i32 0
  %lnbhS = bitcast i64* %lnbhR to i64*
  %lnbhT = load i64, i64* %lnbhS, !tbaa !2
  store i64 %lnbhT, i64* %R2_Var
  %lnbhU = ptrtoint %Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i64
  store i64 %lnbhU, i64* %R1_Var
  %lnbhV = load i64*, i64** %Sp_Var
  %lnbhW = getelementptr inbounds i64, i64* %lnbhV, i32 2
  %lnbhX = ptrtoint i64* %lnbhW to i64
  %lnbhY = inttoptr i64 %lnbhX to i64*
  store i64* %lnbhY, i64** %Sp_Var
  %lnbhZ = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbi0 = bitcast i64* %lnbhZ to i64*
  %lnbi1 = load i64, i64* %lnbi0, !tbaa !5
  %lnbi2 = inttoptr i64 %lnbi1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbi3 = load i64*, i64** %Sp_Var
  %lnbi4 = load i64, i64* %R1_Var
  %lnbi5 = load i64, i64* %R2_Var
  %lnbi6 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbi2( i64* %Base_Arg, i64* %lnbi3, i64* %Hp_Arg, i64 %lnbi4, i64 %lnbi5, i64 %lnbi6, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0873277 UTC

@cbf4_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbf4_info$def to i8*)
define internal ghccc void @cbf4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbf4_info$def to i64)),i64 56), i64 130, i64 16496969383966}>
{
cbf4:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbi7 = load i64*, i64** %Hp_Var
  %lnbi8 = getelementptr inbounds i64, i64* %lnbi7, i32 3
  %lnbi9 = ptrtoint i64* %lnbi8 to i64
  %lnbia = inttoptr i64 %lnbi9 to i64*
  store i64* %lnbia, i64** %Hp_Var
  %lnbib = load i64*, i64** %Hp_Var
  %lnbic = ptrtoint i64* %lnbib to i64
  %lnbid = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbie = bitcast i64* %lnbid to i64*
  %lnbif = load i64, i64* %lnbie, !tbaa !5
  %lnbig = icmp ugt i64 %lnbic, %lnbif
  %lnbih = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbig, i1 0 )
  br i1 %lnbih, label %cbfv, label %cbfu
cbfu:
  %lnbij = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s9ay_info$def to i64
  %lnbii = load i64*, i64** %Hp_Var
  %lnbik = getelementptr inbounds i64, i64* %lnbii, i32 -2
  store i64 %lnbij, i64* %lnbik, !tbaa !3
  %lnbim = load i64*, i64** %Sp_Var
  %lnbin = getelementptr inbounds i64, i64* %lnbim, i32 1
  %lnbio = bitcast i64* %lnbin to i64*
  %lnbip = load i64, i64* %lnbio, !tbaa !2
  %lnbil = load i64*, i64** %Hp_Var
  %lnbiq = getelementptr inbounds i64, i64* %lnbil, i32 0
  store i64 %lnbip, i64* %lnbiq, !tbaa !3
  %lnbis = load i64*, i64** %Hp_Var
  %lnbit = getelementptr inbounds i64, i64* %lnbis, i32 -2
  %lnbiu = ptrtoint i64* %lnbit to i64
  %lnbir = load i64*, i64** %Sp_Var
  %lnbiv = getelementptr inbounds i64, i64* %lnbir, i32 1
  store i64 %lnbiu, i64* %lnbiv, !tbaa !2
  %lnbix = load i64*, i64** %Sp_Var
  %lnbiy = getelementptr inbounds i64, i64* %lnbix, i32 2
  %lnbiz = bitcast i64* %lnbiy to i64*
  %lnbiA = load i64, i64* %lnbiz, !tbaa !2
  %lnbiB = add i64 %lnbiA, -1
  %lnbiw = load i64*, i64** %Sp_Var
  %lnbiC = getelementptr inbounds i64, i64* %lnbiw, i32 2
  store i64 %lnbiB, i64* %lnbiC, !tbaa !2
  %lnbiD = load i64*, i64** %Sp_Var
  %lnbiE = getelementptr inbounds i64, i64* %lnbiD, i32 1
  %lnbiF = ptrtoint i64* %lnbiE to i64
  %lnbiG = inttoptr i64 %lnbiF to i64*
  store i64* %lnbiG, i64** %Sp_Var
  %lnbiH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbeX$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbiI = load i64*, i64** %Sp_Var
  %lnbiJ = load i64*, i64** %Hp_Var
  %lnbiK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbiH( i64* %Base_Arg, i64* %lnbiI, i64* %lnbiJ, i64 %lnbiK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbfv:
  %lnbiL = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnbiL, !tbaa !5
  %lnbiM = load i64, i64* %R1_Var
  store i64 %lnbiM, i64* %R1_Var
  %lnbiN = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbiO = load i64*, i64** %Sp_Var
  %lnbiP = load i64*, i64** %Hp_Var
  %lnbiQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbiN( i64* %Base_Arg, i64* %lnbiO, i64* %lnbiP, i64 %lnbiQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.0933196 UTC

%Main_loop1_closure_struct = type <{i64, i64}>
@Main_loop1_closure$def = internal global %Main_loop1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_loop1_info$def to i64), i64 0}>
@Main_loop1_closure = alias i8, bitcast (%Main_loop1_closure_struct* @Main_loop1_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:27.0973088 UTC

@Main_loop1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_loop1_info$def to i8*)
define ghccc void @Main_loop1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_loop1_info$def to i64)),i64 128), i64 12884901903, i64 0, i64 38654705678}>
{
cbiY:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnbj5 = load i64*, i64** %Sp_Var
  %lnbj6 = getelementptr inbounds i64, i64* %lnbj5, i32 -2
  %lnbj7 = ptrtoint i64* %lnbj6 to i64
  %lnbj8 = icmp ult i64 %lnbj7, %SpLim_Arg
  %lnbj9 = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbj8, i1 0 )
  br i1 %lnbj9, label %cbiZ, label %cbj0
cbj0:
  %lnbjb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbiV_info$def to i64
  %lnbja = load i64*, i64** %Sp_Var
  %lnbjc = getelementptr inbounds i64, i64* %lnbja, i32 -2
  store i64 %lnbjb, i64* %lnbjc, !tbaa !2
  %lnbjd = load i64, i64* %R3_Var
  store i64 %lnbjd, i64* %R1_Var
  %lnbjf = load i64, i64* %R2_Var
  %lnbje = load i64*, i64** %Sp_Var
  %lnbjg = getelementptr inbounds i64, i64* %lnbje, i32 -1
  store i64 %lnbjf, i64* %lnbjg, !tbaa !2
  %lnbjh = load i64*, i64** %Sp_Var
  %lnbji = getelementptr inbounds i64, i64* %lnbjh, i32 -2
  %lnbjj = ptrtoint i64* %lnbji to i64
  %lnbjk = inttoptr i64 %lnbjj to i64*
  store i64* %lnbjk, i64** %Sp_Var
  %lnbjl = load i64, i64* %R1_Var
  %lnbjm = and i64 %lnbjl, 7
  %lnbjn = icmp ne i64 %lnbjm, 0
  br i1 %lnbjn, label %ubj4, label %cbiW
cbiW:
  %lnbjp = load i64, i64* %R1_Var
  %lnbjq = inttoptr i64 %lnbjp to i64*
  %lnbjr = load i64, i64* %lnbjq, !tbaa !4
  %lnbjs = inttoptr i64 %lnbjr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbjt = load i64*, i64** %Sp_Var
  %lnbju = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbjs( i64* %Base_Arg, i64* %lnbjt, i64* %Hp_Arg, i64 %lnbju, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubj4:
  %lnbjv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbiV_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbjw = load i64*, i64** %Sp_Var
  %lnbjx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbjv( i64* %Base_Arg, i64* %lnbjw, i64* %Hp_Arg, i64 %lnbjx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbiZ:
  %lnbjy = load i64, i64* %R3_Var
  store i64 %lnbjy, i64* %R3_Var
  %lnbjz = load i64, i64* %R2_Var
  store i64 %lnbjz, i64* %R2_Var
  %lnbjA = ptrtoint %Main_loop1_closure_struct* @Main_loop1_closure$def to i64
  store i64 %lnbjA, i64* %R1_Var
  %lnbjB = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbjC = bitcast i64* %lnbjB to i64*
  %lnbjD = load i64, i64* %lnbjC, !tbaa !5
  %lnbjE = inttoptr i64 %lnbjD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbjF = load i64*, i64** %Sp_Var
  %lnbjG = load i64, i64* %R1_Var
  %lnbjH = load i64, i64* %R2_Var
  %lnbjI = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbjE( i64* %Base_Arg, i64* %lnbjF, i64* %Hp_Arg, i64 %lnbjG, i64 %lnbjH, i64 %lnbjI, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1033001 UTC

@cbiV_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbiV_info$def to i8*)
define internal ghccc void @cbiV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbiV_info$def to i64)),i64 128), i64 1, i64 4294967326}>
{
cbiV:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbjJ = add i64 %R1_Arg, 7
  %lnbjK = inttoptr i64 %lnbjJ to i64*
  %lnbjL = load i64, i64* %lnbjK, !tbaa !4
  store i64 %lnbjL, i64* %R3_Var
  %lnbjM = load i64*, i64** %Sp_Var
  %lnbjN = getelementptr inbounds i64, i64* %lnbjM, i32 1
  %lnbjO = bitcast i64* %lnbjN to i64*
  %lnbjP = load i64, i64* %lnbjO, !tbaa !2
  store i64 %lnbjP, i64* %R2_Var
  %lnbjQ = load i64*, i64** %Sp_Var
  %lnbjR = getelementptr inbounds i64, i64* %lnbjQ, i32 2
  %lnbjS = ptrtoint i64* %lnbjR to i64
  %lnbjT = inttoptr i64 %lnbjS to i64*
  store i64* %lnbjT, i64** %Sp_Var
  %lnbjU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbjV = load i64*, i64** %Sp_Var
  %lnbjW = load i64, i64* %R2_Var
  %lnbjX = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbjU( i64* %Base_Arg, i64* %lnbjV, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbjW, i64 %lnbjX, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.108291 UTC

%Main_loop_closure_struct = type <{i64, i64}>
@Main_loop_closure$def = internal global %Main_loop_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_loop_info$def to i64), i64 0}>
@Main_loop_closure = alias i8, bitcast (%Main_loop_closure_struct* @Main_loop_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:27.1122885 UTC

@Main_loop_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_loop_info$def to i8*)
define ghccc void @Main_loop_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_loop_info$def to i64)),i64 152), i64 12884901903, i64 0, i64 4294967310}>
{
cbk2:
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnbk5 = load i64, i64* %R3_Var
  store i64 %lnbk5, i64* %R3_Var
  %lnbk6 = load i64, i64* %R2_Var
  store i64 %lnbk6, i64* %R2_Var
  %lnbk7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_loop1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbk8 = load i64, i64* %R2_Var
  %lnbk9 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbk7( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbk8, i64 %lnbk9, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1172769 UTC

%Main_newGameState1_closure_struct = type <{i64}>
@Main_newGameState1_closure$def = internal global %Main_newGameState1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_newGameState1_info$def to i64)}>
@Main_newGameState1_closure = alias i8, bitcast (%Main_newGameState1_closure_struct* @Main_newGameState1_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:27.1212757 UTC

@Main_newGameState1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_newGameState1_info$def to i8*)
define ghccc void @Main_newGameState1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 4294967301, i64 0, i64 14}>
{
cbkh:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnblG = load i64*, i64** %Sp_Var
  %lnblH = getelementptr inbounds i64, i64* %lnblG, i32 -3
  %lnblI = ptrtoint i64* %lnblH to i64
  %lnblJ = icmp ult i64 %lnblI, %SpLim_Arg
  %lnblK = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnblJ, i1 0 )
  br i1 %lnblK, label %cbkl, label %cbkm
cbkm:
  %lnblM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbke_info$def to i64
  %lnblL = load i64*, i64** %Sp_Var
  %lnblN = getelementptr inbounds i64, i64* %lnblL, i32 -1
  store i64 %lnblM, i64* %lnblN, !tbaa !2
  %lnblO = load i64, i64* %R2_Var
  store i64 %lnblO, i64* %R1_Var
  %lnblP = load i64*, i64** %Sp_Var
  %lnblQ = getelementptr inbounds i64, i64* %lnblP, i32 -1
  %lnblR = ptrtoint i64* %lnblQ to i64
  %lnblS = inttoptr i64 %lnblR to i64*
  store i64* %lnblS, i64** %Sp_Var
  %lnblT = load i64, i64* %R1_Var
  %lnblU = and i64 %lnblT, 7
  %lnblV = icmp ne i64 %lnblU, 0
  br i1 %lnblV, label %ublu, label %cbkf
cbkf:
  %lnblX = load i64, i64* %R1_Var
  %lnblY = inttoptr i64 %lnblX to i64*
  %lnblZ = load i64, i64* %lnblY, !tbaa !4
  %lnbm0 = inttoptr i64 %lnblZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbm1 = load i64*, i64** %Sp_Var
  %lnbm2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbm0( i64* %Base_Arg, i64* %lnbm1, i64* %Hp_Arg, i64 %lnbm2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ublu:
  %lnbm3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbke_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbm4 = load i64*, i64** %Sp_Var
  %lnbm5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbm3( i64* %Base_Arg, i64* %lnbm4, i64* %Hp_Arg, i64 %lnbm5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbkl:
  %lnbm6 = load i64, i64* %R2_Var
  store i64 %lnbm6, i64* %R2_Var
  %lnbm7 = ptrtoint %Main_newGameState1_closure_struct* @Main_newGameState1_closure$def to i64
  store i64 %lnbm7, i64* %R1_Var
  %lnbm8 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbm9 = bitcast i64* %lnbm8 to i64*
  %lnbma = load i64, i64* %lnbm9, !tbaa !5
  %lnbmb = inttoptr i64 %lnbma to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbmc = load i64*, i64** %Sp_Var
  %lnbmd = load i64, i64* %R1_Var
  %lnbme = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbmb( i64* %Base_Arg, i64* %lnbmc, i64* %Hp_Arg, i64 %lnbmd, i64 %lnbme, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1272625 UTC

@cbke_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbke_info$def to i8*)
define internal ghccc void @cbke_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 30}>
{
cbke:
  %ls9aI = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbmg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkk_info$def to i64
  %lnbmf = load i64*, i64** %Sp_Var
  %lnbmh = getelementptr inbounds i64, i64* %lnbmf, i32 -1
  store i64 %lnbmg, i64* %lnbmh, !tbaa !2
  %lnbmk = load i64, i64* %R1_Var
  %lnbml = add i64 %lnbmk, 15
  %lnbmm = inttoptr i64 %lnbml to i64*
  %lnbmn = load i64, i64* %lnbmm, !tbaa !4
  store i64 %lnbmn, i64* %ls9aI
  %lnbmq = load i64, i64* %R1_Var
  %lnbmr = add i64 %lnbmq, 7
  %lnbms = inttoptr i64 %lnbmr to i64*
  %lnbmt = load i64, i64* %lnbms, !tbaa !4
  store i64 %lnbmt, i64* %R1_Var
  %lnbmv = load i64, i64* %ls9aI
  %lnbmu = load i64*, i64** %Sp_Var
  %lnbmw = getelementptr inbounds i64, i64* %lnbmu, i32 0
  store i64 %lnbmv, i64* %lnbmw, !tbaa !2
  %lnbmx = load i64*, i64** %Sp_Var
  %lnbmy = getelementptr inbounds i64, i64* %lnbmx, i32 -1
  %lnbmz = ptrtoint i64* %lnbmy to i64
  %lnbmA = inttoptr i64 %lnbmz to i64*
  store i64* %lnbmA, i64** %Sp_Var
  %lnbmB = load i64, i64* %R1_Var
  %lnbmC = and i64 %lnbmB, 7
  %lnbmD = icmp ne i64 %lnbmC, 0
  br i1 %lnbmD, label %ublt, label %cbko
cbko:
  %lnbmF = load i64, i64* %R1_Var
  %lnbmG = inttoptr i64 %lnbmF to i64*
  %lnbmH = load i64, i64* %lnbmG, !tbaa !4
  %lnbmI = inttoptr i64 %lnbmH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbmJ = load i64*, i64** %Sp_Var
  %lnbmK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbmI( i64* %Base_Arg, i64* %lnbmJ, i64* %Hp_Arg, i64 %lnbmK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ublt:
  %lnbmL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkk_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbmM = load i64*, i64** %Sp_Var
  %lnbmN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbmL( i64* %Base_Arg, i64* %lnbmM, i64* %Hp_Arg, i64 %lnbmN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1322533 UTC

@cbkk_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkk_info$def to i8*)
define internal ghccc void @cbkk_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 30}>
{
cbkk:
  %ls9aK = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbmQ = load i64, i64* %R1_Var
  %lnbmR = add i64 %lnbmQ, 7
  %lnbmS = inttoptr i64 %lnbmR to i64*
  %lnbmT = load i64, i64* %lnbmS, !tbaa !4
  store i64 %lnbmT, i64* %ls9aK
  %lnbmU = load i64, i64* %ls9aK
  switch i64 %lnbmU, label %ublj [i64 0, label %cbl9]
ublj:
  %lnbmW = load i64, i64* %ls9aK
  %lnbmV = load i64*, i64** %Sp_Var
  %lnbmX = getelementptr inbounds i64, i64* %lnbmV, i32 0
  store i64 %lnbmW, i64* %lnbmX, !tbaa !2
  %lnbmY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s9aL$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbmZ = load i64*, i64** %Sp_Var
  %lnbn0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbmY( i64* %Base_Arg, i64* %lnbmZ, i64* %Hp_Arg, i64 %lnbn0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbl9:
  %lnbn2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbl8_info$def to i64
  %lnbn1 = load i64*, i64** %Sp_Var
  %lnbn3 = getelementptr inbounds i64, i64* %lnbn1, i32 -1
  store i64 %lnbn2, i64* %lnbn3, !tbaa !2
  %lnbn4 = load i64*, i64** %Sp_Var
  %lnbn5 = getelementptr inbounds i64, i64* %lnbn4, i32 1
  %lnbn6 = bitcast i64* %lnbn5 to i64*
  %lnbn7 = load i64, i64* %lnbn6, !tbaa !2
  store i64 %lnbn7, i64* %R1_Var
  %lnbn9 = load i64, i64* %ls9aK
  %lnbn8 = load i64*, i64** %Sp_Var
  %lnbna = getelementptr inbounds i64, i64* %lnbn8, i32 0
  store i64 %lnbn9, i64* %lnbna, !tbaa !2
  %lnbnb = load i64*, i64** %Sp_Var
  %lnbnc = getelementptr inbounds i64, i64* %lnbnb, i32 -1
  %lnbnd = ptrtoint i64* %lnbnc to i64
  %lnbne = inttoptr i64 %lnbnd to i64*
  store i64* %lnbne, i64** %Sp_Var
  %lnbnf = load i64, i64* %R1_Var
  %lnbng = and i64 %lnbnf, 7
  %lnbnh = icmp ne i64 %lnbng, 0
  br i1 %lnbnh, label %ublv, label %cbla
cbla:
  %lnbnj = load i64, i64* %R1_Var
  %lnbnk = inttoptr i64 %lnbnj to i64*
  %lnbnl = load i64, i64* %lnbnk, !tbaa !4
  %lnbnm = inttoptr i64 %lnbnl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbnn = load i64*, i64** %Sp_Var
  %lnbno = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbnm( i64* %Base_Arg, i64* %lnbnn, i64* %Hp_Arg, i64 %lnbno, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ublv:
  %lnbnp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbl8_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbnq = load i64*, i64** %Sp_Var
  %lnbnr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbnp( i64* %Base_Arg, i64* %lnbnq, i64* %Hp_Arg, i64 %lnbnr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1372461 UTC

@cbl8_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbl8_info$def to i8*)
define internal ghccc void @cbl8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 66, i64 30}>
{
cbl8:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbns = add i64 %R1_Arg, 7
  %lnbnt = inttoptr i64 %lnbns to i64*
  %lnbnu = load i64, i64* %lnbnt, !tbaa !4
  switch i64 %lnbnu, label %ublk [i64 1, label %ubll]
ublk:
  %lnbnv = load i64*, i64** %Sp_Var
  %lnbnw = getelementptr inbounds i64, i64* %lnbnv, i32 1
  %lnbnx = ptrtoint i64* %lnbnw to i64
  %lnbny = inttoptr i64 %lnbnx to i64*
  store i64* %lnbny, i64** %Sp_Var
  %lnbnz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s9aL$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbnA = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbnz( i64* %Base_Arg, i64* %lnbnA, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubll:
  %lnbnB = load i64*, i64** %Sp_Var
  %lnbnC = getelementptr inbounds i64, i64* %lnbnB, i32 3
  %lnbnD = ptrtoint i64* %lnbnC to i64
  %lnbnE = inttoptr i64 %lnbnD to i64*
  store i64* %lnbnE, i64** %Sp_Var
  %lnbnF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbli$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbnG = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbnF( i64* %Base_Arg, i64* %lnbnG, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1432374 UTC

@_s9aL = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_s9aL$def to i8*)
define internal ghccc void @_s9aL$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
s9aL:
  %ls9aI = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbnH = load i64*, i64** %Sp_Var
  %lnbnI = getelementptr inbounds i64, i64* %lnbnH, i32 1
  %lnbnJ = bitcast i64* %lnbnI to i64*
  %lnbnK = load i64, i64* %lnbnJ, !tbaa !2
  store i64 %lnbnK, i64* %ls9aI
  %lnbnL = load i64*, i64** %Sp_Var
  %lnbnM = getelementptr inbounds i64, i64* %lnbnL, i32 0
  %lnbnN = bitcast i64* %lnbnM to i64*
  %lnbnO = load i64, i64* %lnbnN, !tbaa !2
  switch i64 %lnbnO, label %ublm [i64 1, label %cbkF
                                  i64 2, label %cbkR]
ublm:
  %lnbnP = load i64*, i64** %Sp_Var
  %lnbnQ = getelementptr inbounds i64, i64* %lnbnP, i32 2
  %lnbnR = ptrtoint i64* %lnbnQ to i64
  %lnbnS = inttoptr i64 %lnbnR to i64*
  store i64* %lnbnS, i64** %Sp_Var
  %lnbnT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbkZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbnU = load i64*, i64** %Sp_Var
  %lnbnV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbnT( i64* %Base_Arg, i64* %lnbnU, i64* %Hp_Arg, i64 %lnbnV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbkF:
  %lnbnX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkE_info$def to i64
  %lnbnW = load i64*, i64** %Sp_Var
  %lnbnY = getelementptr inbounds i64, i64* %lnbnW, i32 1
  store i64 %lnbnX, i64* %lnbnY, !tbaa !2
  %lnbnZ = load i64, i64* %ls9aI
  store i64 %lnbnZ, i64* %R1_Var
  %lnbo0 = load i64*, i64** %Sp_Var
  %lnbo1 = getelementptr inbounds i64, i64* %lnbo0, i32 1
  %lnbo2 = ptrtoint i64* %lnbo1 to i64
  %lnbo3 = inttoptr i64 %lnbo2 to i64*
  store i64* %lnbo3, i64** %Sp_Var
  %lnbo4 = load i64, i64* %R1_Var
  %lnbo5 = and i64 %lnbo4, 7
  %lnbo6 = icmp ne i64 %lnbo5, 0
  br i1 %lnbo6, label %ublD, label %cbkG
cbkG:
  %lnbo8 = load i64, i64* %R1_Var
  %lnbo9 = inttoptr i64 %lnbo8 to i64*
  %lnboa = load i64, i64* %lnbo9, !tbaa !4
  %lnbob = inttoptr i64 %lnboa to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnboc = load i64*, i64** %Sp_Var
  %lnbod = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbob( i64* %Base_Arg, i64* %lnboc, i64* %Hp_Arg, i64 %lnbod, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ublD:
  %lnboe = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkE_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbof = load i64*, i64** %Sp_Var
  %lnbog = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnboe( i64* %Base_Arg, i64* %lnbof, i64* %Hp_Arg, i64 %lnbog, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbkR:
  %lnboi = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkQ_info$def to i64
  %lnboh = load i64*, i64** %Sp_Var
  %lnboj = getelementptr inbounds i64, i64* %lnboh, i32 1
  store i64 %lnboi, i64* %lnboj, !tbaa !2
  %lnbok = load i64, i64* %ls9aI
  store i64 %lnbok, i64* %R1_Var
  %lnbol = load i64*, i64** %Sp_Var
  %lnbom = getelementptr inbounds i64, i64* %lnbol, i32 1
  %lnbon = ptrtoint i64* %lnbom to i64
  %lnboo = inttoptr i64 %lnbon to i64*
  store i64* %lnboo, i64** %Sp_Var
  %lnbop = load i64, i64* %R1_Var
  %lnboq = and i64 %lnbop, 7
  %lnbor = icmp ne i64 %lnboq, 0
  br i1 %lnbor, label %ublE, label %cbkS
cbkS:
  %lnbot = load i64, i64* %R1_Var
  %lnbou = inttoptr i64 %lnbot to i64*
  %lnbov = load i64, i64* %lnbou, !tbaa !4
  %lnbow = inttoptr i64 %lnbov to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbox = load i64*, i64** %Sp_Var
  %lnboy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbow( i64* %Base_Arg, i64* %lnbox, i64* %Hp_Arg, i64 %lnboy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ublE:
  %lnboz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnboA = load i64*, i64** %Sp_Var
  %lnboB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnboz( i64* %Base_Arg, i64* %lnboA, i64* %Hp_Arg, i64 %lnboB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1492369 UTC

@cbkQ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkQ_info$def to i8*)
define internal ghccc void @cbkQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 30}>
{
cbkQ:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnboC = add i64 %R1_Arg, 7
  %lnboD = inttoptr i64 %lnboC to i64*
  %lnboE = load i64, i64* %lnboD, !tbaa !4
  switch i64 %lnboE, label %ubln [i64 0, label %ublq
                                  i64 1, label %ublq
                                  i64 2, label %ublq]
ubln:
  %lnboF = load i64*, i64** %Sp_Var
  %lnboG = getelementptr inbounds i64, i64* %lnboF, i32 1
  %lnboH = ptrtoint i64* %lnboG to i64
  %lnboI = inttoptr i64 %lnboH to i64*
  store i64* %lnboI, i64** %Sp_Var
  %lnboJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbkZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnboK = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnboJ( i64* %Base_Arg, i64* %lnboK, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ublq:
  %lnboL = load i64*, i64** %Sp_Var
  %lnboM = getelementptr inbounds i64, i64* %lnboL, i32 1
  %lnboN = ptrtoint i64* %lnboM to i64
  %lnboO = inttoptr i64 %lnboN to i64*
  store i64* %lnboO, i64** %Sp_Var
  %lnboP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbli$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnboQ = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnboP( i64* %Base_Arg, i64* %lnboQ, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1542221 UTC

@cbkE_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkE_info$def to i8*)
define internal ghccc void @cbkE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 30}>
{
cbkE:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnboR = add i64 %R1_Arg, 7
  %lnboS = inttoptr i64 %lnboR to i64*
  %lnboT = load i64, i64* %lnboS, !tbaa !4
  switch i64 %lnboT, label %ublr [i64 2, label %ubls]
ublr:
  %lnboU = load i64*, i64** %Sp_Var
  %lnboV = getelementptr inbounds i64, i64* %lnboU, i32 1
  %lnboW = ptrtoint i64* %lnboV to i64
  %lnboX = inttoptr i64 %lnboW to i64*
  store i64* %lnboX, i64** %Sp_Var
  %lnboY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbkZ$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnboZ = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnboY( i64* %Base_Arg, i64* %lnboZ, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubls:
  %lnbp0 = load i64*, i64** %Sp_Var
  %lnbp1 = getelementptr inbounds i64, i64* %lnbp0, i32 1
  %lnbp2 = ptrtoint i64* %lnbp1 to i64
  %lnbp3 = inttoptr i64 %lnbp2 to i64*
  store i64* %lnbp3, i64** %Sp_Var
  %lnbp4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbli$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbp5 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbp4( i64* %Base_Arg, i64* %lnbp5, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1582158 UTC

@_cbli = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbli$def to i8*)
define internal ghccc void @_cbli$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cbli:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbp6 = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %lnbp7 = add i64 %lnbp6, 2
  store i64 %lnbp7, i64* %R1_Var
  %lnbp8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbp9 = bitcast i64* %lnbp8 to i64*
  %lnbpa = load i64, i64* %lnbp9, !tbaa !2
  %lnbpb = inttoptr i64 %lnbpa to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbpc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbpb( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbpc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1632048 UTC

@_cbkZ = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @_cbkZ$def to i8*)
define internal ghccc void @_cbkZ$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cbkZ:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbpd = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %lnbpe = add i64 %lnbpd, 1
  store i64 %lnbpe, i64* %R1_Var
  %lnbpf = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbpg = bitcast i64* %lnbpf to i64*
  %lnbph = load i64, i64* %lnbpg, !tbaa !2
  %lnbpi = inttoptr i64 %lnbph to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbpj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbpi( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnbpj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1681988 UTC

%Main_newGameState_closure_struct = type <{i64, i64, i64, i64}>
@Main_newGameState_closure$def = internal global %Main_newGameState_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_newGameState_info$def to i64), i64 0, i64 0, i64 0}>
@Main_newGameState_closure = alias i8, bitcast (%Main_newGameState_closure_struct* @Main_newGameState_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:27.1731929 UTC

@Main_newGameState_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_newGameState_info$def to i8*)
define ghccc void @Main_newGameState_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_newGameState_info$def to i64)),i64 96), i64 0, i64 4294967317}>
{
cbpq:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %lcbpn = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbpt = load i64*, i64** %Sp_Var
  %lnbpu = getelementptr inbounds i64, i64* %lnbpt, i32 -2
  %lnbpv = ptrtoint i64* %lnbpu to i64
  %lnbpw = icmp ult i64 %lnbpv, %SpLim_Arg
  %lnbpx = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbpw, i1 0 )
  br i1 %lnbpx, label %cbpr, label %cbps
cbps:
  %lnbpy = ptrtoint i64* %Base_Arg to i64
  %lnbpz = inttoptr i64 %lnbpy to i8*
  %lnbpA = load i64, i64* %R1_Var
  %lnbpB = inttoptr i64 %lnbpA to i8*
  %lnbpC = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  %lnbpD = call ccc i8* (i8*, i8*) %lnbpC( i8* %lnbpz, i8* %lnbpB ) nounwind
  %lnbpE = ptrtoint i8* %lnbpD to i64
  store i64 %lnbpE, i64* %lcbpn
  %lnbpF = load i64, i64* %lcbpn
  %lnbpG = icmp eq i64 %lnbpF, 0
  br i1 %lnbpG, label %cbpp, label %cbpo
cbpo:
  %lnbpI = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %lnbpH = load i64*, i64** %Sp_Var
  %lnbpJ = getelementptr inbounds i64, i64* %lnbpH, i32 -2
  store i64 %lnbpI, i64* %lnbpJ, !tbaa !2
  %lnbpL = load i64, i64* %lcbpn
  %lnbpK = load i64*, i64** %Sp_Var
  %lnbpM = getelementptr inbounds i64, i64* %lnbpK, i32 -1
  store i64 %lnbpL, i64* %lnbpM, !tbaa !2
  %lnbpN = ptrtoint %Main_newGameState1_closure_struct* @Main_newGameState1_closure$def to i64
  %lnbpO = add i64 %lnbpN, 1
  store i64 %lnbpO, i64* %R6_Var
  %lnbpP = ptrtoint %Main_xWidth_closure_struct* @Main_xWidth_closure$def to i64
  %lnbpQ = add i64 %lnbpP, 1
  store i64 %lnbpQ, i64* %R5_Var
  store i64 15, i64* %R4_Var
  %lnbpR = ptrtoint %Main_fieldSizze4_closure_struct* @Main_fieldSizze4_closure$def to i64
  %lnbpS = add i64 %lnbpR, 1
  store i64 %lnbpS, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %lnbpT = load i64*, i64** %Sp_Var
  %lnbpU = getelementptr inbounds i64, i64* %lnbpT, i32 -2
  %lnbpV = ptrtoint i64* %lnbpU to i64
  %lnbpW = inttoptr i64 %lnbpV to i64*
  store i64* %lnbpW, i64** %Sp_Var
  %lnbpX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwzdsarrayByIndex_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbpY = load i64*, i64** %Sp_Var
  %lnbpZ = load i64, i64* %R1_Var
  %lnbq0 = load i64, i64* %R2_Var
  %lnbq1 = load i64, i64* %R3_Var
  %lnbq2 = load i64, i64* %R4_Var
  %lnbq3 = load i64, i64* %R5_Var
  %lnbq4 = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbpX( i64* %Base_Arg, i64* %lnbpY, i64* %Hp_Arg, i64 %lnbpZ, i64 %lnbq0, i64 %lnbq1, i64 %lnbq2, i64 %lnbq3, i64 %lnbq4, i64 %SpLim_Arg ) nounwind
  ret void
cbpp:
  %lnbq6 = load i64, i64* %R1_Var
  %lnbq7 = inttoptr i64 %lnbq6 to i64*
  %lnbq8 = load i64, i64* %lnbq7, !tbaa !4
  %lnbq9 = inttoptr i64 %lnbq8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbqa = load i64*, i64** %Sp_Var
  %lnbqb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbq9( i64* %Base_Arg, i64* %lnbqa, i64* %Hp_Arg, i64 %lnbqb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbpr:
  %lnbqc = load i64, i64* %R1_Var
  store i64 %lnbqc, i64* %R1_Var
  %lnbqd = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbqe = bitcast i64* %lnbqd to i64*
  %lnbqf = load i64, i64* %lnbqe, !tbaa !5
  %lnbqg = inttoptr i64 %lnbqf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbqh = load i64*, i64** %Sp_Var
  %lnbqi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbqg( i64* %Base_Arg, i64* %lnbqh, i64* %Hp_Arg, i64 %lnbqi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1791835 UTC

%Main_main1_closure_struct = type <{i64, i64}>
@Main_main1_closure$def = internal global %Main_main1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64), i64 0}>
@Main_main1_closure = alias i8, bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:27.1831734 UTC

@Main_main1_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i8*)
define ghccc void @Main_main1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to i64)),i64 128), i64 4294967299, i64 0, i64 493921239054}>
{
cbqp:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbqt = load i64*, i64** %Sp_Var
  %lnbqu = getelementptr inbounds i64, i64* %lnbqt, i32 -1
  %lnbqv = ptrtoint i64* %lnbqu to i64
  %lnbqw = icmp ult i64 %lnbqv, %SpLim_Arg
  %lnbqx = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %lnbqw, i1 0 )
  br i1 %lnbqx, label %cbqq, label %cbqr
cbqr:
  %lnbqz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbqn_info$def to i64
  %lnbqy = load i64*, i64** %Sp_Var
  %lnbqA = getelementptr inbounds i64, i64* %lnbqy, i32 -1
  store i64 %lnbqz, i64* %lnbqA, !tbaa !2
  %lnbqB = ptrtoint i8* @base_GHCziIOziHandleziTypes_NoBuffering_closure to i64
  %lnbqC = add i64 %lnbqB, 1
  store i64 %lnbqC, i64* %R3_Var
  %lnbqD = ptrtoint i8* @base_GHCziIOziHandleziFD_stdout_closure to i64
  store i64 %lnbqD, i64* %R2_Var
  %lnbqE = load i64*, i64** %Sp_Var
  %lnbqF = getelementptr inbounds i64, i64* %lnbqE, i32 -1
  %lnbqG = ptrtoint i64* %lnbqF to i64
  %lnbqH = inttoptr i64 %lnbqG to i64*
  store i64* %lnbqH, i64** %Sp_Var
  %lnbqI = bitcast i8* @base_GHCziIOziHandle_hSetBuffering1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbqJ = load i64*, i64** %Sp_Var
  %lnbqK = load i64, i64* %R1_Var
  %lnbqL = load i64, i64* %R2_Var
  %lnbqM = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbqI( i64* %Base_Arg, i64* %lnbqJ, i64* %Hp_Arg, i64 %lnbqK, i64 %lnbqL, i64 %lnbqM, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbqq:
  %lnbqN = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  store i64 %lnbqN, i64* %R1_Var
  %lnbqO = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbqP = bitcast i64* %lnbqO to i64*
  %lnbqQ = load i64, i64* %lnbqP, !tbaa !5
  %lnbqR = inttoptr i64 %lnbqQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbqS = load i64*, i64** %Sp_Var
  %lnbqT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbqR( i64* %Base_Arg, i64* %lnbqS, i64* %Hp_Arg, i64 %lnbqT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1871684 UTC

@cbqn_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbqn_info$def to i8*)
define internal ghccc void @cbqn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbqn_info$def to i64)),i64 128), i64 0, i64 73014444062}>
{
cbqn:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 4000, i64* %R3_Var
  %lnbqU = ptrtoint %Main_newGameState_closure_struct* @Main_newGameState_closure$def to i64
  store i64 %lnbqU, i64* %R2_Var
  %lnbqV = load i64*, i64** %Sp_Var
  %lnbqW = getelementptr inbounds i64, i64* %lnbqV, i32 1
  %lnbqX = ptrtoint i64* %lnbqW to i64
  %lnbqY = inttoptr i64 %lnbqX to i64*
  store i64* %lnbqY, i64** %Sp_Var
  %lnbqZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_zdwloop_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbr0 = load i64*, i64** %Sp_Var
  %lnbr1 = load i64, i64* %R2_Var
  %lnbr2 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbqZ( i64* %Base_Arg, i64* %lnbr0, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbr1, i64 %lnbr2, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1911634 UTC

%Main_main_closure_struct = type <{i64, i64}>
@Main_main_closure$def = internal global %Main_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64), i64 0}>
@Main_main_closure = alias i8, bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:27.1941574 UTC

@Main_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i8*)
define ghccc void @Main_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main_info$def to i64)),i64 168), i64 4294967299, i64 0, i64 4294967310}>
{
cbr7:
  %lnbra = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbra( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.1981512 UTC

%Main_main2_closure_struct = type <{i64, i64}>
@Main_main2_closure$def = internal global %Main_main2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i64), i64 0}>
@Main_main2_closure = alias i8, bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:27.2011458 UTC

@Main_main2_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i8*)
define ghccc void @Main_main2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to i64)),i64 168), i64 4294967299, i64 0, i64 21474836494}>
{
cbrf:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbri = ptrtoint %Main_main1_closure_struct* @Main_main1_closure$def to i64
  %lnbrj = add i64 %lnbri, 1
  store i64 %lnbrj, i64* %R2_Var
  %lnbrk = bitcast i8* @base_GHCziTopHandler_runMainIO1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbrl = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbrk( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbrl, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.2051389 UTC

%ZCMain_main_closure_struct = type <{i64, i64}>
@ZCMain_main_closure$def = internal global %ZCMain_main_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64), i64 0}>
@ZCMain_main_closure = alias i8, bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:27.2091365 UTC

@ZCMain_main_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i8*)
define ghccc void @ZCMain_main_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S9bb_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ZCMain_main_info$def to i64)),i64 192), i64 4294967299, i64 0, i64 4294967310}>
{
cbrq:
  %lnbrt = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Main_main2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbrt( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2018-12-28 09:14:27.2121292 UTC

%S9bb_srt_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64}>
@S9bb_srt$def = internal constant %S9bb_srt_struct<{i64 ptrtoint (i8* @base_GHCziInt_zdwzdcenumFromTo3_closure to i64), i64 ptrtoint (%Main_arrayByIndex16_closure_struct* @Main_arrayByIndex16_closure$def to i64), i64 ptrtoint (i8* @base_GHCziErr_error_closure to i64), i64 ptrtoint (%Main_arrayByIndex2_closure_struct* @Main_arrayByIndex2_closure$def to i64), i64 ptrtoint (%Main_viewGameState3_closure_struct* @Main_viewGameState3_closure$def to i64), i64 ptrtoint (i8* @base_GHCziArr_hopelessIndexError_closure to i64), i64 ptrtoint (%Main_viewGameState2_closure_struct* @Main_viewGameState2_closure$def to i64), i64 ptrtoint (%Main_viewGameState_closure_struct* @Main_viewGameState_closure$def to i64), i64 ptrtoint (%Main_viewGameState1_closure_struct* @Main_viewGameState1_closure$def to i64), i64 ptrtoint (%r92e_closure_struct* @r92e_closure$def to i64), i64 ptrtoint (%r92h_closure_struct* @r92h_closure$def to i64), i64 ptrtoint (%Main_arrayByIndex19_closure_struct* @Main_arrayByIndex19_closure$def to i64), i64 ptrtoint (%Main_zdwzdsarrayByIndex_closure_struct* @Main_zdwzdsarrayByIndex_closure$def to i64), i64 ptrtoint (%Main_zdwarrayByIndex_closure_struct* @Main_zdwarrayByIndex_closure$def to i64), i64 ptrtoint (%Main_arrayByIndex_closure_struct* @Main_arrayByIndex_closure$def to i64), i64 ptrtoint (%Main_updateGameState_closure_struct* @Main_updateGameState_closure$def to i64), i64 ptrtoint (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziFD_stdout_closure to i64), i64 ptrtoint (i8* @base_GHCziIOziHandleziText_hPutStr2_closure to i64), i64 ptrtoint (%Main_loop1_closure_struct* @Main_loop1_closure$def to i64), i64 ptrtoint (%Main_newGameState_closure_struct* @Main_newGameState_closure$def to i64), i64 ptrtoint (%Main_main1_closure_struct* @Main_main1_closure$def to i64), i64 ptrtoint (i8* @base_GHCziIOziHandle_hSetBuffering1_closure to i64), i64 ptrtoint (i8* @base_GHCziTopHandler_runMainIO1_closure to i64), i64 ptrtoint (%Main_main2_closure_struct* @Main_main2_closure$def to i64)}>
@S9bb_srt = internal alias i8, bitcast (%S9bb_srt_struct* @S9bb_srt$def to i8*)


==================== LLVM Code ====================
2018-12-28 09:14:27.2161223 UTC

@newCAF = external global i8
@stg_bh_upd_frame_info = external global i8
@base_GHCziInt_zdwzdcenumFromTo3_info = external global i8
@ghczmprim_GHCziTypes_Izh_con_info = external global i8
@ghczmprim_GHCziCString_unpackCStringzh_info = external global i8
@base_GHCziStackziTypes_SrcLoc_con_info = external global i8
@base_GHCziStackziTypes_PushCallStack_con_info = external global i8
@base_GHCziStackziTypes_EmptyCallStack_closure = external global i8
@ghczmprim_GHCziTypes_Czh_con_info = external global i8
@stg_upd_frame_info = external global i8
@ghczmprim_GHCziTypes_ZMZN_closure = external global i8
@ghczmprim_GHCziTypes_ZC_con_info = external global i8
@stg_gc_unpt_r1 = external global i8
@ghczmprim_GHCziCString_unpackAppendCStringzh_info = external global i8
@base_GHCziBase_zpzp_info = external global i8
@base_GHCziShow_zdwshowSignedInt_info = external global i8
@base_GHCziBase_zpzpzuzdszpzp_info = external global i8
@stg_gc_pp = external global i8
@base_GHCziErr_error_info = external global i8
@ghczmprim_GHCziTypes_True_closure = external global i8
@ghczmprim_GHCziTypes_False_closure = external global i8
@base_GHCziArr_hopelessIndexError_closure = external global i8
@stg_ap_2_upd_info = external global i8
@base_GHCziInt_I8zh_con_info = external global i8
@ghczmprim_GHCziTuple_Z2T_con_info = external global i8
@ghczmprim_GHCziTypes_TrNameS_con_info = external global i8
@ghczmprim_GHCziTypes_Module_con_info = external global i8
@stg_newByteArrayzh = external global i8
@stg_ap_p_fast = external global i8
@arrayzm0zi5zi2zi0_DataziArrayziBase_UArray_con_info = external global i8
@stg_gc_noregs = external global i8
@stg_ap_p_info = external global i8
@base_GHCziArr_rangeSizze_info = external global i8
@stg_ap_pp_info = external global i8
@base_GHCziArr_index_info = external global i8
@base_GHCziArr_range_info = external global i8
@stg_ap_ppp_info = external global i8
@arrayzm0zi5zi2zi0_DataziArrayziBase_unsafeArray_info = external global i8
@ghczmprim_GHCziClasses_modIntzh_info = external global i8
@base_GHCziIOziHandleziFD_stdout_closure = external global i8
@base_GHCziIOziHandleziText_hPutStr2_info = external global i8
@ghczmprim_GHCziTuple_Z0T_closure = external global i8
@base_GHCziIOziHandleziTypes_NoBuffering_closure = external global i8
@base_GHCziIOziHandle_hSetBuffering1_info = external global i8
@base_GHCziTopHandler_runMainIO1_info = external global i8
@base_GHCziInt_zdwzdcenumFromTo3_closure = external global i8
@base_GHCziErr_error_closure = external global i8
@base_GHCziIOziHandleziText_hPutStr2_closure = external global i8
@base_GHCziIOziHandle_hSetBuffering1_closure = external global i8
@base_GHCziTopHandler_runMainIO1_closure = external global i8


==================== LLVM Code ====================
2018-12-28 09:14:27.2191195 UTC

@llvm.used = appending constant [63 x i8*] [i8* bitcast (%S9bb_srt_struct* @S9bb_srt$def to i8*), i8* bitcast (%ZCMain_main_closure_struct* @ZCMain_main_closure$def to i8*), i8* bitcast (%Main_main2_closure_struct* @Main_main2_closure$def to i8*), i8* bitcast (%Main_main_closure_struct* @Main_main_closure$def to i8*), i8* bitcast (%Main_main1_closure_struct* @Main_main1_closure$def to i8*), i8* bitcast (%Main_newGameState_closure_struct* @Main_newGameState_closure$def to i8*), i8* bitcast (%Main_newGameState1_closure_struct* @Main_newGameState1_closure$def to i8*), i8* bitcast (%Main_loop_closure_struct* @Main_loop_closure$def to i8*), i8* bitcast (%Main_loop1_closure_struct* @Main_loop1_closure$def to i8*), i8* bitcast (%Main_zdwloop_closure_struct* @Main_zdwloop_closure$def to i8*), i8* bitcast (%Main_updateGameState_closure_struct* @Main_updateGameState_closure$def to i8*), i8* bitcast (%Main_arrayByIndex_closure_struct* @Main_arrayByIndex_closure$def to i8*), i8* bitcast (%Main_zdwarrayByIndex_closure_struct* @Main_zdwarrayByIndex_closure$def to i8*), i8* bitcast (%Main_zdwzdsarrayByIndex_closure_struct* @Main_zdwzdsarrayByIndex_closure$def to i8*), i8* bitcast (%r92h_closure_struct* @r92h_closure$def to i8*), i8* bitcast (%r92g_closure_struct* @r92g_closure$def to i8*), i8* bitcast (%Main_arrayByIndex19_closure_struct* @Main_arrayByIndex19_closure$def to i8*), i8* bitcast (%r92f_bytes_struct* @r92f_bytes$def to i8*), i8* bitcast (%r92e_closure_struct* @r92e_closure$def to i8*), i8* bitcast (%r92d_closure_struct* @r92d_closure$def to i8*), i8* bitcast (%r92c_closure_struct* @r92c_closure$def to i8*), i8* bitcast (%r92b_closure_struct* @r92b_closure$def to i8*), i8* bitcast (%r92a_closure_struct* @r92a_closure$def to i8*), i8* bitcast (%Main_zdtrModule_closure_struct* @Main_zdtrModule_closure$def to i8*), i8* bitcast (%Main_zdtrModule3_closure_struct* @Main_zdtrModule3_closure$def to i8*), i8* bitcast (%Main_zdtrModule4_bytes_struct* @Main_zdtrModule4_bytes$def to i8*), i8* bitcast (%Main_zdtrModule1_closure_struct* @Main_zdtrModule1_closure$def to i8*), i8* bitcast (%Main_zdtrModule2_bytes_struct* @Main_zdtrModule2_bytes$def to i8*), i8* bitcast (%Main_yWidth_closure_struct* @Main_yWidth_closure$def to i8*), i8* bitcast (%Main_fieldSizze_closure_struct* @Main_fieldSizze_closure$def to i8*), i8* bitcast (%Main_fieldSizze3_closure_struct* @Main_fieldSizze3_closure$def to i8*), i8* bitcast (%Main_fieldSizze4_closure_struct* @Main_fieldSizze4_closure$def to i8*), i8* bitcast (%Main_fieldSizze1_closure_struct* @Main_fieldSizze1_closure$def to i8*), i8* bitcast (%Main_fieldSizze2_closure_struct* @Main_fieldSizze2_closure$def to i8*), i8* bitcast (%Main_xWidth_closure_struct* @Main_xWidth_closure$def to i8*), i8* bitcast (%Main_viewGameState_closure_struct* @Main_viewGameState_closure$def to i8*), i8* bitcast (%Main_viewGameState3_closure_struct* @Main_viewGameState3_closure$def to i8*), i8* bitcast (%Main_arrayByIndex16_closure_struct* @Main_arrayByIndex16_closure$def to i8*), i8* bitcast (%Main_viewGameStatezuf_closure_struct* @Main_viewGameStatezuf_closure$def to i8*), i8* bitcast (%r929_bytes_struct* @r929_bytes$def to i8*), i8* bitcast (%r928_closure_struct* @r928_closure$def to i8*), i8* bitcast (%r927_closure_struct* @r927_closure$def to i8*), i8* bitcast (%r926_closure_struct* @r926_closure$def to i8*), i8* bitcast (%r925_closure_struct* @r925_closure$def to i8*), i8* bitcast (%Main_arrayByIndex2_closure_struct* @Main_arrayByIndex2_closure$def to i8*), i8* bitcast (%Main_arrayByIndex14_closure_struct* @Main_arrayByIndex14_closure$def to i8*), i8* bitcast (%Main_arrayByIndex15_bytes_struct* @Main_arrayByIndex15_bytes$def to i8*), i8* bitcast (%Main_arrayByIndex3_closure_struct* @Main_arrayByIndex3_closure$def to i8*), i8* bitcast (%Main_arrayByIndex12_closure_struct* @Main_arrayByIndex12_closure$def to i8*), i8* bitcast (%Main_arrayByIndex13_bytes_struct* @Main_arrayByIndex13_bytes$def to i8*), i8* bitcast (%Main_arrayByIndex10_closure_struct* @Main_arrayByIndex10_closure$def to i8*), i8* bitcast (%Main_arrayByIndex11_bytes_struct* @Main_arrayByIndex11_bytes$def to i8*), i8* bitcast (%Main_arrayByIndex8_closure_struct* @Main_arrayByIndex8_closure$def to i8*), i8* bitcast (%Main_arrayByIndex9_bytes_struct* @Main_arrayByIndex9_bytes$def to i8*), i8* bitcast (%Main_arrayByIndex7_closure_struct* @Main_arrayByIndex7_closure$def to i8*), i8* bitcast (%Main_arrayByIndex6_closure_struct* @Main_arrayByIndex6_closure$def to i8*), i8* bitcast (%Main_arrayByIndex5_closure_struct* @Main_arrayByIndex5_closure$def to i8*), i8* bitcast (%Main_arrayByIndex4_closure_struct* @Main_arrayByIndex4_closure$def to i8*), i8* bitcast (%Main_arrayByIndex1_bytes_struct* @Main_arrayByIndex1_bytes$def to i8*), i8* bitcast (%Main_arrayByIndex18_bytes_struct* @Main_arrayByIndex18_bytes$def to i8*), i8* bitcast (%Main_arrayByIndex17_bytes_struct* @Main_arrayByIndex17_bytes$def to i8*), i8* bitcast (%Main_viewGameState2_closure_struct* @Main_viewGameState2_closure$def to i8*), i8* bitcast (%Main_viewGameState1_closure_struct* @Main_viewGameState1_closure$def to i8*)], section "llvm.metadata"

